<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Error Messages</title>

  <para>Drools 5 introduces standardized error messages. This standardization
  aims to help users to find and resolve problems in a easier and faster way.
  In this section you will learn how to identify and interpret those error
  messages, and you will also receive some tips on how to solve the problems
  associated with them.</para>

  <section>
    <title>Message format</title>

    <para>The standardization includes the error message format and to better
    explain this format, let's use the following example:</para>

    <figure>
      <title>Error Message Format</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Rule_Language/error_message.png"
                     format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para><emphasis role="bold">1st Block:</emphasis> This area identifies the
    error code.</para>

    <para><emphasis role="bold">2nd Block:</emphasis> Line and column
    information.</para>

    <para><emphasis role="bold">3rd Block:</emphasis> Some text describing the
    problem.</para>

    <para><emphasis role="bold">4th Block:</emphasis> This is the first
    context. Usually indicates the rule, function, template or query where the
    error occurred. This block is not mandatory.</para>

    <para><emphasis role="bold">5th Block:</emphasis> Identifies the pattern
    where the error occurred. This block is not mandatory.</para>
  </section>

  <section>
    <title>Error Messages Description</title>

    <section>
      <title>101: No viable alternative</title>

      <para>Indicates the most common errors, where the parser came to a
      decision point but couldn't identify an alternative. Here are some
      examples:</para>

      <example>
        <programlisting>1: rule one
2:   when
3:     exists Foo()
4:     <emphasis role="bold">exits</emphasis> Bar()
5:   then
6: end
</programlisting>
      </example>

      <para>The above example generates this message:</para>

      <itemizedlist>
        <listitem>
          <para>[ERR 101] Line 4:4 no viable alternative at input 'exits' in
          rule one</para>
        </listitem>
      </itemizedlist>

      <para>At first glance this seems to be valid syntax, but it is not
      (exits != exists). Let's take a look at next example:</para>

      <example>
        <programlisting>1: package org.drools;
2: rule
3:   when
4:     Object()
5:   then
6:     System.out.println("A RHS");
7: end
</programlisting>
      </example>

      <para>Now the above code generates this message:</para>

      <itemizedlist>
        <listitem>
          <para>[ERR 101] Line 3:2 no viable alternative at input
          'WHEN'</para>
        </listitem>
      </itemizedlist>

      <para>This message means that the parser encountered the token <emphasis
      role="bold">WHEN</emphasis>, actually a hard keyword, but it's in the
      wrong place since the the rule name is missing.</para>

      <para>The error "no viable alternative" also occurs when you make a
      simple lexical mistake. Here is a sample of a lexical problem:</para>

      <example>
        <programlisting>1: rule simple_rule
2:   when
3:     Student( name == "Andy )
4:   then
5: end
</programlisting>
      </example>

      <!-- " close the quote, restore editor sanity -->

      <para>The above code misses to close the quotes and because of this the
      parser generates this error message:</para>

      <itemizedlist>
        <listitem>
          <para>[ERR 101] Line 0:-1 no viable alternative at input
          '&lt;eof&gt;' in rule simple_rule in pattern Student</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>Usually the Line and Column information are accurate, but in
        some cases (like unclosed quotes), the parser generates a 0:-1
        position. In this case you should check whether you didn't forget to
        close quotes, apostrophes or parentheses.</para>
      </note>
    </section>

    <section>
      <title>102: Mismatched input</title>

      <para>This error indicates that the parser was looking for a particular
      symbol that it didn’t ﬁnd at the current input position. Here are some
      samples:</para>

      <example>
        <programlisting>1: rule simple_rule
2:   when
3:     foo3 : Bar(
</programlisting>
      </example>

      <para>The above example generates this message:</para>

      <itemizedlist>
        <listitem>
          <para>[ERR 102] Line 0:-1 mismatched input '&lt;eof&gt;' expecting
          ')' in rule simple_rule in pattern Bar</para>
        </listitem>
      </itemizedlist>

      <para>To fix this problem, it is necessary to complete the rule
      statement.</para>

      <note>
        <para>Usually when you get a 0:-1 position, it means that parser
        reached the end of source.</para>
      </note>

      <para>The following code generates more than one error message:</para>

      <example>
        <programlisting>1: package org.drools;
2:
3: rule "Avoid NPE on wrong syntax"
4:   when
5:     not( Cheese( ( type == "stilton", price == 10 ) || ( type == "brie", price == 15 ) ) from $cheeseList )
6:   then
7:     System.out.println("OK");
8: end
</programlisting>
      </example>

      <para>These are the errors associated with this source:</para>

      <itemizedlist>
        <listitem>
          <para>[ERR 102] Line 5:36 mismatched input ',' expecting ')' in rule
          "Avoid NPE on wrong syntax" in pattern Cheese</para>
        </listitem>

        <listitem>
          <para>[ERR 101] Line 5:57 no viable alternative at input 'type' in
          rule "Avoid NPE on wrong syntax"</para>
        </listitem>

        <listitem>
          <para>[ERR 102] Line 5:106 mismatched input ')' expecting 'then' in
          rule "Avoid NPE on wrong syntax"</para>
        </listitem>
      </itemizedlist>

      <para>Note that the second problem is related to the first. To fix it,
      just replace the commas (',') by AND operator ('&amp;&amp;').</para>

      <note>
        <para>In some situations you can get more than one error message. Try
        to fix one by one, starting at the first one. Some error messages are
        generated merely as consequences of other errors.</para>
      </note>
    </section>

    <section>
      <title>103: Failed predicate</title>

      <para>A validating semantic predicate evaluated to false. Usually these
      semantic predicates are used to identify soft keywords. This sample
      shows exactly this situation:</para>

      <example>
        <programlisting> 1: package nesting;
 2: dialect "mvel"
 3:
 4: import org.drools.Person
 5: import org.drools.Address
 6: 
 7: <emphasis role="bold">fdsfdsfds</emphasis>
 8: 
 9: rule "test something"
10:   when
11:     p: Person( name=="Michael" )
12:   then
13:     p.name = "other";
14:     System.out.println(p.name);
15: end
</programlisting>
      </example>

      <para>With this sample, we get this error message:</para>

      <itemizedlist>
        <listitem>
          <para>[ERR 103] Line 7:0 rule 'rule_key' failed predicate:
          {(validateIdentifierKey(DroolsSoftKeywords.RULE))}? in rule</para>
        </listitem>
      </itemizedlist>

      <para>The <emphasis role="bold">fdsfdsfds</emphasis> text is invalid and
      the parser couldn’t identify it as the soft keyword
      <literal>rule</literal>.</para>

      <note>
        <para>This error is very similar to 102: Mismatched input, but usually
        involves soft keywords.</para>
      </note>
    </section>

    <section>
      <title>104: Trailing semi-colon not allowed</title>

      <para>This error is associated with the <literal>eval</literal> clause,
      where its expression may not be terminated with a semicolon. Check this
      example:</para>

      <example>
        <programlisting>1: rule simple_rule
2:   when
3:     eval(abc();)
4:   then
5: end
</programlisting>
      </example>

      <para>Due to the trailing semicolon within eval, we get this error
      message:</para>

      <itemizedlist>
        <listitem>
          <para>[ERR 104] Line 3:4 trailing semi-colon not allowed in rule
          simple_rule</para>
        </listitem>
      </itemizedlist>

      <para>This problem is simple to fix: just remove the semi-colon.</para>
    </section>

    <section>
      <title>105: Early Exit</title>

      <para>The recognizer came to a subrule in the grammar that must match an
      alternative at least once, but the subrule did not match anything.
      Simply put: the parser has entered a branch from where there is no way
      out. This example illustrates it:</para>

      <example>
        <programlisting>1: template test_error
2:   aa s  11;
3: end
</programlisting>
      </example>

      <para>This is the message associated to the above sample:</para>

      <itemizedlist>
        <listitem>
          <para>[ERR 105] Line 2:2 required (...)+ loop did not match anything
          at input 'aa' in template test_error</para>
        </listitem>
      </itemizedlist>

      <para>To fix this problem it is necessary to remove the numeric value as
      it is neither a valid data type which might begin a new template slot
      nor a possible start for any other rule file construct.</para>
    </section>
  </section>

  <section>
    <title>Other Messages</title>

    <para>Any other message means that something bad has happened, so please
    contact the development team.</para>
  </section>
</section>
