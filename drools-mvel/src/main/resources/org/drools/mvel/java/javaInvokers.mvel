@declare{"getMethodBytecode"}
    public String getMethodBytecode() {
        return org.drools.mvel.asm.MethodComparator.getMethodBytecode(getClass(), "@{ruleClassName}", "@{package}", "@{methodName}", "@{ (package + '.' + ruleClassName).replace( '.', '/' ) + '.class' }" );
    }
@end{}


@declare{"equals"}
    public boolean equals(Object object) {
        if ( object == null || !(object instanceof  org.drools.base.rule.accessor.CompiledInvoker) ) {
            return false;
        }
        return org.drools.mvel.asm.MethodComparator.compareBytecode( getMethodBytecode(), (( org.drools.base.rule.accessor.CompiledInvoker ) object).getMethodBytecode() );
    }
@end{}

@declare{"hashCode"}
    public int hashCode() {
        return @{hashCode};
    }
@end{}

@declare{"replaceDeclaration"}
    public void replaceDeclaration(org.drools.base.rule.Declaration declaration,
                                   org.drools.base.rule.Declaration resolved) {
        // this class does not cache declarations
    }
@end{}


@declare{"returnValueInvoker"}
package @{package};

public class @{invokerClassName} implements org.drools.base.rule.accessor.ReturnValueExpression, org.drools.base.rule.accessor.CompiledInvoker
{
    private static final long serialVersionUID  = 510l;

    public Object createContext() { return null; }

    public org.drools.base.rule.accessor.FieldValue evaluate(org.kie.api.runtime.rule.FactHandle handle,
                            org.drools.base.reteoo.BaseTuple tuple,
                            org.drools.base.rule.Declaration[] previousDeclarations,
                            org.drools.base.rule.Declaration[] localDeclarations,
                            org.drools.base.base.ValueResolver valueResolver,
                            Object context ) throws Exception {

        @code{i0=0}@foreach{declr : declarations} @{declr.typeName} @{declr.identifier} = ( @{declr.boxedTypeName} ) previousDeclarations[@{i0}].getValue( valueResolver, tuple );
        @code{i0++}
        @end{}
        @if{readLocalsFromTuple}
          @code{i0=0}@foreach{declr : localDeclarations} @{declr.typeName} @{declr.identifier} = ( @{declr.boxedTypeName} ) localDeclarations[@{i0}].getValue( valueResolver, tuple );
          @code{i0++}
          @end{}
        @else{}
          @code{i0=0}@foreach{declr : localDeclarations} @{declr.typeName} @{declr.identifier} = ( @{declr.boxedTypeName} ) localDeclarations[@{i0}].getValue( valueResolver, handle );
          @code{i0++}
          @end{}
        @end{}
        @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} = ( @{type} ) valueResolver.getGlobal( "@{identifier}" );
        @end{}

        return @{ruleClassName}.@{methodName}(
            @foreach{declr : declarations} @{declr.identifier}
            @end{","}  @if{localDeclarations != empty && declarations != empty},@end{}
            @foreach{declr :localDeclarations} @{declr.identifier}
            @end{","}@if{globals != empty && (localDeclarations != empty || declarations != empty)},@end{}
            @foreach{identifier : globals}@{identifier}
            @end{","} );
    }

    @includeNamed{"replaceDeclaration"}

    @includeNamed{"hashCode"}

    @includeNamed{"getMethodBytecode"}

    @includeNamed{"equals"}
}
@end{}


@declare{"evalInvoker"}
package @{package};

public class @{invokerClassName} implements org.drools.base.rule.accessor.EvalExpression, org.drools.base.rule.accessor.CompiledInvoker
{
    private static final long serialVersionUID  = 510l;

    // no need for context
    public Object createContext() { return null; }

    public boolean evaluate(org.drools.base.reteoo.BaseTuple tuple,
                            org.drools.base.rule.Declaration[] declarations,
                            org.drools.base.base.ValueResolver valueResolver,
                            Object context ) throws Exception {

        @code{i0=0}@foreach{declr : declarations} @{declr.typeName} @{declr.identifier} = ( @{declr.boxedTypeName} ) declarations[@{i0}].getValue( valueResolver, tuple ) );
            @code{i0++}
        @end{}
        @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} = ( @{type} ) valueResolver.getGlobal( "@{identifier}" );
        @end{}

        return @{ruleClassName}.@{methodName}(
            @foreach{declr : declarations} @{declr.identifier}
            @end{","} @if{globals != empty && declarations != empty},@end{}
            @foreach{identifier : globals}@{identifier}
            @end{","} );
    }

    public org.drools.base.rule.accessor.EvalExpression clone() {
        // this class is stateless, so no cloning needed
        return this;
    }

    @includeNamed{"replaceDeclaration"}

    @includeNamed{"hashCode"}

    @includeNamed{"getMethodBytecode"}

    @includeNamed{"equals"}
}
@end{}


@declare{"accumulateInvoker"}
package @{package};

public class @{invokerClassName} implements org.drools.base.rule.accessor.Accumulator, org.drools.base.rule.accessor.CompiledInvoker
{
    private static final long serialVersionUID  = 510l;

    public java.io.Serializable createContext() {
        return new @{ruleClassName}.@{className}();
    }

    public Object init(java.lang.Object workingMemoryContext,
                     java.lang.Object context,
                     org.drools.base.reteoo.BaseTuple tuple,
                     org.drools.base.rule.Declaration[] declarations,
                     org.drools.base.base.ValueResolver valueResolver) {
        @code{i0=0}@foreach{declr : declarations} @{declr.typeName} @{declr.identifier} = ( @{declr.boxedTypeName} ) declarations[@{i0}].getValue( valueResolver, tuple );
            @code{i0++}
        @end{}
        @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} = ( @{type} ) valueResolver.getGlobal( "@{identifier}" );
        @end{}

        try {
            ((@{ruleClassName}.@{className})context).init(
                @foreach{declr : declarations} @{declr.identifier}@end{","}@if{globals != empty && declarations != empty},@end{}
                @foreach{identifier : globals} @{identifier}@end{","} );
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        return context;
    }

    public Object accumulate(java.lang.Object workingMemoryContext,
                           java.lang.Object context,
                           org.drools.base.reteoo.BaseTuple tuple,
                           org.kie.api.runtime.rule.FactHandle handle,
                           org.drools.base.rule.Declaration[] declarations,
                           org.drools.base.rule.Declaration[] innerDeclarations,
                           org.drools.base.base.ValueResolver valueResolver) {
        @code{ i0 = 0 }@foreach{declr : declarations} @{declr.typeName} @{declr.identifier} = ( @{declr.boxedTypeName} ) declarations[@{i0}].getValue( valueResolver, tuple );
            @code{ i0++ }
        @end{}
        @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} = ( @{type} ) valueResolver.getGlobal( "@{identifier}" );
        @end{}
        @if{isMultiPattern}
          @code{ i0 = 0 }@foreach{declr : innerDeclarations} @{declr.extractor.extractToClassName} @{declr.identifier} = (@{declr.extractor.extractToClassName}) innerDeclarations[@{i0}].getValue( valueResolver, tuple );
            @code{ i0++ }
          @end{}
        @else{}
          @code{ i0 = 0 }@foreach{declr : innerDeclarations} @{declr.extractor.extractToClassName} @{declr.identifier} = (@{declr.extractor.extractToClassName}) innerDeclarations[@{i0}].getValue( valueResolver, handle );
            @code{ i0++ }
          @end{}
        @end{}

        try {
            return ((@{ruleClassName}.@{className})context).accumulate(
                valueResolver,
                handle,
                innerDeclarations@if{declarations != empty},@end{}
                @foreach{declr : declarations} @{declr.identifier}@end{","}@if{globals != empty},@end{}
                @foreach{identifier: globals} @{identifier}@end{","}@if{innerDeclarations != empty},@end{}
                @foreach{declr : innerDeclarations} @{declr.identifier}@end{","});
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public boolean tryReverse(java.lang.Object workingMemoryContext,
                           java.lang.Object context,
                           org.drools.base.reteoo.BaseTuple tuple,
                           org.kie.api.runtime.rule.FactHandle handle,
                           java.lang.Object value,
                           org.drools.base.rule.Declaration[] declarations,
                           org.drools.base.rule.Declaration[] innerDeclarations,
                           org.drools.base.base.ValueResolver valueResolver) {
        if (!supportsReverse()) {
            return false;
        }

        @code{ i0 = 0 }@foreach{declr : declarations} @{declr.typeName} @{declr.identifier} = ( @{declr.boxedTypeName} ) declarations[@{i0}].getValue( valueResolver, tuple );
            @code{ i0++ }
        @end{}
        @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} = ( @{type} ) valueResolver.getGlobal( "@{identifier}" );
        @end{}
        @if{isMultiPattern}
          @code{ i0 = 0}@foreach{declr : innerDeclarations} @{declr.extractor.extractToClassName} @{declr.identifier} = (@{declr.extractor.extractToClassName}) innerDeclarations[@{i0}].getValue( valueResolver, tuple );
            @code{ i0++ }
          @end{}
        @else{}
          @code{ i0 = 0 }@foreach{declr : innerDeclarations} @{declr.extractor.extractToClassName} @{declr.identifier} = (@{declr.extractor.extractToClassName}) innerDeclarations[@{i0}].getValue( valueResolver, handle );
            @code{ i0++ }
          @end{}
        @end{}

        try {
            ((@{ruleClassName}.@{className})context).reverse(
                valueResolver,
                handle,
                value@if{globals != empty},@end{}
                @foreach{identifier : globals} @{identifier}@end{","});
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        return true;
    }

    public Object getResult(java.lang.Object workingMemoryContext,
                            java.lang.Object context,
                            org.drools.base.reteoo.BaseTuple tuple,
                            org.drools.base.rule.Declaration[] declarations,
                            org.drools.base.base.ValueResolver valueResolver) {
        @code{ i0 = 0 }@foreach{declr : declarations} @{declr.typeName} @{declr.identifier} = ( @{declr.boxedTypeName} ) declarations[@{i0}].getValue( valueResolver, tuple );
            @code{ i0++ }
        @end{}
        @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} = ( @{type} ) valueResolver.getGlobal( "@{identifier}" );
        @end{}

        try {
            return ((@{ruleClassName}.@{className})context).getResult(
                @foreach{declr : declarations} @{declr.identifier}@end{","}@if{globals != empty && declarations != empty},@end{}
                @foreach{identifier : globals} @{identifier}@end{","} );
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public boolean supportsReverse() {
        return @{supportsReverse};
    }

    public Object createWorkingMemoryContext() {
        return null;
    }

    @includeNamed{"hashCode"}

    @includeNamed{"equals"}

    public String getMethodBytecode() {
        java.io.InputStream is = @{ruleClassName}.class.getClassLoader().getResourceAsStream( "@{package}.@{ruleClassName}".replace( '.', '/' ) + "@{'$'}@{className}" + ".class" );

        java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream();
        byte[] data = new byte[1024];
        int byteCount;
        try {
            while ( (byteCount = is.read( data,
                                 0,
                                 1024 )) > -1 )
            {
                bos.write(data, 0, byteCount);
            }
        } catch ( java.io.IOException e ) {
            throw new RuntimeException("Unable getResourceAsStream for Class '@{ruleClassName}@{'$'}@{className}' ");
        }
        return bos.toString();
    }
}
@end{}

@declare{"returnValueEvaluatorInvoker"}
package @{package};

public class @{invokerClassName} implements org.drools.base.rule.accessor.ReturnValueEvaluator, org.drools.base.rule.accessor.CompiledInvoker
{
    private static final long serialVersionUID  = 510l;

    public Object evaluate(org.drools.base.base.ValueResolver valueResolver, org.drools.base.process.ProcessContext processContext) throws Exception {

        @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} = ( @{type} ) valueResolver.getGlobal( "@{identifier}" );
        @end{}

        @foreach{type : variableTypes, identifier : variables} @{type} @{identifier} = ( @{type} ) processContext.getVariable( "@{identifier}" );
        @end{}

        return @{processClassName}.@{methodName} (
            processContext@if{globals != empty},@end{}
            @foreach{identifier : globals} @{identifier}
            @end{","}@if{variables != empty},@end{}
            @foreach{identifier : variables} @{identifier}
            @end{","} );
    }
    
    public String getMethodBytecode() {
        return null;
    }
}
@end{}
