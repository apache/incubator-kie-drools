@comment{

  Copyright 2011 JBoss Inc

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}




@comment{

}

@declare{'naiveBayesBuildOuts'}

rule "BuildNaiveBayesPriors_@{name}_@{field}"
dialect "mvel"
when
    ModelMarker( "@{name}" ; enabled == true )
then
    bp = new BayesPriors( "@{name}", "@{field}",
                          [ @foreach{ tvc : tvc.targetValueCounts } @{ format( datatype, tvc.value ) } @end{ ',' } ],
                          [ @foreach{ tvc : tvc.targetValueCounts }  @{ tvc.count }  @end{ ',' } ],
                          @{threshold} );
    insertLogical( bp );
end

rule "NaiveBayesEvalPosterior_@{name}"
salience -20
when
           BayesPriors( context == "@{name}", $vals : values, $priors : counts, $thold : threshold )
           exists BayesConditional( context == "@{name}" )
    $pro : java.util.List() from accumulate(
                $tgt : @{ mapDatatype( datatype, true ) }() from $vals
                and
                $p : Double() from accumulate( BayesConditional( context == "@{name}", $x : counts ),
                                        init( int index = $vals.indexOf( $tgt ); double d = (Double) $priors.get( index ); ),
                                        action( d = d * Math.max( (Double) $x.get( index ), $thold ); ),
                                        result( d )
                                   )
                                   ,
                init( java.util.List m = new java.util.ArrayList( $vals ); ),
                action( m.set( $vals.indexOf( $tgt ), $p ); ),
                result( m )
           )
then
    BayesPosterior bp = new BayesPosterior( "@{name}", "@{field}", $pro );
    insertLogical( bp );
end


rule "NaiveBayesUpdateAggregates_@{name}"
salience 1000
when
    $bcs : BayesCounts( context == "@{name}", $cts : counts )
           BayesPriors( context == "@{name}", $values : values, values.size() > 0, $priors : counts )
    $ags : java.util.List() from accumulate(
                $tgt : @{ mapDatatype( datatype, true ) }() from $values
                and
                accumulate( $key : String() from $cts.keySet()
                            and
                            $num : Double() from ( (java.util.List) $cts.get( $key ) ).get( $values.indexOf( $tgt ) ),
                            $tot : sum( $num )
                          ),
                init( java.util.List m = new java.util.ArrayList( $values ); ),
                action( m.set( $values.indexOf( $tgt ), $tot ); ),
                result( m )
           )
then
    modify ( $bcs ) {
        setAggregates( $ags );
    }
end



rule "NaiveBayesMapToOutput_@{name}"
when
    $bcs : BayesPosterior( context == "@{name}", $wgts : prob )
           BayesPriors( context == "@{name}", $values : values )
           accumulate( $x : Double() from $wgts, $den : sum( $x ) )
    $val : @{ mapDatatype( datatype, true ) }() from $values
then
    @{ field } x = new @{ field }();
        x.setContext( "@{name}" );
        x.setValid( true );
        x.setMissing( false );
        x.setValue( $val );
        x.setWeight( (Double) $wgts.get( $values.indexOf( $val ) ) / $den.doubleValue() );
    insertLogical( x );
end


@end{}


@includeNamed{'naiveBayesBuildOuts'}