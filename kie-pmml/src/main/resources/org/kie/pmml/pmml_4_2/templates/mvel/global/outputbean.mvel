@comment{

  Copyright 2018 Red Hat, Inc. and/or its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}

@declare{'outputbean'}

package @{packageName};

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.kie.api.definition.type.Role;
import org.kie.api.definition.type.PropertyReactive;
import org.kie.api.pmml.PMML4OutputField;
import org.kie.pmml.pmml_4_2.model.PMMLOutputConverter;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

@XmlRootElement(name="@{name}")
@XmlType(name="@{modelId}_@{name}")
@XmlAccessorType(XmlAccessType.FIELD)
@XStreamAlias("@{className}")
@Role(Role.Type.EVENT)
@PropertyReactive
public class @{className} extends PMML4OutputField {
   @XmlElement(name = "value", required = true)
   private @{typeName} value;
   @XmlElement(name = "displayValue", required = true)
   private String displayValue = "@{displayValue}";
   @XmlElement(name = "weight", required = false)
   private Double weight = 1.0;
   
   
   public @{className}() {
      // Empty constructor for JAXB
   }
   
   public @{typeName} getValue() {
      return value;
   }
   
   public void setValue(@{typeName} value) {
      this.value = value;
   }
   
   public String getDisplayValue() {
      return displayValue;
   }
   
   public void setDisplayValue(String displayValue) {
      this.displayValue = displayValue;
   }
   
   public Double getWeight() {
      return weight;
   }
   
   public void setWeight(Double weight) {
      this.weight = weight;
   }
   
   @Override
   public int hashCode() {
      final int prime = 31;
      int result = super.hashCode();
      result = prime * result + ((value == null) ? 0 : value.hashCode());
      result = prime * result + ((displayValue == null) ? 0 : displayValue.hashCode());
      result = prime * result + ((weight == null) ? 0 : weight.hashCode());
      return result;
   }
   
   @Override
   public boolean equals(Object obj) {
      if (this == obj) {
         return true;
      }
      if (!super.equals(obj)) {
         return false;
      }
      if (obj == null) {
         return false;
      }
      if (getClass() != obj.getClass()) {
         return false;
      }
      @{className} other = (@{className})obj;
      if (value == null) {
         if (other.value != null) {
            return false;
         }
      } else if (!value.equals(other.value)) {
         return false;
      }
      if (weight == null) {
         if (other.weight != null) {
            return false;
         }
      } else if (!weight.equals(other.weight)) {
         return false;
      }
      return true;
   }
   
   @Override
   public String toString() {
      StringBuilder bldr = new StringBuilder("@{className} - [");
      bldr.append(super.toString()).append(", value=");
      bldr.append(value).append(", weight=");
      bldr.append(weight).append(", displayValue=");
      bldr.append(displayValue).append("]");
      return bldr.toString();
   }
   
}   
   
@end{}
@includeNamed{'outputbean'}