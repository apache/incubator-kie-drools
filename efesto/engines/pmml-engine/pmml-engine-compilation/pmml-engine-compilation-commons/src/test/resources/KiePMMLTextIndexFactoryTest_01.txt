{
    KiePMMLFieldRef %1$s_Expression = new KiePMMLFieldRef("term", Collections.emptyList(), null);
    Map<String, Object> %1$s_0_InlineTable_0_columnValues = Stream
            .of(new Object[][] { { "regex", "true" }, { "string", "interfaces?" }, { "stem", "interface" } })
            .collect(Collectors.toMap(data -> (String) data[0], data -> data[1]));
    KiePMMLRow %1$s_0_InlineTable_0 = new KiePMMLRow(%1$s_0_InlineTable_0_columnValues);
    Map<String, Object> %1$s_0_InlineTable_1_columnValues = Stream
            .of(new Object[][] { { "regex", "true" }, { "string", "is|are|seem(ed|s?)|were" }, { "stem", "be" } })
            .collect(Collectors.toMap(data -> (String) data[0], data -> data[1]));
    KiePMMLRow %1$s_0_InlineTable_1 = new KiePMMLRow(%1$s_0_InlineTable_1_columnValues);
    Map<String, Object> %1$s_0_InlineTable_2_columnValues = Stream
            .of(new Object[][] { { "regex", "true" }, { "string", "user friendl(y|iness)" }, { "stem", "user_friendly" } })
            .collect(Collectors.toMap(data -> (String) data[0], data -> data[1]));
    KiePMMLRow %1$s_0_InlineTable_2 = new KiePMMLRow(%1$s_0_InlineTable_2_columnValues);
    KiePMMLInlineTable %1$s_0_InlineTable = new KiePMMLInlineTable("%1$s_0_InlineTable", Collections.emptyList(),
            Arrays.asList(%1$s_0_InlineTable_0, %1$s_0_InlineTable_1, %1$s_0_InlineTable_2));
    KiePMMLTextIndexNormalization %1$s_0 = KiePMMLTextIndexNormalization
            .builder("%1$s_0", Collections.emptyList())
            .withInField("string")
            .withOutField("stem")
            .withKiePMMLInlineTable(%1$s_0_InlineTable)
            .withRegexField("regex")
            .withRecursive(false)
            .withIsCaseSensitive(false)
            .withMaxLevenshteinDistance(null)
            .withWordSeparatorCharacterRE(null)
            .withTokenize(false)
            .build();
    Map<String, Object> %1$s_1_InlineTable_0_columnValues = Stream
            .of(new Object[][] { { "regex", "true" }, { "re", "interface be (user_friendly|well designed|excellent)" }, { "feature", "ui_good" } })
            .collect(Collectors.toMap(data -> (String) data[0], data -> data[1]));
    KiePMMLRow %1$s_1_InlineTable_0 = new KiePMMLRow(%1$s_1_InlineTable_0_columnValues);
    KiePMMLInlineTable %1$s_1_InlineTable = new KiePMMLInlineTable("%1$s_1_InlineTable", Collections.emptyList(), Arrays.asList(%1$s_1_InlineTable_0));
    KiePMMLTextIndexNormalization %1$s_1 = KiePMMLTextIndexNormalization.builder("%1$s_1", Collections.emptyList())
            .withInField("re")
            .withOutField("feature")
            .withKiePMMLInlineTable(%1$s_1_InlineTable)
            .withRegexField("regex")
            .withRecursive(false)
            .withIsCaseSensitive(false)
            .withMaxLevenshteinDistance(null)
            .withWordSeparatorCharacterRE(null)
            .withTokenize(false)
            .build();
    KiePMMLTextIndex %1$s = KiePMMLTextIndex.builder("%2$s", Collections.emptyList(), %1$s_Expression)
            .withLocalTermWeights(org.kie.pmml.api.enums.LOCAL_TERM_WEIGHTS.BINARY)
            .withIsCaseSensitive(false)
            .withMaxLevenshteinDistance(0)
            .withCountHits(org.kie.pmml.api.enums.COUNT_HITS.ALL_HITS)
            .withWordSeparatorCharacterRE("\\s+")
            .withTokenize(true)
            .withTextIndexNormalizations(Arrays.asList(%1$s_0, %1$s_1))
            .build();
}
