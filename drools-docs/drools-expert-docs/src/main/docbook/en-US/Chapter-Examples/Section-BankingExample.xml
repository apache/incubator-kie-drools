<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
    <title>Banking Tutorial</title>

    <screen><emphasis role="bold">Name:</emphasis> BankingTutorial
<emphasis role="bold">Main class:</emphasis> org.drools.tutorials.banking.BankingExamplesApp.java
<emphasis role="bold">Module:</emphasis> drools-examples
<emphasis role="bold">Type:</emphasis> Java application
<emphasis role="bold">Rules file:</emphasis> org.drools.tutorials.banking.*.drl
<emphasis role="bold">Objective:</emphasis> Demonstrate pattern matching, basic sorting and calculation rules.</screen>

    <para>This tutorial demonstrates the process of developing a
    complete personal banking application to handle credits and debits on
    multiple accounts. It uses a set of design patterns that have
    been created for the process.</para>

    <para>The class <code>RuleRunner</code> is a simple harness to execute
    one or more DRL files against a set of data. It compiles the Packages 
    and creates the Knowledge Base for each execution, allowing us to
    easily execute each scenario and inspect the outputs. In reality this
    is not a good solution for a production system, where the Knowledge Base
    should be built just once and cached, but for the purposes of this
    tutorial it shall suffice.</para>

    <example>
      <title>Banking Tutorial: RuleRunner</title>

      <programlisting language="java"><![CDATA[public class RuleRunner {

    public RuleRunner() {
    }

    public void runRules(String[] rules,
                         Object[] facts) throws Exception {

        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();

        for ( int i = 0; i < rules.length; i++ ) {
            String ruleFile = rules[i];
            System.out.println( "Loading file: " + ruleFile );
            kbuilder.add( ResourceFactory.newClassPathResource( ruleFile,
                                                                RuleRunner.class ),
                          ResourceType.DRL );
        }

        Collection<KnowledgePackage> pkgs = kbuilder.getKnowledgePackages();
        kbase.addKnowledgePackages( pkgs );
        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();

        for ( int i = 0; i < facts.length; i++ ) {
            Object fact = facts[i];
            System.out.println( "Inserting fact: " + fact );
            ksession.insert( fact );
        }

        ksession.fireAllRules();
    }
}]]></programlisting>
    </example>

    <para>The first of our sample Java classes loads and executes a single
    DRL file, <filename>Example.drl</filename>, but without inserting any
    data.</para>

    <example>
      <title>Banking Tutorial : Java Example1</title>

      <programlisting language="java">public class Example1 {
    public static void main(String[] args) throws Exception {
        new RuleRunner().runRules( new String[] { "Example1.drl" },
                                   new Object[0] );
    }
}</programlisting>
    </example>

    <para>The first simple rule to execute has a single <literal>eval</literal>
    condition that will alway be true, so that this rule will match and
    fire, once, after the start.</para>

    <example>
      <title>Banking Tutorial: Rule in Example1.drl</title>

      <programlisting>rule "Rule 01"   
    when
        eval( 1==1 )
    then
        System.out.println( "Rule 01 Works" );
endh</programlisting>
    </example>

    <para>The output for the rule is below, showing that the rule matches
    and executes the single print statement.</para>

    <example>
      <title>Banking Tutorial: Output of Example1.java</title>

      <programlisting>Loading file: Example1.drl
Rule 01 Works</programlisting>
    </example>

    <para>The next step is to assert some simple facts and print them
    out.</para>

    <example>
      <title>Banking Tutorial: Java Example2</title>

      <programlisting language="java">public class Example2 {
    public static void main(String[] args) throws Exception {
        Number[] numbers = new Number[] {wrap(3), wrap(1), wrap(4), wrap(1), wrap(5)};
        new RuleRunner().runRules( new String[] { "Example2.drl" },
                                   numbers );
    }
    
    private static Integer wrap( int i ) {
        return new Integer(i);
    }
}</programlisting>
    </example>

    <para>This doesnâ€™t use any specific facts but instead asserts a set
    of <code>java.lang.Integer</code> objects. This is not considered
    "best practice" as a number is not a useful fact, but we use it here
    to demonstrate basic techniques before more complexity is added.</para>

    <para>Now we will create a simple rule to print out these numbers.</para>

    <example>
      <title>Banking Tutorial: Rule in Example2.drl</title>

      <programlisting>rule "Rule 02"
    when
        Number( $intValue : intValue )
    then
        System.out.println( "Number found with value: " + $intValue ); 
end</programlisting>
    </example>

    <para>Once again, this rule does nothing special. It identifies any
    facts that are <code>Number</code> objects and prints out the values.
    Notice the use of the abstract class <code>Number</code>: we inserted
    <code>Integer</code> objects but we now look for any kind of number.
    The pattern matching engine is able to match interfaces and
    superclasses of asserted objects.</para>

    <para>The output shows the DRL being loaded, the facts inserted and
    then the matched and fired rules. We can see that each inserted number
    is matched and fired and thus printed.</para>

    <example>
      <title>Banking Tutorial: Output of Example2.java</title>

      <programlisting>Loading file: Example2.drl
Inserting fact: 3
Inserting fact: 1
Inserting fact: 4
Inserting fact: 1
Inserting fact: 5
Number found with value: 5
Number found with value: 1
Number found with value: 4
Number found with value: 1
Number found with value: 3
</programlisting>
    </example>

    <para>There are certainly many better ways to sort numbers than using
    rules, but since we will need to apply some cashflows in date order
    when we start looking at banking rules we'll develop simple rule
    based sorting technique.</para>

    <example>
      <title>Banking Tutorial: Example3.java</title>

      <programlisting language="java">public class Example3 {
    public static void main(String[] args) throws Exception {
        Number[] numbers = new Number[] {wrap(3), wrap(1), wrap(4), wrap(1), wrap(5)};
        new RuleRunner().runRules( new String[] { "Example3.drl" },
                                   numbers );
    }
    
    private static Integer wrap(int i) {
        return new Integer(i);
    }
}</programlisting>
    </example>

    <para>Again we insert our <code>Integer</code> objects, but this time the
    rule is slightly different:</para>

    <example>
      <title>Banking Tutorial: Rule in Example3.drl</title>

      <programlisting>rule "Rule 03"
    when
        $number : Number( )
        not Number( intValue &lt; $number.intValue )
    then
        System.out.println("Number found with value: " + $number.intValue() ); 
        retract( $number );
end</programlisting>
    </example>

    <para>The first line of the rule identifies a <code>Number</code> and
    extracts the value. The second line ensures that there does not exist
    a smaller number than the one found by the first pattern. We might
    expect to match only one number - the smallest in the set. However,
    the retraction of the number after it has been printed means that the
    smallest number has been removed, revealing the next smallest number,
    and so on. </para>

    <para>The resulting output shows that the numbers are now
    sorted numerically.</para>

    <example>
      <title>Banking Tutorial: Output of Example3.java</title>

      <programlisting>Loading file: Example3.drl
Inserting fact: 3
Inserting fact: 1
Inserting fact: 4
Inserting fact: 1
Inserting fact: 5
Number found with value: 1
Number found with value: 1
Number found with value: 3
Number found with value: 4
Number found with value: 5
</programlisting>
    </example>

    <para>We are ready to start moving towards our personal accounting
    rules. The first step is to create a <code>Cashflow</code> object.</para>

    <example>
      <title>Banking Tutorial: Class Cashflow</title>

      <programlisting language="java">public class Cashflow {
    private Date   date;
    private double amount;

    public Cashflow() {
    }

    public Cashflow(Date date, double amount) {
        this.date = date;
        this.amount = amount;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String toString() {
        return "Cashflow[date=" + date + ",amount=" + amount + "]";
    }
}</programlisting>
    </example>

    <para>Class <code>Cashflow</code> has two simple attributes, a date
    and an amount. (Note that using the type <code>double</code> for
    monetary units is generally <emphasis>not</emphasis> a good idea
    because floating point numbers cannot represent most numbers accurately.)
    There is also an overloaded constructor to set the values, and a
    method <code>toString</code> to print a cashflow. The Java code of
    <filename>Example4.java</filename> inserts five Cashflow objects,
    with varying dates and amounts.</para>

    <example>
      <title>Banking Tutorial: Example4.java</title>

      <programlisting language="java">public class Example4 {
    public static void main(String[] args) throws Exception {
        Object[] cashflows = {
            new Cashflow(new SimpleDate("01/01/2007"), 300.00),
            new Cashflow(new SimpleDate("05/01/2007"), 100.00),
            new Cashflow(new SimpleDate("11/01/2007"), 500.00),
            new Cashflow(new SimpleDate("07/01/2007"), 800.00),
            new Cashflow(new SimpleDate("02/01/2007"), 400.00),
        };
        
        new RuleRunner().runRules( new String[] { "Example4.drl" },
                                   cashflows );
    }
}</programlisting>
    </example>

    <para>The convenience class <code>SimpleDate</code> extends
    <code>java.util.Date</code>, providing a constructor taking
    a String as input and defining a date format. The code is
    listed below</para>

    <example>
      <title>Banking Tutorial: Class SimpleDate</title>

      <programlisting language="java">public class SimpleDate extends Date {
    private static final SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
    
    public SimpleDate(String datestr) throws Exception {             
        setTime(format.parse(datestr).getTime());
    }
}</programlisting>
    </example>

    <para>Now, letâ€™s look at <filename>Example4.drl</filename> to see how
    we print the sorted <code>Cashflow</code> objects:</para>

    <example>
      <title>Banking Tutorial: Rule in Example4.drl</title>

      <programlisting>rule "Rule 04"   
    when
        $cashflow : Cashflow( $date : date, $amount : amount )
        not Cashflow( date &lt; $date)
    then
        System.out.println("Cashflow: "+$date+" :: "+$amount);  
        retract($cashflow);
end</programlisting>
    </example>

    <para>Here, we identify a <code>Cashflow</code> and extract the date
    and the amount. In the second line of the rule we ensure that there
    is no Cashflow with an earlier date than the one found. In the
    consequence, we print the <code>Cashflow</code> that satisfies the
    rule and then retract it, making way for the next earliest
    <code>Cashflow</code>. So, the output we generate is:</para>

    <example>
      <title>Banking Tutorial: Output of Example4.java</title>

      <programlisting>Loading file: Example4.drl
Inserting fact: Cashflow[date=Mon Jan 01 00:00:00 GMT 2007,amount=300.0]
Inserting fact: Cashflow[date=Fri Jan 05 00:00:00 GMT 2007,amount=100.0]
Inserting fact: Cashflow[date=Thu Jan 11 00:00:00 GMT 2007,amount=500.0]
Inserting fact: Cashflow[date=Sun Jan 07 00:00:00 GMT 2007,amount=800.0]
Inserting fact: Cashflow[date=Tue Jan 02 00:00:00 GMT 2007,amount=400.0]
Cashflow: Mon Jan 01 00:00:00 GMT 2007 :: 300.0
Cashflow: Tue Jan 02 00:00:00 GMT 2007 :: 400.0
Cashflow: Fri Jan 05 00:00:00 GMT 2007 :: 100.0
Cashflow: Sun Jan 07 00:00:00 GMT 2007 :: 800.0
Cashflow: Thu Jan 11 00:00:00 GMT 2007 :: 500.0
</programlisting>
    </example>

    <para>Next, we extend our <code>Cashflow</code>, resulting in a
    <code>TypedCashflow</code> which can be a credit or a debit operation.
    (Normally, we would just add this to the <code>Cashflow</code> type, but
    we use extension to keep the previous version of the class intact.)</para>

    <example>
      <title>Banking Tutorial: Class TypedCashflow</title>

      <programlisting language="java">public class TypedCashflow extends Cashflow {
    public static final int CREDIT = 0;
    public static final int DEBIT  = 1;

    private int             type;

    public TypedCashflow() {
    }

    public TypedCashflow(Date date, int type, double amount) {
        super( date, amount );
        this.type = type;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public String toString() {
        return "TypedCashflow[date=" + getDate() +
               ",type=" + (type == CREDIT ? "Credit" : "Debit") +
               ",amount=" + getAmount() + "]";
    }
}</programlisting>
    </example>

    <para>There are lots of ways to improve this code, but for the sake
    of the example this will do.</para>

    <para>Now let's create Example5, a class for running our code.</para>

    <example>
      <title>Banking Tutorial: Example5.java</title>

      <programlisting language="java">public class Example5 {
    public static void main(String[] args) throws Exception {      
        Object[] cashflows = {
            new TypedCashflow(new SimpleDate("01/01/2007"),    
                              TypedCashflow.CREDIT, 300.00),
            new TypedCashflow(new SimpleDate("05/01/2007"),
                              TypedCashflow.CREDIT, 100.00),
            new TypedCashflow(new SimpleDate("11/01/2007"),
                              TypedCashflow.CREDIT, 500.00),
            new TypedCashflow(new SimpleDate("07/01/2007"),
                              TypedCashflow.DEBIT, 800.00),
            new TypedCashflow(new SimpleDate("02/01/2007"),
                              TypedCashflow.DEBIT, 400.00),
        };
        
        new RuleRunner().runRules( new String[] { "Example5.drl" },
                                   cashflows );
    }
}</programlisting>
    </example>

    <para>Here, we simply create a set of <code>Cashflow</code> objects
    which are either credit or debit operations. We supply them and
    <filename>Example5.drl</filename> to the RuleEngine. </para>

    <para>Now, letâ€™s look at a rule printing the sorted
    <code>Cashflow</code> objects.</para>

    <example>
      <title>Banking Tutorial: Rule in Example5.drl</title>

      <programlisting>rule "Rule 05"  
    when
        $cashflow : TypedCashflow( $date : date,
                                   $amount : amount,
                                   type == TypedCashflow.CREDIT )
        not TypedCashflow( date &lt; $date,
                           type == TypedCashflow.CREDIT )
    then
        System.out.println("Credit: "+$date+" :: "+$amount);   
        retract($cashflow);
end</programlisting>
    </example>

    <para>Here, we identify a <code>Cashflow</code> fact with a type
    of <code>CREDIT</code> and extract the date and the amount. In the
    second line of the rule we ensure that there is no <code>Cashflow</code>
    of the same type with an earlier date than the one found. In the
    consequence, we print the cashflow satisfying the patterns and then
    retract it, making way for the next earliest cashflow of type
    <code>CREDIT</code>.</para>

    <para>So, the output we generate is</para>

    <example>
      <title>Banking Tutorial: Output of Example5.java</title>

      <screen>Loading file: Example5.drl
Inserting fact: TypedCashflow[date=Mon Jan 01 00:00:00 GMT 2007,type=Credit,amount=300.0]
Inserting fact: TypedCashflow[date=Fri Jan 05 00:00:00 GMT 2007,type=Credit,amount=100.0]
Inserting fact: TypedCashflow[date=Thu Jan 11 00:00:00 GMT 2007,type=Credit,amount=500.0]
Inserting fact: TypedCashflow[date=Sun Jan 07 00:00:00 GMT 2007,type=Debit,amount=800.0]
Inserting fact: TypedCashflow[date=Tue Jan 02 00:00:00 GMT 2007,type=Debit,amount=400.0]
Credit: Mon Jan 01 00:00:00 GMT 2007 :: 300.0
Credit: Fri Jan 05 00:00:00 GMT 2007 :: 100.0
Credit: Thu Jan 11 00:00:00 GMT 2007 :: 500.0
</screen>
    </example>

    <para>Continuing our banking exercise, we are now going to process both
    credits and debits on two bank accounts, calculating the account balance.
    In order to do this, we create two separate <code>Account</code> objects
    and inject them into the <code>Cashflows</code> objects before passing
    them to the Rule Engine. The reason for this is to provide easy access
    to the correct account without having to resort to helper classes. Letâ€™s
    take a look at the <code>Account</code> class first. This is a simple
    Java object with an account number and balance:</para>

    <example>
      <title>Banking Tutorial: Class Account</title>

      <programlisting language="java">public class Account {
    private long   accountNo;
    private double balance = 0;

    public Account() {
    }

    public Account(long accountNo) {
        this.accountNo = accountNo;
    }

    public long getAccountNo() {
        return accountNo;
    }

    public void setAccountNo(long accountNo) {
        this.accountNo = accountNo;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public String toString() {
        return "Account[" + "accountNo=" + accountNo + ",balance=" + balance + "]";
    }
}</programlisting>
    </example>

    <para>Now letâ€™s extend our <code>TypedCashflow</code>, resulting in
    <code>AllocatedCashflow</code>, to include an <code>Account</code>
    reference.</para>

    <example>
      <title>Banking Tutorial: Class AllocatedCashflow</title>

      <programlisting language="java">public class AllocatedCashflow extends TypedCashflow {
    private Account account;

    public AllocatedCashflow() {
    }

    public AllocatedCashflow(Account account, Date date, int type, double amount) {
        super( date, type, amount );
        this.account = account;
    }

    public Account getAccount() {
        return account;
    }

    public void setAccount(Account account) {
        this.account = account;
    }

    public String toString() {
        return "AllocatedCashflow[" +
               "account=" + account +
               ",date=" + getDate() + 
               ",type=" + (getType() == CREDIT ? "Credit" : "Debit") + 
               ",amount=" + getAmount() + "]";
    }
}</programlisting>
    </example>

    <para>The Java code of <filename>Example5.java</filename> creates 
    two <code>Account</code> objects and passes one of them into each
    cashflow, in the constructor call.</para>

    <example>
      <title>Banking Tutorial: Example5.java</title>

      <programlisting language="java">public class Example6 {
    public static void main(String[] args) throws Exception {      
        Account acc1 = new Account(1);
        Account acc2 = new Account(2);
           
        Object[] cashflows = {
            new AllocatedCashflow(acc1,new SimpleDate("01/01/2007"),
                                  TypedCashflow.CREDIT, 300.00),
            new AllocatedCashflow(acc1,new SimpleDate("05/02/2007"),
                                  TypedCashflow.CREDIT, 100.00),
            new AllocatedCashflow(acc2,new SimpleDate("11/03/2007"),
                                  TypedCashflow.CREDIT, 500.00),
            new AllocatedCashflow(acc1,new SimpleDate("07/02/2007"),
                                  TypedCashflow.DEBIT,  800.00),
            new AllocatedCashflow(acc2,new SimpleDate("02/03/2007"),
                                  TypedCashflow.DEBIT,  400.00),
            new AllocatedCashflow(acc1,new SimpleDate("01/04/2007"),    
                                  TypedCashflow.CREDIT, 200.00),
            new AllocatedCashflow(acc1,new SimpleDate("05/04/2007"),
                                  TypedCashflow.CREDIT, 300.00),
            new AllocatedCashflow(acc2,new SimpleDate("11/05/2007"),
                                  TypedCashflow.CREDIT, 700.00),
            new AllocatedCashflow(acc1,new SimpleDate("07/05/2007"),
                                  TypedCashflow.DEBIT,  900.00),
            new AllocatedCashflow(acc2,new SimpleDate("02/05/2007"),
                                  TypedCashflow.DEBIT,  100.00)           
        };
        
        new RuleRunner().runRules( new String[] { "Example6.drl" },
                                   cashflows );
    }
}</programlisting>
    </example>

    <para>Now, letâ€™s look at the rule in <filename>Example6.drl</filename>
    to see how we apply each cashflow in date order and calculate and print
    the balance. </para>

    <example>
      <title>Banking Tutorial: Rule in Example6.drl</title>

      <programlisting>rule "Rule 06 - Credit"  
    when
        $cashflow : AllocatedCashflow( $account : account,
                                       $date : date,
                                       $amount : amount,
                                       type == TypedCashflow.CREDIT )
        not AllocatedCashflow( account == $account, date &lt; $date)
    then
        System.out.println("Credit: " + $date + " :: " + $amount);     
        $account.setBalance($account.getBalance()+$amount);
        System.out.println("Account: " + $account.getAccountNo() +
                           " - new balance: " + $account.getBalance());          
        retract($cashflow);
end

rule "Rule 06 - Debit"  
    when
        $cashflow : AllocatedCashflow( $account : account,
                            $date : date,
                            $amount : amount,
                            type == TypedCashflow.DEBIT )
        not AllocatedCashflow( account == $account, date &lt; $date)
    then
        System.out.println("Debit: " + $date + " :: " + $amount);      
        $account.setBalance($account.getBalance() - $amount);
        System.out.println("Account: " + $account.getAccountNo() +
                           " - new balance: " + $account.getBalance());           
        retract($cashflow);
end</programlisting>
    </example>

    <para>Although we have separate rules for credits and debits, but we do
    not specify a type when checking for earlier cashflows. This is so that
    all cashflows are applied in date order, regardless of the cashflow type.
    In the conditions we identify the account to work with, and in the
    consequences we update it with the cashflow amount.</para>

    <example>
      <title>Banking Tutorial: Output of Example6.java</title>

      <programlisting>Loading file: Example6.drl
Inserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Mon Jan 01 00:00:00 GMT 2007,type=Credit,amount=300.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Mon Feb 05 00:00:00 GMT 2007,type=Credit,amount=100.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=2,balance=0.0],date=Sun Mar 11 00:00:00 GMT 2007,type=Credit,amount=500.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Wed Feb 07 00:00:00 GMT 2007,type=Debit,amount=800.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=2,balance=0.0],date=Fri Mar 02 00:00:00 GMT 2007,type=Debit,amount=400.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Sun Apr 01 00:00:00 BST 2007,type=Credit,amount=200.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Thu Apr 05 00:00:00 BST 2007,type=Credit,amount=300.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=2,balance=0.0],date=Fri May 11 00:00:00 BST 2007,type=Credit,amount=700.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Mon May 07 00:00:00 BST 2007,type=Debit,amount=900.0]
Inserting fact: AllocatedCashflow[account=Account[accountNo=2,balance=0.0],date=Wed May 02 00:00:00 BST 2007,type=Debit,amount=100.0]
Debit: Fri Mar 02 00:00:00 GMT 2007 :: 400.0
Account: 2 - new balance: -400.0
Credit: Sun Mar 11 00:00:00 GMT 2007 :: 500.0
Account: 2 - new balance: 100.0
Debit: Wed May 02 00:00:00 BST 2007 :: 100.0
Account: 2 - new balance: 0.0
Credit: Fri May 11 00:00:00 BST 2007 :: 700.0
Account: 2 - new balance: 700.0
Credit: Mon Jan 01 00:00:00 GMT 2007 :: 300.0
Account: 1 - new balance: 300.0
Credit: Mon Feb 05 00:00:00 GMT 2007 :: 100.0
Account: 1 - new balance: 400.0
Debit: Wed Feb 07 00:00:00 GMT 2007 :: 800.0
Account: 1 - new balance: -400.0
Credit: Sun Apr 01 00:00:00 BST 2007 :: 200.0
Account: 1 - new balance: -200.0
Credit: Thu Apr 05 00:00:00 BST 2007 :: 300.0
Account: 1 - new balance: 100.0
Debit: Mon May 07 00:00:00 BST 2007 :: 900.0
Account: 1 - new balance: -800.0
</programlisting>
    </example>
    
  </section>
