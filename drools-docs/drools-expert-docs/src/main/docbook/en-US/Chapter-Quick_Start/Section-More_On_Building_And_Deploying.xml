<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>More on building and deploying</title>

  <section>
    <title>Knowledge Base by Configuration Using Changesets</title>

    <para>So far, the programmatic API has been used to build a Knowledge
    Base. Quite often it's more desirable to do this via configuration. To
    facilitate this, Drools supports the "Changeset" feature. The file
    <filename>changeset.xml</filename> contains a list of resources, and it
    may also point recursively to another changeset XML file. Currently there is 
    no XML schema for the changeset XML, but we hope to add one soon.
    A few examples will be shown to give you the gist of things. A resource
    approach is employed that uses a prefix to indicate the protocol. All the
    protocols provided by <code>java.net.URL</code>, such as "file" and "http",
    are supported, as well as an additional "classpath".
    Currently the type attribute must always be specified for a resource, as
    it is not inferred from the file name extension. Here is a simple example
    that points to a http location for some rules.</para>

    <programlisting language="xml">&lt;change-set xmlns='http://drools.org/drools-5.0/change-set'
             xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
             xs:schemaLocation='http://drools.org/drools-5.0/change-set http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' &gt;
   &lt;add&gt;
       &lt;resource source='http:org/domain/myrules.drl' type='DRL' /&gt;
   &lt;/add&gt;
 &lt;/change-set&gt;
</programlisting>

    <para>To use the above XML, the code is almost identical as before, except
    we change the resource type to <code>CHANGE_SET</code>.</para>

    <programlisting language="java">KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
kbuilder.add( ResourceFactory.newClasspathResource( "myChangeSet.xml", getClass() ),
              ResourceType.CHANGE_SET );
if ( kbuilder.hasErrors() ) {
    System.err.println( builder.getErrors().toString() );
}</programlisting>

    <para>Changesets can include any number of resources, and they even
    support additional configuration information, which currently is only
    needed for decision tables. The example below is expanded to load the
    rules from a http URL location, and an Excel decision table from the
    classpath.</para>

    <programlisting language="xml">&lt;change-set xmlns='http://drools.org/drools-5.0/change-set'
             xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
             xs:schemaLocation='http://drools.org/drools-5.0/change-set.xsd http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' &gt;
   &lt;add&gt;
       &lt;resource source='http:org/domain/myrules.drl' type='DRL' /&gt;
       &lt;resource source='classpath:data/IntegrationExampleTest.xls' type="DTABLE"&gt;
           &lt;decisiontable-conf input-type="XLS" worksheet-name="Tables_2" /&gt;
       &lt;/resource&gt;
   &lt;/add&gt;
 &lt;/change-set&gt;
</programlisting>

    <para>It is also possible to specify a directory, to add the contents of
    that directory. It is expected that all the files are of the specified
    type, since type is not yet inferred from the file name extensions.</para>

    <programlisting language="xml">&lt;change-set xmlns='http://drools.org/drools-5.0/change-set'
             xmlns:xs='http://www.w3.org/2001/XMLSchema-instance'
             xs:schemaLocation='http://drools.org/drools-5.0/change-set.xsd http://anonsvn.jboss.org/repos/labs/labs/jbossrules/trunk/drools-api/src/main/resources/change-set-1.0.0.xsd' &gt;
   &lt;add&gt;
       &lt;resource source='file://myfolder/' type='DRL' /&gt;
   &lt;/add&gt;
 &lt;/change-set&gt;
</programlisting>
  </section>

  <section>
    <title>Knowledge Agent</title>

    <para>The Knowlege Agent provides automatic loading, caching and
    re-loading of resources and is configured from a properties files. The
    Knowledge Agent can update or rebuild this Knowlege Base as the resources
    it uses are changed. The strategy for this is determined by the
    configuration given to the factory, but it is typically pull-based using
    regular polling. We hope to add push-based updates and rebuilds in future
    versions.</para>

    <programlisting language="java">KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent( "MyAgent" );
kagent.applyChangeSet( ResourceFactory.newUrlResource( url ) );
KnowledgeBase kbase = kagent.getKnowledgeBase();</programlisting>

    <para>A <code>KnowledgeAgent</code> object will continuously scan all the
    added resources, using a default polling interval of 60 seconds and, when
    some last modification date is updated, it will applied the changes into the
    cached Knowledge Base using the new resources. Note that the previous
    <code>KnowledgeBase</code> reference will still exist and you'll have to
    call <code>getKnowledgeBase()</code> to access the newly built
    <code>KnowledgeBase</code>. If a directory is specified as part of the
    change set, the entire contents of that directory will be scanned for
    changes. The way modifications are applied depends on
    <code>drools.agent.newInstance</code> property present in the
    KnowledgeAgentConfiguration object passed to the agent.
    </para>

    <para>For polling to occur, the polling and notifier services must be started:</para>
<programlisting language="java">ResourceFactory.getResourceChangeNotifierService().start();
ResourceFactory.getResourceChangeScannerService().start();</programlisting>


    <section>
      <title>Knowledge Agent and Custom ClassLoaders</title>
      <para>Because Knowledge Agent could scan and process remote resources, it
      could ends up failing when compiling or executing rules, queries, functions,
      etc. that use classes outside the agent's classloader.
      If this is your case, you could take 2 approach: use a custom classloader
      for agent's kbuilder or force the agent to use the same classloader that
      its kbase has.</para>
      <section>
      <title>Custom ClassLoaders from KnowledgeBuilder</title>
        <para>Knowledge Agent uses KnowledgeBuilder internally in order to
        compile managed resources. If you need to pass custom configuration to
        these compilers you could pass a KnowledgeBuilderConfiguration object
        to KnowledgeAgentFactory.newKnowledgeAgent(). This object will be used
        in every builder the agent creates. Using a KnowledgeBuilderConfiguration
        you can specify a custom classloader.</para>
        <important>
            <para>The usage of a KnowledgeBuilder to specify the CL the agent
            must use is discouraged. See the next section for the best solution
            to this problem.</para>
        </important>
        <warning>
            <para>If the agent is handling binary resources (packages), then
            using a KnowledgeBuilder to specify the CL that must be used will
            not work. In this case the only solution is to pass a kbase that 
            uses the custom CL. See next section for more details.</para>
        </warning>
      </section>
      <section>
      <title>Reuse KnowledgeBase ClassLoader</title>
        <para>Most of the times, the classloader you wan't to use in the
        compilation process of remote resources is the same needed in the
        agent's kbase, so the rules could be executed. If you want to use this
        approach, you will need to setup the desired ClassLoader to the
        agen't kbase and use the "drools.agent.useKBaseClassLoaderForCompiling"
        property of KnowledgeAgentConfiguration object.</para>
        <para>This approach lets you modify agent's kbuilder classloader in
        runtime by modifying the classloader the agent's kbase uses. This will
        serve also when not using incremental change set processing (see the
        section below). When the kbase is recreated its configuration is
        reused, so the classloader is maintained.</para>
<programlisting language="java">KnowledgeBaseConfiguration kbaseConfig =
    KnowledgeBaseFactory.newKnowledgeBaseConfiguration(null, customClassLoader);
KnowledgeBase kbase =
    KnowledgeBaseFactory.newKnowledgeBase(kbaseConfig); //kbase with custom classloader
KnowledgeAgentConfiguration aconf =
    KnowledgeAgentFactory.newKnowledgeAgentConfiguration();
aconf.setProperty("drools.agent.newInstance", "false"); //incremental change set processing enabled
aconf.setProperty("drools.agent.useKBaseClassLoaderForCompiling", "true");
KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent(
                "test agent", kbase, aconf);</programlisting>
      </section>
    </section>

    <section>
      <title>Incremental Change Set Processing</title>
        <para>
            Knowledge Agent can process change sets in two different ways:
            recreating the knowledge base every time a new change set is
            processed or applying the change set in the cached knowledge base
            without destroying it.
            This behavior is controlled by the "newInstance" property of the
            KnowledgeAgentConfiguration object passed to the Agent's constructor.
        </para>
        <para>
            When "newInstace" is set to true (the default value), the agent
            will destroy the cached Knowledge Base it contains and populate a
            new one containing the change set modifications. When "newInstance"
            is set to "false" change sets are applied directly to the cached
            Knowledge Base. The rule that were not modified in the change sets'
            resources are not replaced in the Knowledge Base, the modified or
            deleted rules are modified or deleted from the cached Knowledge Base.
            Functions, Queries and Definition Types are always replaced in the
            cached Knowledge Base whether they are modified or not.
        </para>
        <para>
            The following code snippet creates a new Knowledge Agent with its
            "newInstace" property set to false
        </para>
            <programlisting language="java">KnowledgeAgentConfiguration aconf = KnowledgeAgentFactory.newKnowledgeAgentConfiguration();
aconf.setProperty("drools.agent.newInstance", "false");
KnowledgeAgent kagent = KnowledgeAgentFactory.newKnowledgeAgent("test agent", null, aconf);
            </programlisting>
    </section>

    <section>
      <title>Remote HTTP resource caching</title>
      <para>A note on remote HTTP Url Resources: if your knowledge agent is
    "pulling" resources from a http(s) URL, then you might rightly be
    concerned if that resource (remote web server) suddenly disappears. To
    survive a restart when a resource is no longer available remotely (eg the
    remote server is being restarted) then you can set a System Property:
    drools.resource.urlcache to a directory that has write permissions for the
    application: the Knowledge Agent will cache copies of the remote resources
    in that local directory. </para>

    <para>For example, using the java command line:
    -Ddrools.resource.urlcache=/users/someone/KnowledgeCache - will keep local
    copies of the resources (rules, packages etc) in that directory, for the
    agent to use should it be restarted (when a remote resource becomes
    available, and is updated, it will automatically update the local cache
    copy). </para>

    </section>
  </section>
</section>
