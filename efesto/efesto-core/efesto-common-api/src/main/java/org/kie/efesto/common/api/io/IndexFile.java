/*
 * Copyright 2022 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kie.efesto.common.api.io;

import org.drools.util.PortablePath;
import org.kie.efesto.common.api.exceptions.KieEfestoCommonException;

import java.io.File;


/**
 * This specific <code>File</code> is meant to contain the index of the classes generated by a <b>compilation-plugin</b>
 */
public final class IndexFile extends File {

    public static final String INDEX_FILE = "IndexFile";
    public static final String FINAL_SUFFIX = "_json";

    static String getIndexFileName(String modelType) {
        return PortablePath.of(String.format("%s.%s%s", INDEX_FILE, modelType, FINAL_SUFFIX)).asString();
    }

    static PortablePath validatePathName(PortablePath toValidate) {
        String fileName = toValidate.getFileName();
        if (!fileName.endsWith(FINAL_SUFFIX)) {
            throw new KieEfestoCommonException("Wrong file name " + fileName);
        }
        String model = getModel(toValidate);
        if (model.isEmpty()) {
            throw new KieEfestoCommonException("Wrong file name " + fileName);
        }
        return toValidate;
    }

    static String getModel(PortablePath file) {
        return file.getSuffix().replace(FINAL_SUFFIX, "");
    }

    public IndexFile(String modelType) {
        super(validatePathName(PortablePath.of(getIndexFileName(modelType))).asString());
    }

    public IndexFile(String parent, String modelType) {
        super(parent, validatePathName(PortablePath.of(getIndexFileName(modelType))).asString());
    }

    public IndexFile(File existingFile) {
        super(existingFile.toURI());
    }

    public String getModel() {
        return getModel(PortablePath.of(this.getName()));
    }
}
