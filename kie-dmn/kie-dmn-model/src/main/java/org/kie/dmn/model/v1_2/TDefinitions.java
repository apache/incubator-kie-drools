//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.08.06 at 04:40:00 PM CEST 
//


package org.kie.dmn.model.v1_2;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.kie.dmn.model.v1x.Artifact;
import org.kie.dmn.model.v1x.BusinessContextElement;
import org.kie.dmn.model.v1x.DRGElement;
import org.kie.dmn.model.v1x.DecisionService;
import org.kie.dmn.model.v1x.Definitions;
import org.kie.dmn.model.v1x.ElementCollection;
import org.kie.dmn.model.v1x.Import;
import org.kie.dmn.model.v1x.ItemDefinition;
import org.kie.dmn.model.v1x.dmndi.DMNDI;


public class TDefinitions extends TNamedElement implements Definitions {

    public static final String DEFAULT_EXPRESSION_LANGUAGE = "http://www.omg.org/spec/DMN/20180521/FEEL/";

    public static final String DEFAULT_TYPE_LANGUAGE = "http://www.omg.org/spec/DMN/20180521/FEEL/";

    protected List<Import> _import;
    protected List<ItemDefinition> itemDefinition;
    protected List<DRGElement> drgElement;
    protected List<Artifact> artifact;
    protected List<ElementCollection> elementCollection;
    protected List<BusinessContextElement> businessContextElement;
    protected DMNDI dmndi;
    protected String expressionLanguage;
    protected String typeLanguage;
    protected String namespace;
    protected String exporter;
    protected String exporterVersion;

    @Override
    public List<Import> getImport() {
        if (_import == null) {
            _import = new ArrayList<Import>();
        }
        return this._import;
    }

    @Override
    public List<ItemDefinition> getItemDefinition() {
        if (itemDefinition == null) {
            itemDefinition = new ArrayList<ItemDefinition>();
        }
        return this.itemDefinition;
    }

    @Override
    public List<DRGElement> getDrgElement() {
        if (drgElement == null) {
            drgElement = new ArrayList<DRGElement>();
        }
        return this.drgElement;
    }

    @Override
    public List<Artifact> getArtifact() {
        if (artifact == null) {
            artifact = new ArrayList<Artifact>();
        }
        return this.artifact;
    }

    @Override
    public List<ElementCollection> getElementCollection() {
        if (elementCollection == null) {
            elementCollection = new ArrayList<ElementCollection>();
        }
        return this.elementCollection;
    }

    @Override
    public List<BusinessContextElement> getBusinessContextElement() {
        if (businessContextElement == null) {
            businessContextElement = new ArrayList<BusinessContextElement>();
        }
        return this.businessContextElement;
    }

    @Override
    public DMNDI getDMNDI() {
        return dmndi;
    }

    @Override
    public void setDMNDI(DMNDI value) {
        this.dmndi = value;
    }

    @Override
    public String getExpressionLanguage() {
        if (expressionLanguage == null) {
            return DEFAULT_EXPRESSION_LANGUAGE;
        } else {
            return expressionLanguage;
        }
    }

    @Override
    public String getTypeLanguage() {
        if (typeLanguage == null) {
            return DEFAULT_TYPE_LANGUAGE;
        } else {
            return typeLanguage;
        }
    }

    @Override
    public void setExpressionLanguage(String value) {
        this.expressionLanguage = value;
    }

    @Override
    public void setTypeLanguage(String value) {
        this.typeLanguage = value;
    }

    @Override
    public String getNamespace() {
        return namespace;
    }

    @Override
    public void setNamespace(String value) {
        this.namespace = value;
    }

    @Override
    public String getExporter() {
        return exporter;
    }

    @Override
    public void setExporter(String value) {
        this.exporter = value;
    }

    @Override
    public String getExporterVersion() {
        return exporterVersion;
    }

    @Override
    public void setExporterVersion(String value) {
        this.exporterVersion = value;
    }

    /**
     * Implementing support for internal model
     */
    @Override
    public List<DecisionService> getDecisionService() {
        return drgElement.stream().filter(DecisionService.class::isInstance).map(DecisionService.class::cast).collect(Collectors.toList());
    }

}
