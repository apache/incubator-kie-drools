<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Truth Maintenance with <indexterm>
      <primary>Logical Object</primary>
    </indexterm> Logical Objects</title>

  <section>
    <title>Overview</title>

    <para>After regular inserts you have to retract facts explicitly. With
    <emphasis>logical</emphasis> assertions, the fact that was asserted will
    be automatically retracted when the conditions that asserted it in the
    first place are no longer true. Actually, it's even cleverer then that,
    because it will be retracted only if there isn't any single condition that
    supports the logical assertion.</para>

    <para>Normal insertions are said to be <emphasis>stated</emphasis>, i.e.,
    just like the intuitive meaning of "stating a fact" implies. Using a
    <code>HashMap</code> and a counter, we track how many times a particular
    equality is <emphasis>stated</emphasis>; this means we count how many
    different instances are equal.</para>

    <para>When we <emphasis>logically</emphasis> insert an object during a RHS
    execution we are said to <emphasis>justify</emphasis> it, and it is
    considered to be justified by the firing rule. For each logical insertion
    there can only be one equal object, and each subsequent equal logical
    insertion increases the justification counter for this logical assertion.
    A justification is removed by the LHS of the creating rule becoming
    untrue, and the counter is decreased accordingly. As soon as we have no
    more justifications the logical object is automatically retracted.</para>

    <para>If we try to <emphasis>logically</emphasis> insert an object when
    there is an equal <emphasis>stated</emphasis> object, this will fail and
    return null. If we <emphasis>state</emphasis> an object that has an
    existing equal object that is <emphasis>justified</emphasis> we override
    the Fact; how this override works depends on the configuration setting
    <code>WM_BEHAVIOR_PRESERVE</code>. When the property is set to discard we
    use the existing handle and replace the existing instance with the new
    Object, which is the default behavior; otherwise we override it to
    <emphasis>stated</emphasis> but we create an new
    <code>FactHandle</code>.</para>

    <para>This can be confusing on a first read, so hopefully the flow charts
    below help. When it says that it returns a new <code>FactHandle</code>,
    this also indicates the <code>Object</code> was propagated through the
    network.</para>

    <figure>
      <title>Stated Insertion</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Rule_Engine/Stated_Assertion.png"
                     format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>

    <figure>
      <title>Logical Insertion</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Rule_Engine/Logical_Assertion.png"
                     format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Bus Pass Example With Inference and TMS</title>

      <para>The previous example was issuing ID cards to over 18s, in this
      example we now issue bus passes, either a child or adult pass.</para>

      <programlisting>rule "Issue Child Bus Pass" when
    $p : Person( age &lt; 16 )
then
    insert(new ChildBusPass( $p ) );
end
 
rule "Issue Adult Bus Pass" when
    $p : Person( age &gt;= 16 )
then
    insert(new AdultBusPass( $p ) );
end</programlisting>

      <para>As before the above example is considered monolithic, leaky and
      providing poor separation of concerns.</para>

      <para>As before we can provide a more robust application with a
      separation of concerns using inference. Notice this time we don't just
      insert the inferred object, we use "insertLogical":</para>

      <programlisting>rule "Infer Child" when
    $p : Person( age &lt; 16 )
then
    insertLogical( new IsChild( $p ) )
end
rule "Infer Adult" when
    $p : Person( age &gt;= 16 )
then
    insertLogical( new IsAdult( $p ) )
end</programlisting>

      <para>An "insertLogical" is part of the Drools Truth Maintenance System
      (TMS). When a fact is logically inserted, that fact is dependant on
      the truth of the "when" clause. This means that when the rule becomes
      false the fact is automatically retracted. This works particularly well
      as the two rules are mutually exclusive. So in the above rules if the
      person is under 16 it inserts an IsChild fact, once the person is 16 or
      over the IsChild fact is automatically retracted and the IsAdult fact
      inserted.</para>

      <para>Returning to the code to issue bus passes, these two rules can 
      logically insert the ChildBusPass and AdultBusPass facts, as  the TMS 
      supports chaining of logical insertions for a cascading set of retracts.</para>

      <programlisting>rule "Issue Child Bus Pass" when
    $p : Person( )
    IsChild( person == $p )
then
    insertLogical(new ChildBusPass( $p ) );
end
 
rule "Issue Adult Bus Pass" when
    $p : Person( age &gt;= 16 )
    IsAdult( person == $p )
then
    insertLogical(new AdultBusPass( $p ) );
end</programlisting>

      <para>Now when a person ages from being 15 to 16, not only is the
      IsChild fact automatically retracted, so is that person's ChildBusPass
      fact. For bonus points we can combine this with the 'not' conditional
      element to handle notifications. In this situation, a request for the
      returning of the pass. So when the TMS automatically retracts the
      ChildBusPass object, this rule triggers and sends a request to the
      person:</para>

      <programlisting>rule "Return ChildBusPass Request "when
    $p : Person( )
    not( ChildBusPass( person == $p ) )
then
    requestChildBusPass( $p );
end</programlisting>
    </section>

    <section>
      <title>Lazy Truth Maintenance</title>

      <para>You no longer need to enable or disable truth maintenance, via the
      kbase configuration. It is now handled automatically and turned on only
      when needed. This was done along with the code changes so that all entry
      points use the same code, previous to this the default entry point and
      named entry points used different code, to avoid TMS overhead for event
      processing.</para>
    </section>

    <section>
      <title>Important note: Equality for Java objects</title>

      <para>It is important to note that for Truth Maintenance (and logical
      assertions) to work at all, your Fact objects (which may be JavaBeans)
      must override equals and hashCode methods (from java.lang.Object)
      correctly. As the truth maintenance system needs to know when two
      different physical objects are equal in value, <emphasis>both</emphasis>
      equals and hashCode must be overridden correctly, as per the Java
      standard.</para>

      <para>Two objects are equal if and only if their equals methods return
      true for each other and if their hashCode methods return the same
      values. See the Java API for more details (but do keep in mind you
      <emphasis>MUST</emphasis> override both equals and hashCode).</para>

      <para>TMS behaviour is not affected by theruntime configuration of
      Identity vs Equality, TMS is always equality.</para>
    </section>
  </section>
</section>
