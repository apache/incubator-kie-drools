/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.kie.pmml.pmml_4_2.compiler;

import org.kie.pmml.pmml_4_2.extensions.*;
import org.dmg.pmml.pmml_4_2.descr.*;
import org.kie.pmml.pmml_4_2.ModelMarker;

import java.util.*;


declare FunctionResult
    expr            : String
    father          : Apply
    fields          : Collection
    simple          : boolean       = false
    parents         : List
    index           : int
end

declare MapSupportBean
   ref : MapValues
   columns : Map
   types : Map
end



declare DataMatrix
    rows    : int
    cols    : int
    src     : Matrix
end

declare StringMatrix extends DataMatrix
    data    : String[][]
end

declare IntMatrix extends DataMatrix
    data    : Integer[][]
end

declare DoubleMatrix extends DataMatrix
    data    : Double[][]
end




query formatArray( Array $arr, String $out )
    $arr := Array( $type : type, $content : content )
    $out := String() from accumulate (
        $s : String() from utils.tokenize( $content ),
        init( String x = ""; ),
        action( x += ( "".equals(x) ? "" : ", " ) + utils.format( $type, $s ); ),
        result( x )
    )
end







query compilePredicate( java.util.List $parent, String $pred, Object $src )
    (
      $src  := SimplePredicate( this memberOf $parent, $fld := field, $op : operator, $val : value )
      and
      TypeOfField( $fld, $type ; )
      and
      $pred := String() from "( " +
                                "m" + utils.compactUpperCase( $fld ) + " == " + "isMissing".equals( $op ) +
                                 ( "isMissing".equals( $op ) ? "" :
                                        " && v" + utils.compactUpperCase( $fld ) + " " + utils.mapOperator( $op ) + " " + utils.format( $type, $val )
                                 ) +
                             " )"
    )
    or
    (
      $src  := SimpleSetPredicate( this memberOf $parent, $fld := field, $op : booleanOperator, $arr : array )
      and
      formatArray( $arr, $out ; )
      and
      $pred := String() from "( " + "m" + utils.compactUpperCase( $fld ) + " == false && " +
                                    "v" + utils.compactUpperCase( $fld ) + ( "isNotIn".equals( $op ) ? " not" : "" ) + " in ( " + $out + " ) )"
    )
    or
    ( $src  := True( this memberOf $parent ) and $pred := String() from "1 == 1" )
    or
    ( $src  := False( this memberOf $parent ) and $pred := String() from "1 == 0" )
    or
    ( (
        $src  := CompoundPredicate( this memberOf $parent, $sub : simplePredicatesAndCompoundPredicatesAndSimpleSetPredicates, booleanOperator != "surrogate")
        and
        $pred := String() from accumulate( CompoundPredicate( this == $src, $bop : booleanOperator )
                                           and
                                           compilePredicate( $sub, $p, $fld2 ; ),
                                           init( String x = "" ),
                                           action( x = "( " + $p + " )"
                                                       + ( "".equals(x) ? "" : utils.mapTreeOp( $bop ) )
                                                       + x; ),
                                           result( x )
                                         )
    ) )
    or
    ( (
        $src  := CompoundPredicate( this memberOf $parent, $sub : simplePredicatesAndCompoundPredicatesAndSimpleSetPredicates, booleanOperator == "surrogate" )
        and
        $pred := String() from accumulate( $xx := Object() from $sub
                                           and
                                           compilePredicate( $sub, $p, $xx ; )
                                           and
                                           ?compilePredicateForMissing( $sub, $m, $xx ; ),
                                           init( String x = ""; String m = "true"; boolean first = true; ),
                                           action(
                                                   x = $p
                                                       + ( first ? "" : " || "
                                                       + "( " + m + " && ( " + x + " ) )" );
                                                   m = $m;
                                                   first = false;
                                           ),
                                           result( x )
                                         )
    ) )
end



query compilePredicateForMissing( java.util.List $parent, String $pred, Object $src )
    (
      $src  := SimplePredicate( this memberOf $parent, $fld := field, $op : operator, $val : value )
      and
      $pred := String() from "( " + "m" + utils.compactUpperCase( $fld ) + " == true " + " )"
    )
    or
    (
      $src  := SimpleSetPredicate( this memberOf $parent, $fld := field )
      and
      $pred := String() from "( " + "m" + utils.compactUpperCase( $fld ) + " == true " + " )"
    )
    or
    ( $src  := True( this memberOf $parent ) and $pred := String() from "false" )
    or
    ( $src  := False( this memberOf $parent ) and $pred := String() from "false" )
//    or
//    ( $src  := CompoundPredicate( this memberOf $parent, booleanOperator == "surrogate" ) and $pred := String() from "false" )
    or
    ( (
        $src  := CompoundPredicate( this memberOf $parent, $sub : simplePredicatesAndCompoundPredicatesAndSimpleSetPredicates )
        and
        $pred := String() from accumulate( compilePredicateForMissing( $sub, $p, $fld2 ; ),
                                           init( String x = "" ),
                                           action( x = "( " + $p + " )"
                                                       + ( "".equals(x) ? "" : " || " )
                                                       + x; ),
                                           result( x )
                                         )
    ) )
end


