# Byteman Rule for 
# org.drools.compiler.kie.builder.KieModuleRepoTest.artifactMapTest

# The rules below contain out-of-date documentation in order to document
# the race conditions that would happen 
# if the KieModuleRepo methods were NOT synchronized

RULE test setup ( after initial store and updateDependencyToVersion)
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest
METHOD setArtifactMapTest
AFTER WRITE $threadsFinishedBarrier
BIND threadName = Thread.currentThread().getName();
IF TRUE
DO 
# traceln(">>>> " + threadName + ": create rendezvous's");
createRendezvous("store", 2);
flag("0")
ENDRULE

# ----
# We can't rendezvous inside the KieModuleRepo.store(KieModuleRepo) method 
# because it's synchronized and a rendezvous would cause a deadlock
# ----

RULE store: 1rst thread store 
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest$1
METHOD run()
AT INVOKE org.drools.compiler.kie.builder.impl.KieRepositoryImpl$KieModuleRepo.store(org.kie.api.builder.KieModule)
BIND threadName = Thread.currentThread().getName();
IF flag("first artifactMap check")
DO 
# traceln(">>>> " + threadName + ": rendezvous [store]");
rendezvous("store");
flag("1");
ENDRULE

RULE store: 2nd thread store
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest$2
METHOD run()
AT INVOKE org.drools.compiler.kie.builder.impl.KieRepositoryImpl$KieModuleRepo.store(org.kie.api.builder.KieModule)
AT ENTRY
BIND threadName = Thread.currentThread().getName();
IF flag("first kieModules.put")
DO 
# traceln(">>>> " + threadName + ": rendezvous [store]");
rendezvous("store");
flag("2");
ENDRULE

# --
# Check rules
# --
 
RULE check thread actions
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest
METHOD checkRules
AT ENTRY
BIND threadName = Thread.currentThread().getName();
IF NOT ( flagged("0") || flagged("1") || flagged("2") )
DO 
throw new IllegalStateException("Not all rules were activated: " 
+ flagged("1") + ", " 
+ flagged("2") );
ENDRULE