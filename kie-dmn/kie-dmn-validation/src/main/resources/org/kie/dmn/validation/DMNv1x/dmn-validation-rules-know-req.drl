/*
 * Copyright 2017 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.kie.dmn.validation.DMNv1x;

import org.kie.dmn.model.api.*;
import org.kie.dmn.api.core.DMNMessage;
import org.kie.dmn.core.impl.DMNMessageImpl;
import org.kie.dmn.core.util.MsgUtil;
import org.kie.dmn.feel.lang.types.BuiltInType;
import org.kie.dmn.feel.parser.feel11.FEELParser;
import org.kie.dmn.feel.runtime.events.SyntaxErrorEvent;
import org.kie.dmn.api.feel.runtime.events.FEELEvent;
import org.kie.dmn.core.util.Msg;

import function org.kie.dmn.validation.ValidatorUtil.rightOfHash;

global org.kie.dmn.validation.MessageReporter reporter;

rule KNOWREQ_REQ_DECISION_NOT_BKM_p1
when
  $knowReq: KnowledgeRequirement(requiredKnowledge != null,
                                 $elemRef: requiredKnowledge,
                                 requiredKnowledge.href.startsWith("#"),
                                 $targetId : rightOfHash( requiredKnowledge.href ))
  DMNElement(id == $targetId, !(this instanceof BusinessKnowledgeModel || this instanceof DecisionService))
then
  reporter.report(DMNMessage.Severity.ERROR, $elemRef, Msg.REQ_DEP_INVALID_TYPE, $targetId, $knowReq.getIdentifierString());
end

rule KNOWREQ_REQ_DECISION_NOT_BKM_p2
when
  $knowReq: KnowledgeRequirement(requiredKnowledge != null,
                                 $elemRef: requiredKnowledge,
                                 !requiredKnowledge.href.startsWith("#"),
                                 requiredKnowledge.href.contains("#"),
                                 $targetId : rightOfHash( requiredKnowledge.href ),
                                 $targetNS : leftOfHash( requiredKnowledge.href ))
  Import( $importedNS : namespace )
  $importDef : Definitions( namespace == $importedNS, namespace == $targetNS ) from entry-point "DMNImports"
  (or DMNElement( id == $targetId, !(this instanceof BusinessKnowledgeModel || this instanceof DecisionService) ) from $importDef.drgElement
      DMNElement( id == $targetId, !(this instanceof BusinessKnowledgeModel || this instanceof DecisionService) ) from $importDef.decisionService
  )
then
  reporter.report(DMNMessage.Severity.ERROR, $elemRef, Msg.REQ_DEP_INVALID_TYPE, $targetId, $knowReq.getIdentifierString());
end