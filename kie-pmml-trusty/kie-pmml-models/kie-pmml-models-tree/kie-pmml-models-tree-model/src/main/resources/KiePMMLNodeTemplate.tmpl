/*
 * Copyright 2021 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kie.pmml.models.tree.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;

import org.kie.pmml.commons.model.KiePMMLOutputField;
import org.kie.pmml.api.enums.PMML_MODEL;
import org.kie.pmml.models.tree.model.KiePMMLNode;



public class KiePMMLNodeTemplate extends KiePMMLNode {

    public KiePMMLNodeTemplate() {
        super(name, Collections.emptyList());
    }

    public static Object evaluateNode(final Map<String, Object> requestData) {
            final List<Function<Map<String, Object>, Object>> nodeFunctions = null;
            final Object score = null;
            final Function<Map<String, Object>, Boolean> predicateFunction = KiePMMLNodeTemplate::evaluatePredicate;
            if (!predicateFunction.apply(requestData)) {
                return null;
            }
            if (nodeFunctions.isEmpty()) {
                return score;
            }
            Optional<Object> nestedScore = KiePMMLNode.getNestedScore(nodeFunctions, requestData);
            return nestedScore.orElse(score);
    }

    private static boolean evaluatePredicate(java.util.Map<String, Object> stringObjectMap) {
         // Populated by code-gen
    }


}
