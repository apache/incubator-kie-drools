/'
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
'/
@startuml
participant DMNAssemblerService
DMNAssemblerService -> DMNMarshaller : unmarshal(Reader)
DMNMarshaller -> DMNAssemblerService: Definitions
DMNAssemblerService -> DMNCompilerImpl: compile(Definitions, Resource, Collection<DMNModel> || Resource, Collection<DMNModel>)
DMNCompilerImpl -> DMNMarshaller : unmarshal(Resource.getReader())
DMNMarshaller -> DMNCompilerImpl: Definitions
DMNCompilerImpl -> DMNCompilerImpl: new DMNModelImpl
loop every ItemDefinition in Definitions.getItemDefinition
DMNCompilerImpl -> DMNCompilerImpl: new ItemDefNodeImpl
DMNCompilerImpl -> DMNModelImpl: addItemDefinition(ItemDefNodeImpl)
end
loop every DRGElement in Definitions.getDrgElement
DMNCompilerImpl -> DRGElementCompiler: compileNode(DRGElement, DMNCompilerImpl, DMNModel)
DRGElementCompiler -> FEELImpl: compile(String, CompilerContext)
FEELImpl -> ProcessedExpression: new
ProcessedExpression -> FEEL_1_1Parser: compilation_unit
FEEL_1_1Parser -> ProcessedExpression: ParseTree
ProcessedExpression -> ParseTree: accept(ASTBuilderVisitor)
ParseTree -> ProcessedExpression: BaseNode
FEELImpl -> ProcessedExpression: asCompiledFEELExpression
ProcessedExpression -> FEELImpl: InterpretedExecutableExpression || CompiledExecutableExpression
FEELImpl -> DRGElementCompiler: DMNExpressionEvaluator
DRGElementCompiler -> DRGElement: setEvaluator(DMNExpressionEvaluator)
end
DMNCompilerImpl -> DMNAssemblerService: DMNModel
@enduml