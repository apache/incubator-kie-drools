/*
 * Copyright 2021 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kie.pmml.models.scorecard.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.kie.pmml.commons.model.KiePMMLOutputField;
import org.kie.pmml.api.enums.PMML_MODEL;
import org.kie.pmml.models.scorecard.model.KiePMMLCharacteristic;
import org.kie.pmml.models.scorecard.model.KiePMMLCharacteristics;

public class KiePMMLCharacteristicsTemplate extends KiePMMLCharacteristics {

    public KiePMMLCharacteristicsTemplate() {
        super(name);
    }

    public static Number evaluateCharacteristics(final Map<String, Object> requestData, final Map<String, Object> outputFieldsMap) {
        final Number initialScore = null;
        final List<BiFunction<Map<String, Object>, Map<String, Object>, Number>> characteristicFunctions = null;
        if (characteristicFunctions.isEmpty()) {
            return null;
        }
        Optional<Number> characteristicScore = KiePMMLCharacteristics.getCharacteristicsScore(characteristicFunctions, requestData, outputFieldsMap, initialScore);
        return characteristicScore.orElse(null);
    }


}
