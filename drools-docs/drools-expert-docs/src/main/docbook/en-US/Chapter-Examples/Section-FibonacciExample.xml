<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
    <title>Fibonacci Example</title>

    <screen><emphasis role="bold">Name:</emphasis> Fibonacci 
<emphasis role="bold">Main class:</emphasis> org.drools.examples.fibonacci.FibonacciExample
<emphasis role="bold">Module:</emphasis> drools-examples
<emphasis role="bold">Type:</emphasis> Java application
<emphasis role="bold">Rules file:</emphasis> Fibonacci.drl
<emphasis role="bold">Objective:</emphasis> Demonstrates Recursion,
  the CE <literal>not</literal> and cross product matching</screen>

    <para>The Fibonacci Numbers (see <ulink url="http://en.wikipedia.org/wiki/Fibonacci_number">http://en.wikipedia.org/wiki/Fibonacci_number</ulink>)
    discovered by Leonardo of Pisa (see <ulink url="http://en.wikipedia.org/wiki/Fibonacci">http://en.wikipedia.org/wiki/Fibonacci</ulink>) is a sequence 
    that starts with 0 and 1. The next Fibonacci number is obtained by adding
    the two preceding Fibonacci numbers. The Fibonacci sequence begins with
    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,
    2584, 4181, 6765, 10946,... The Fibonacci Example demonstrates recursion
    and conflict resolution with salience values.</para>

    <para>The single fact class <code>Fibonacci</code> is used in this
    example. It has two fields, sequence and value. The sequence field
    is used to indicate the position of the object in the Fibonacci
    number sequence. The value field shows the value of that
    Fibonacci object for that sequence position, using -1 to indicate
    a value that still needs to be computed.</para>

    <example>
      <title>Fibonacci Class</title>

      <programlisting language="java">public static class Fibonacci {
    private int  sequence;
    private long value;

    public Fibonacci( final int sequence ) {
        this.sequence = sequence;
        this.value = -1;
    }

    ... setters and getters go here...
}</programlisting>
    </example>

    <para>Execute the example:</para>

    <orderedlist>
      <listitem>
        <para>Open the class <classname>org.drools.examples.fibonacci.FibonacciExample</classname> in your Eclipse IDE.</para>
      </listitem>

      <listitem>
        <para>Right-click the class and select "Run as..." and then
        "Java application"</para>
      </listitem>
    </orderedlist>
    
    <para>Eclipse shows the following output in its console window (with
    "...snip..." indicating lines that were removed to save space):</para>

    <example>
      <title>Fibonacci Example: Console Output</title>

      <programlisting>recurse for 50
recurse for 49
recurse for 48
recurse for 47
...snip...
recurse for 5
recurse for 4
recurse for 3
recurse for 2
1 == 1
2 == 1
3 == 2
4 == 3
5 == 5
6 == 8
...snip...
47 == 2971215073
48 == 4807526976
49 == 7778742049
50 == 12586269025
</programlisting>
    </example>

    <para>To kick this off from Java we only insert a single Fibonacci
    object, with a sequence field of 50. A recursive rule is then used
    to insert the other 49 <code>Fibonacci</code> objects. This example
    doesn't use
    <code>PropertyChangeSupport</code>. It uses the MVEL dialect, which
    means we can use the <literal>modify</literal> keyword, which allows a block
    setter action which also notifies the engine of changes.</para>

    <example>
      <title>Fibonacci Example: Execution</title>

      <programlisting language="java">ksession.insert( new Fibonacci( 50 ) );
ksession.fireAllRules();</programlisting>
    </example>

    <para>The rule Recurse is very simple. It matches each asserted
    <code>Fibonacci</code> object with a value of -1, creating and 
    asserting a new <code>Fibonacci</code> object with a sequence of
    one less than the currently matched object. Each time a Fibonacci
    object is added while the one with a sequence field equal to 1
    does not exist, the rule re-matches and fires again. The
    <literal>not</literal> conditional element is used to stop the rule's matching
    once we have all 50 Fibonacci objects in memory. The rule also has a
    salience value, because we need to have all 50 <code>Fibonacci</code>
    objects asserted before we execute the Bootstrap rule.</para>

    <example>
      <title>Fibonacci Example: Rule "Recurse"</title>

      <programlisting>rule Recurse
    salience 10
    when
        f : Fibonacci ( value == -1 )
        not ( Fibonacci ( sequence == 1 ) )
    then
        insert( new Fibonacci( f.sequence - 1 ) );
        System.out.println( "recurse for " + f.sequence );
end</programlisting>
    </example>

    <para>The Audit view shows the original assertion of the
    <code>Fibonacci</code> object with a sequence field of 50, done from
    Java code. From there on, the Audit view shows the continual
    recursion of the rule, where each asserted <code>Fibonacci</code>
    object causes the Recurse rule to become activated and to fire again.</para>

    <figure>
      <title>Fibonacci Example: "Recurse" Audit View 1</title>

      <mediaobject>
        <imageobject>
          <imagedata width="100%"
                     fileref="images/Chapter-Examples/FibonacciExample/fibonacci1.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>When a <code>Fibonacci</code> object with a sequence field of 2 is
    asserted the "Bootstrap" rule is matched and activated along with the
    "Recurse" rule. Note the multi-restriction on field
    <code>sequence</code>, testing for equality with 1 or 2.</para>

    <example>
      <title>Fibonacci Example: Rule "Bootstrap"</title>

      <programlisting>rule Bootstrap
    when
        f : Fibonacci( sequence == 1 || == 2, value == -1 ) // multi-restriction
    then 
        modify ( f ){ value = 1 };
        System.out.println( f.sequence + " == " + f.value );
end</programlisting>
    </example>

    <para>At this point the Agenda looks as shown below. However,
    the "Bootstrap" rule does not fire because the "Recurse" rule has a higher
    salience.</para>

    <figure>
      <title>Fibonacci Example: "Recurse" Agenda View 1</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Examples/FibonacciExample/fibonacci_agenda1.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>When a <code>Fibonacci</code> object with a sequence of 1 is
    asserted the Bootstrap rule is matched again, causing two activations
    for this rule. Note that the "Recurse" rule does not match and activate
    because the <literal>not</literal> conditional element stops the rule's matching
    as soon as a <code>Fibonacci</code> object with a sequence of 1
    exists.</para>

    <figure>
      <title>Fibonacci Example: "Recurse" Agenda View 2</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Examples/FibonacciExample/fibonacci_agenda2.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Once we have two <code>Fibonacci</code> objects with values
    not equal to -1 the "Calculate" rule is able to match. It was
    the "Bootstrap" rule that set the objects with sequence 1 and 2 to
    values of 1. At this point we have 50 Fibonacci objects in the Working
    Memory. Now we need to select a suitable triple to calculate each
    of their values in turn. Using three Fibonacci patterns in a rule without
    field constraints to confine the possible cross products would result
    in 50x49x48 possible combinations, leading to about 125,000 possible rule
    firings, most of them incorrect. The "Calculate" rule uses field
    constraints to correctly constraint the thee Fibonacci patterns in the
    correct order; this
    technique is called <emphasis>cross product matching</emphasis>. The
    first pattern finds any Fibonacci with a value != -1 and binds both
    the pattern and the field.  The second Fibonacci does this, too, but
    it adds an additional field constraint to ensure that its sequence is
    greater by one than the Fibonacci bound to <code>f1</code>. When this
    rule fires for the first time, we know that only sequences 1 and 2
    have values of 1, and the two constraints ensure that <code>f1</code>
    references sequence 1 and <code>f2</code> references sequence 2. The
    final pattern finds the Fibonacci with a value equal to -1 and with a
    sequence one greater than <code>f2</code>. At this point, we have
    three <code>Fibonacci</code> objects correctly selected from the
    available cross products, and we can calculate the value for the
    third <code>Fibonacci</code> object that's bound to <code>f3</code>.</para>

    <example>
      <title>Fibonacci Example: Rule "Calculate"</title>

      <programlisting>rule Calculate
    when
        // Bind f1 and s1
        f1 : Fibonacci( s1 : sequence, value != -1 )
        // Bind f2 and v2; refer to bound variable s1
        f2 : Fibonacci( sequence == (s1 + 1), v2 : value != -1 )
        // Bind f3 and s3; alternative reference of f2.sequence
        f3 : Fibonacci( s3 : sequence == (f2.sequence + 1 ), value == -1 )      
    then
        // Note the various referencing rechniques.
        modify ( f3 ) { value = f1.value + v2 };
        System.out.println( s3 + " == " + f3.value );
end 
</programlisting>
    </example>

    <para>The <literal>modify</literal> statement updated the value of the
    <code>Fibonacci</code> object bound to <code>f3</code>. This means
    we now have another new Fibonacci object with a value not equal to -1,
    which allows the "Calculate" rule to rematch and calculate the next
    Fibonacci number. The Audit view below shows how the firing of the
    last "Bootstrap" modifies the <code>Fibonacci</code> object,
    enabling the "Calculate" rule to match, which then modifies
    another Fibonacci object allowing the "Calculate" rule to match again.
    This continues till the value is set for all <code>Fibonacci</code>
    objects.</para>

    <figure>
      <title>Fibonacci Example: "Bootstrap" Audit View</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Examples/FibonacciExample/fibonacci4.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
