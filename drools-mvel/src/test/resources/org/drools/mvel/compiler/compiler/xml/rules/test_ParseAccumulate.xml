<?xml version="1.0" encoding="UTF-8"?>
<package name="com.sample"
         xmlns="http://drools.org/drools-5.2"
         xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
         xs:schemaLocation="http://drools.org/drools-5.2 drools.org/drools-5.2.xsd">

  <import name="import java.util.List"/>
    <import name="org.drools.compiler.Person" />
    <import name="org.drools.compiler.Cheese" />
  <import name="org.drools.compiler.Cheesery" />

  <global identifier="cheesery" type="Cheesery" />
  <global identifier="list1" type="List" />

    <rule name="simple_rule">
        <rule-attribute name="salience" value="10" />
        <rule-attribute name="no-loop" value="true" />
        <rule-attribute name="agenda-group" value="agenda-group" />
        <rule-attribute name="activation-group" value="activation-group" />

        <lhs>
            <pattern identifier="cheese" object-type="Cheese">
                <from>
                    <accumulate>
                        <pattern object-type="Person"></pattern>
                        <init>
                            int total = 0;
                        </init>
                        <action>
                            total += $cheese.getPrice();
                        </action>
                        <result>
                            new Integer( total ) );
                        </result>
                    </accumulate>
                </from>
            </pattern>

            <pattern identifier="max" object-type="Number">
                <from>
                    <accumulate>
                        <pattern identifier="cheese" object-type="Cheese"></pattern>
                        <external-function evaluator="max" expression="$price"/>
                    </accumulate>
                </from>
            </pattern>
        </lhs>
        <rhs>
            list1.add( $cheese );
        </rhs>
    </rule>

    <rule name="multipatternaccumulate_rule">
        <rule-attribute name="salience" value="10" />
        <lhs>
            <pattern identifier="cheese" object-type="Cheese">
                <from>
                    <accumulate>
                        <and-conditional-element>
                            <pattern object-type="Milk"></pattern>
                            <pattern object-type="Cup"></pattern>
                        </and-conditional-element>

                        <init>
                            int total = 0;
                        </init>
                        <action>
                            total += $cheese.getPrice();
                        </action>
                        <result>
                            new Integer( total ) );
                        </result>
                    </accumulate>
                </from>
            </pattern>
        </lhs>
        <rhs>
            list1.add( $cheese );
        </rhs>
    </rule>



</package>
