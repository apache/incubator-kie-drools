<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Domain Specific Languages</title>

  <para><indexterm>
      <primary>Domain Specific Languages</primary>
    </indexterm>Domain Specific Languages (or DSLs) are a way of creating a rule
  language that is dedicated to your problem domain. A set of DSL definitions
  consists of transformations from DSL "sentences" to DRL constructs, which lets
  you use of all the underlying rule language and engine features. Given a
  DSL, you write rules in DSL rule (or DSLR) files, which will be translated
  into DRL files.</para>

  <para>DSL and DSLR files are plain text files, and you can use any text
  editor to create and modify them. But there are also DSL and DSLR editors,
  both in the IDE as well as in the web based BRMS, and you can use those
  as well, although they may not provide you with the full DSL functionality.
  </para>

  <section>
    <title>When to Use a DSL</title>

    <para>DSLs can serve as a layer of separation between rule authoring (and
    rule authors) and the technical intricacies resulting from the modelling
    of domain object and the rule engine's native language and methods. If your
    rules need to be read and validated by domain experts (such as business
    analysts, for instance) who are not programmers, you should consider 
    using a DSL; it hides implementation details and focuses on the rule logic
    proper. DSL sentences can also act as "templates" for conditional elements and
    consequence actions that are used repeatedly in your rules, possibly with
    minor variations. You may define DSL sentences as being mapped to these
    repeated phrases, with parameters providing a means for accomodating those
    variations.</para>

    <para>DSLs have no impact on the rule engine at runtime, they are just a
    compile time feature, requiring a special parser and transformer.</para>
  </section>

  <section>
    <title>DSL Basics</title>

    <para>The Drools DSL mechanism allows you to customise conditional
    expressions and consequence actions. A global substitution mechanism
    ("keyword") is also available.</para>

    <example>
      <title>Example <indexterm>
          <primary>DSL</primary>b
        </indexterm>DSL mapping</title>

      <programlisting>[when]Something is {colour}=Something(colour=="{colour}")</programlisting>
    </example>

    <para>In the preceding example, <code>[when]</code> indicates the scope of
    the expression, i.e., whether it is valid for the LHS or the RHS of a rule. The
    part after the bracketed keyword is the expression that you use in the rule;
    typically a natural language expression, but it doesn't have to be. The
    part to the right of the equal sign ("=") is the mapping of the expression into
    the rule language. The form of this string depends on its destination, RHS or 
    LHS. If it is for the LHS, then it ought to be a term according to the regular
    LHS syntax; if it is for the RHS then it might be a Java statement.</para>

    <para>Whenever the DSL parser matches a line from the rule file written in the
    DSL with an expression in the DSL definition, it performs three steps of
    string manipulation. First, it extracts the string values appearing where the
    expression contains variable names in braces (here: <code>{colour}</code>). Then,
    the values obtained from these captures are then interpolated wherever that name,
    again enclosed in braces, occurs on the right hand side of the mapping. Finally, the
    interpolated string replaces whatever was matched by the entire expression
    in the line of the DSL rule file.</para>

    <para>Note that the expressions (i.e., the strings on the left hand side of the
    equal sign) are used as regular expressions in a pattern matching operation
    against a line of the DSL rule file, matching all or part of a line. This means
    you can use (for instance) a '?' to indicate that the preceding character is
    optional. One good reason to use this is to overcome variations in natural language
    phrases of your DSL. But, given that these expressions are regular
    expression patterns, this also means that all "magic" characters of Java's
    pattern syntax have to be escaped with a preceding backslash ('\').</para>

    <para>It is important to note that the compiler transforms DSL rule files
    line by line. In the above example, all the text after "Something is " to
    the end of the line is captured as the replacement value for "{colour}",
    and this is used for interpolating the target string. This may not be exactly
    what you want. For instance, when you intend to merge different DSL
    expressions to generate a composite DRL pattern, you need to transform a DSLR
    line in several independent operations. The best way to achieve this is to
    ensure that the captures are surrounded by characteristic text - words or 
    even single characters. As a result,
    the matching operation done by the parser plucks out a substring from 
    somewhere within the line. In the example below, quotes are used as 
    distinctive characters. Note that the characters that surround the capture
    are not included during interpolation, just the contents between them.</para>

    <para>As a rule of thumb, use quotes for textual data that a rule editor
    may want to enter. You can also enclose the capture with words to ensure
    that the text is correctly matched. Both is illustrated by the following
    example. Note that a single line such as <code>Something is "green" and
    another solid thing</code> is now correctly expanded.</para>

    <example>
      <title>Example with quotes</title>

      <programlisting>[when]something is "{colour}"=Something(colour=="{colour}")
[when]another {state} thing=OtherThing(state=="{state}"</programlisting>
    </example>

    <para>It is a good idea to avoid punctuation (other than quotes or
    apostrophes) in your DSL expressions as much as possible. The main reason
    is that punctuation is easy to forget for rule authors using your DSL.
    Another reason is that parentheses, the period and the question mark are magic
    characters, requiring escaping in the DSL definition.</para>

    <para>In a DSL mapping, the braces "{" and "}" should only be used to
    enclose a variable definition or reference, resulting in a capture. If they
    should occur literally, either in the expression or within the replacement
    text on the right hand side, they must be escaped with a preceding backslash
    ("\"):</para>
    <programlisting>[then]do something= if (foo) \{ doSomething(); \}
    </programlisting>

    <note>
    <para>If braces "{" and "}" should appear in the replacement string of a
    DSL definition, escape them with a backslash ('\').</para>
    </note>

    <example>
      <title>Examples of DSL mapping entries</title>

      <programlisting># This is a comment to be ignored.
[when]There is a person with name of "{name}"=Person(name=="{name}")
[when]Person is at least {age} years old and lives in "{location}"=
      Person(age &gt;= {age}, location=="{location}")
[then]Log "{message}"=System.out.println("{message}");
[when]And = and</programlisting>
    </example>

    <para>Given the above DSL examples, the following examples show the expansion of various
    DSLR snippets:</para>
    <example>
        <title>Examples of DSL expansions </title>

        <programlisting>There is a person with name of "Kitty"
   ==&gt; Person(name="Kitty")
Person is at least 42 years old and lives in "Atlanta"
   ==&gt; Person(age &gt;= 42, location="Atlanta")
Log "boo"
   ==&gt; System.out.println("boo");
There is a person with name of "Bob" and Person is at least 30 years old and lives in "Utah"
   ==&gt; Person(name="Bob") and Person(age &gt;= 30, location="Utah")</programlisting>
      </example>

    <note>
    <para>Don't forget that if you are capturing plain text from a DSL rule line
    and want to use it as a string literal in the expansion, you must provide
    the quotes on the right hand side of the mapping.</para>
    </note>

    <para>You can chain DSL expressions together on one line, as long as it is
    clear to the parser where one ends and the next one begins and where the
    text representing a parameter ends. (Otherwise you risk getting all the
    text until the end of the line as a parameter value.) The DSL expressions are
    tried, one after the other, according to their order in the DSL definition
    file. After any match, all remaining DSL expressions are investigated,
    too.</para>

    <para>The resulting DRL text may consist of more than one line. Line ends
    are in the replacement text are written as <code>\n</code>.</para>
  </section>

  <section>
    <title>Adding Constraints to Facts</title>

    <para>A common requirement when writing rule conditions is to be able to
    add an arbitrary combination of constraints to a pattern. Given that a
    fact type may have many fields, having to provide an individual DSL
    statement for each combination would be plain folly.</para>

    <para>The DSL facility allows you to add constraints to a pattern by a
    simple convention: if your DSL expression starts with a hyphen
    (minus character, "-") it is assumed to be a field constraint and,
    consequently, is is added to the last pattern line preceding it.</para>

    <para>For an example, lets take look at class <code>Cheese</code>,
    with the following fields: type, price, age and country. We can
    express some LHS condition in normal DRL like the following</para>

    <programlisting>Cheese(age &lt; 5, price == 20, type=="stilton", country=="ch")</programlisting>

    <para>The DSL definitions given below result in three DSL phrases which
    may be used to create any combination of constraint involving these fields.</para>
    <programlisting>[when]There is a Cheese with=Cheese()
[when]- age is less than {age}=age&lt;{age}
[when]- type is '{type}'=type=='{type}'
[when]- country equal to '{country}'=country=='{country}'</programlisting>

    <para>You can then write rules with conditions like the following:
    <programlisting>There is a Cheese with
        - age is less than 42
        - type is 'stilton'</programlisting> The parser will pick up a line
    beginning with "-" and add it as a constraint to  the preceding pattern,
    inserting a comma when it is required. For the preceding example, the
    resulting DRL is: <programlisting>Cheese(age&lt;42, type=='stilton')</programlisting>
    </para>

    <para>Combining all all numeric fields with all relational operators
    (according to the DSL expression "age is less than..." in the preceding
    example) produces an unwieldy amount of DSL entries. But you can define
    DSL phrases for the various operators and even a generic expression
    that handles any field constraint, as shown below. (Notice that
    the expression definition contains a regular expression in addition
    to the variable name.)</para> 

    <programlisting>[when][]is less than or equal to=&lt;=
[when][]is less than=&lt;
[when][]is greater than or equal to=&gt;=
[when][]is greater than=&gt;
[when][]is equal to===
[when][]equals===
[when][]There is a Cheese with=Cheese()</programlisting>
[when][]- {field:\w*} {operator} {value:\d*}={field} {operator} {value} 

    <para>Given these DSL definitions, you can write rules with conditions
    such as:</para>
    <programlisting>There is a Cheese with
   - age is less than 42
   - rating is greater than 50
   - type equals 'stilton'</programlisting>
    <para>In this specific case, a phrase such as "is less than" is replaced by
    <code>&lt;</code>, and then the line matches the last DSL entry. This
    removes the hyphen, but the final result is still added as a constraint
    to the preceding pattern. After processing all of the lines, the resulting
    DRL text is:</para>
    <programlisting>Cheese(age&lt;42, rating &gt; 50, type=='stilton')</programlisting>

    <note>
    <para>The order of the entries in the DSL is important if separate DSL
    expressions are intended to match the same line, one after the other.</para>
    </note>

  </section>


  <section>
    <title>Developing a DSL</title>

    <para>A good way to get started is to write representative samples of the
    rules your application requires, and to test them as you develop. This will
    provide you with a stable framework of conditional elements and their
    constraints. Rules, both in DRL and in DSLR, refer to entities according
    to the data model representing the application data that should be subject
    to the reasoning process defined in rules. Notice that writing rules
    is generally easier if most of the data model's types are facts.</para>

    <para>Given an initial set of rules, it should be possible to identify
    recurring or similar code snippets and to mark variable parts as
    parameters. This provides reliable leads as to what might be a handy
    DSL entry. Also, make sure you have a full grasp of the jargon the 
    domain experts are using, and base your DSL phrases on this vocabulary.</para>

    <para>You may postpone implementation decisions concerning conditions
    and actions during this first design phase by leaving certain conditional
    elements and actions in their DRL form by prefixing a line with a
    greater sign ("&gt;"). (This is also handy for inserting debugging
    statements.)</para>

    <para>During the next development phase, you should find that the DSL
    configuration stabilizes pretty quickly. New rules can be written by
    reusing the existing DSL definitions, or by adding a parameter to an
    existing condition or consequence entry.</para>

    <para>Try to keep the number of DSL entries small. Using parameters
    lets you apply the same DSL sentence for similar rule patterns or
    constraints. But do not exaggerate: authors using the DSL should still
    be able to identify DSL phrases by some fixed text.</para>
  </section>


  <section>
    <title>DSL and DSLR Reference</title>

    <para>A DSL file is a text file in a line-oriented format. Its
    entries are used for transforming a DSLR file into a file according
    to DRL syntax.</para>

    <itemizedlist>
      <listitem>
        <para>A line starting with "#" or "//"
        (with or without preceding white space) is treated as a comment.
        A comment line starting with "#/" is scanned for
        words requesting a debug option, see below.</para>
      </listitem>
      <listitem>
        <para>Any line starting with an opening bracket ("[") is assumed to
        be the first line of a DSL entry definition.</para>
      </listitem>
      <listitem>
        <para>Any other line is appended to the preceding DSL entry
        definition, with the line end replaced by a space.</para>
        </listitem>
      </itemizedlist>

    <para>A DSL entry consists of the following four parts:</para>

    <itemizedlist>
      <listitem>
        <para>A scope definition, written as one of the keywords
        "when" or "condition", "then" or "consequence", "*"
        and "keyword", enclosed in brackets ("[" and "]"). This indicates
        whether the DSL entry is valid for the condition or the
        consequence of a rule, or both. A scope indication of "keyword"
        means that the entry has global significance, i.e., it is
        recognized anywhere in a DSLR file.</para>
      </listitem>
      <listitem>
        <para>A type definition, written as a Java class name,
        enclosed in brackets. This part is optional unless the
        the next part begins with an opening bracket. An empty
        pair of brackets is valid, too.</para>
      </listitem>
      <listitem>
        <para>A DSL expression consists of a (Java) regular expression,
        with any number of embedded <emphasis>variable definitions,</emphasis>
        terminated by an equal sign ("="). A variable definition is enclosed
        in braces ("{" and "}"). It
        consists of a variable name and two optional attachements, separated
        by colons (":"). If there is one attachment, it is a regular expression
        for matching text that is to be assigned to the variable; if there
        are two attachments, the first one is a hint for the GUI
        editor and the second one the regular expression.</para>

        <para>Note that all characters that are "magic" in regular
        expressions must be escaped with a preceding backslash ("\")
        if they should occur literally within the expression.</para>
      </listitem>
      <listitem>
        <para>The remaining part of the line after the delimiting equal
        sign is the replacement text for any DSLR text matching the
        regular expression. It may contain variable references, i.e.,
        a variable name enclosed in braces. Optionally, the variable name
        may be followed by an exclamation mark ("!") and a transformation
        function, see below.</para>

        <para>Note that braces ("{" and "}") must be escaped with a
        preceding backslash ("\") if they should occur literally
        within the replacement string.</para>
      </listitem>
    </itemizedlist>


    <para>Debugging of DSL expansion can be turned on, selectively,
    by using a comment line starting with "#/" which
    may contain one or more words from the table presented below.
    The resulting output is written to standard output.</para>

    <table>
      <title>Debug options for DSL expansion</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry>Word</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>result</entry>
            <entry>Prints the resulting DRL text, with line numbers.</entry>
          </row>
          <row>
            <entry>steps</entry>
            <entry>Prints each expansion step of condition and consequence
            lines.</entry>
          </row>
          <row>
            <entry>keyword</entry>
            <entry>Dumps the internal representation of all DSL entries with
            scope "keyword".</entry>
          </row>
          <row>
            <entry>when</entry>
            <entry>Dumps the internal representation of all DSL entries with
            scope "when" or "*".</entry>
          </row>
          <row>
            <entry>then</entry>
            <entry>Dumps the internal representation of all DSL entries with
            scope "then" or "*".</entry>
          </row>
          <row>
            <entry>usage</entry>
            <entry>Displays a usage statistic of all DSL entries.</entry>
          </row>

        </tbody>
      </tgroup>
    </table>

    <para>Below are some sample DSL definitions, with comments describing the
    language features they illustrate.</para>

    <programlisting># Comment: DSL examples

#/ debug: display result and usage

# keyword definition: replaces "regula" by "rule"
[keyword][]regula=rule

# conditional element: "T" or "t", "a" or "an", convert matched word
[when][][Tt]here is an? {entity:\w+}=
        ${entity!lc}: {entity!ucfirst} ()

# consequence statement: convert matched word, literal braces
[then][]update {entity:\w+}=modify( ${entity!lc} )\{ \}
</programlisting>


    <para>The transformation of a DSLR file proceeds as follows:</para>

    <orderedlist>
      <listitem>
        <para>The text is read into memory.</para>
      </listitem>
      <listitem>
        <para>Each of the "keyword" entries is applied to the entire text.
        First, the regular expression from the keyword definition is modified
        by replacing white space sequences with a pattern matching any number
        of white space characters, and by replacing variable definitions with
        a capture made from the regular expression provided with the definition,
        or with the default (".*?"). Then, the DSLR text is searched exhaustively
        for occurrences of strings matching the modified regular expression.
        Substrings of a matching string corresponding to variable captures are
        extracted and replace variable references in the corresponding
        replacement text, and this text replaces the matching string in the
        DSLR text.</para>
      </listitem>
      <listitem>
        <para>Sections of the DSLR text between "when" and "then", and
        "then" and "end", respectively, are located and processed in a
        uniform manner, line by line, as described below.</para>

        <para>For a line, each DSL entry pertaining to the line's section
        is taken in turn, in the order it appears in the DSL file. Its
        regular expression part is modified: white space is replaced by
        a pattern matching any number of white space characters; variable
        definitions with a regular expression are replaced by a capture
        with this regular expression, its default being ".*?".
        If the resulting regular expression matches all or part of the
        line, the matched part is replaced by the suitably modified
        replacement text.</para>

        <para>Modification of the replacement text is done by replacing
        variable references with the text corresponding to the regular
        expression capture. This text may be modified according to the
        string transformation function given in the variable reference;
        see below for details.</para>

        <para>If there is a variable reference naming a variable that is not
        defined in the same entry, the expander substitutes a value bound to
        a variable of that name, provided it was defined in one of the
        preceding lines of the current rule.</para>
      </listitem>
      <listitem>
        <para>If a DSLR line in a condition is written with a leading
        hyphen, the expanded result is inserted into the last line, which
        should contain a pattern CE, i.e., a type name followed by a pair
        of parentheses. if this pair is empty, the expanded line (which
        should contain a valid constraint) is simply inserted, otherwise
        a comma (",") is inserted beforehand.  </para>
        <para>If a DSLR line in a consequence is written with a leading
        hyphen, the expanded result is inserted into the last line, which
        should contain a "modify" statement, ending in a pair of braces
        ("{" and "}"). If this pair is empty, the expanded line (which
        should contain a valid method call) is simply inserted, otherwise
        a comma (",") is inserted beforehand.
        </para>
      </listitem>
    </orderedlist>
   
    <note>
    <para>It is currently <emphasis>not</emphasis> possible to use a line
    with a leading hyphen to insert text into other conditional element
    forms (e.g., "accumulate") or it may only work for the first insertion
    (e.g., "eval").</para>
    </note>


    <para>All string transformation functions are described in the following
    table.</para>

    <table>
      <title>String transformation functions</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>uc</entry>
            <entry>Converts all letters to upper case.</entry>
          </row>
          <row>
            <entry>lc</entry>
            <entry>Converts all letters to lower case.</entry>
          </row>
          <row>
            <entry>ucfirst</entry>
            <entry>Converts the first letter to upper case, and
            all other letters to lower case.</entry>
          </row>
          <row>
            <entry>num</entry>
            <entry>Extracts all digits and "-" from the string. If the
            last two digits in the original string are preceded by "." or
            ",", a decimal period is inserted in the corresponding position.</entry>
          </row>
          <row>
            <entry><emphasis>a</emphasis>?<emphasis>b</emphasis>/<emphasis>c</emphasis></entry>
            <entry>Compares the string with string <emphasis>a</emphasis>, and if they
            are equal, replaces it with <emphasis>b</emphasis>, otherwise with
            <emphasis>c</emphasis>. But <emphasis>c</emphasis> can be another triplet
            <emphasis>a</emphasis>, <emphasis>b</emphasis>, <emphasis>c</emphasis>, so
            that the entire structure is, in fact, a translation table.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The following DSL examples show how to use string transformation functions.</para>

    <programlisting># definitions for conditions
[when][]There is an? {entity}=${entity!lc}: {entity!ucfirst}()
[when][]- with an? {attr} greater than {amount}={attr} &lt;= {amount!num}
[when][]- with a {what} {attr}={attr} {what!positive?&gt;0/negative?%lt;0/zero?==0/ERROR}</programlisting>

    <para>A file containing a DSL definition is customarily given the extension
    <code>.dsl</code>. It is passed to the Knowledge Builder with 
    <code>ResourceType.DSL</code>. For a file using DSL definition, the extension
    <code>.dslr</code> should be used. The Knowledge Builder expects
    <code>ResourceType.DSLR</code>. The IDE, however, relies on file extensions
    to correctly recognize and work with your rules file.</para>

    <para>The DSL must be passed to the Knowledge Builder ahead of any rules
    file using the DSL.</para>
    <programlisting>KnowledgeBuilder kBuilder = new KnowledgeBuilder();
Resource dsl = ResourceFactory.newClassPathResource( dslPath, getClass() );
kBuilder.add( dsl, ResourceType.DSL );
Resource dslr = ResourceFactory.newClassPathResource( dslrPath, getClass() );
kBuilder.add( dslr, ResourceType.DSLR );
</programlisting>

    <para>For parsing and expanding a DSLR file the DSL configuration is read
    and supplied to the parser. Thus, the parser can "recognize" the DSL
    expressions and transform them into native rule language expressions.</para>
  </section>

</section>
