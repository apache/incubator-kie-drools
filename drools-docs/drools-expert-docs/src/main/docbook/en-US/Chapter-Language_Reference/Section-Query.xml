<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title id="sec.query.title">Query</title>

  <figure>
    <title>query</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Rule_Language/query.png"
                   format="PNG" role=""></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <para>A query is a simple way to search the working memory for facts that
  match the stated conditions. Therefore, it contains only the structure of
  the LHS of a rule, so that you specify neither "when" nor "then". A query
  has an optional set of parameters, each of which can be optionally typed. If
  the type is not given, the type Object is assumed. The engine will attempt
  to coerce the values as needed. Query names are global to the KnowledgeBase;
  so do not add queries of the same name to different packages for the same
  RuleBase.</para>

  <para>To return the results use
  <code>ksession.getQueryResults("name")</code>, where "name" is the query's
  name. This returns a list of query results, which allow you to retrieve the
  objects that matched the query.</para>

  <para>The first example presents a simple query for all the people over the
  age of 30. The second one, using parameters, combines the age limit with a
  location.</para>

  <example>
    <title>Query People over the age of 30</title>

    <programlisting>query "people over the age of 30" 
    person : Person( age &gt; 30 )
end</programlisting>
  </example>

  <example>
    <title>Query People over the age of x, and who live in y</title>

    <programlisting>query "people over the age of x"  (int x, String y)
    person : Person( age &gt; x, location == y )
end</programlisting>
  </example>

  <para>We iterate over the returned QueryResults using a standard "for" loop.
  Each element is a QueryResultsRow which we can use to access each of the
  columns in the tuple. These columns can be accessed by bound declaration
  name or index position.</para>

  <example>
    <title>Query People over the age of 30</title>

    <programlisting>QueryResults results = ksession.getQueryResults( "people over the age of 30" );
System.out.println( "we have " + results.size() + " people over the age  of 30" );

System.out.println( "These people are are over 30:" );

for ( QueryResultsRow row : results ) {
    Person person = ( Person ) row.get( "person" );
    System.out.println( person.getName() + "\n" );
}</programlisting>

    <para>Queries can now call other queries, this combined with optional
    query arguments provides deriviation query style backward chaining.
    Positional and mixed positional/named type is supported. Literal
    expressions can passed as query arguments, but at this stage you cannot
    mix expressions with variables. Here s an example of a query that calls
    another query. Note that 'z' here will always be an 'out' variable. The
    '?' symbol means the query is pull only, once the results are returned you
    will not received further results as the underlying data changes.</para>

    <programlisting>declare Location
    thing : String 
    location : String 
end

query isContainedIn( String x, String y ) 
    Location(x, y;)
    or 
    ( Location(z, y;) and ?isContainedIn(x, z;) )
end</programlisting>

    <para>As previously mentioned you can use live "open" queries to
    reactively receive changes over time from the query results, as the
    underlying data it queries against changes. Notice the "look" rule calls
    the query without using '?'.</para>

    <programlisting>query isContainedIn( String x, String y ) 
    Location(x, y;)
    or 
    ( Location(z, y;) and isContainedIn(x, z;) )
end

rule look when 
    Person( $l : likes ) 
    isContainedIn( $l, 'office'; )
then
   insertLogical( $l 'is in the office' );
end 
</programlisting>

    <para>Drools supports unification for derivation queries, in short this
    means that arguments are optional. It is possible to call queries from
    java leaving arguments unspecified using the static field
    org.drools.runtime.rule.Variable.v - note you must use 'v' and not an
    alternative instanceof Variable. These are referred to as 'out' arguments.
    Note that the query itself does not declare at compile time whether an
    argument is in or an out, this can be defined purely at runtime on each
    use. The following example will return all objects contained in the
    office.</para>

    <programlisting>results = ksession.getQueryResults( "isContainedIn", new Object[] {  Variable.v, "office" } );
l = new ArrayList&lt;List&lt;String&gt;&gt;();
for ( QueryResultsRow r : results ) {
    l.add( Arrays.asList( new String[] { (String) r.get( "x" ), (String) r.get( "y" ) } ) );
}  
</programlisting>

    <para>The algorithm uses stacks to handle recursion, so the method stack
    will not blow up.</para>

    <para>The following is not yet suported:</para>

    <itemizedlist>
      <listitem>
        <para>List and Map unification</para>
      </listitem>

      <listitem>
        <para>Variables for the fields of facts</para>
      </listitem>

      <listitem>
        <para>Expression unification - pred( X, X + 1, X * Y / 7 )</para>
      </listitem>
    </itemizedlist>
  </example>
</section>
