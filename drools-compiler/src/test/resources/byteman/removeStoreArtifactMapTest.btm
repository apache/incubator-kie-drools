# Byteman Rule for 
# org.drools.compiler.kie.builder.KieModuleRepoTest.artifactMapTest

# The rules below contain out-of-date documentation in order to document
# the race conditions that would happen 
# if the KieModuleRepo methods were NOT synchronized

RULE test setup
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest
METHOD removeStoreArtifactMapTest
AT READ org.drools.compiler.kie.builder.impl.KieModuleRepoTest.kieModuleRepo
BIND threadName = Thread.currentThread().getName();
IF TRUE
DO 
# traceln(">>>> " + threadName + ": create rendezvous's");
createRendezvous("start store", 2);
createRendezvous("end remove", 2);
createRendezvous("continue test", 2);
flag("0");
ENDRULE

# RULE test dev
# CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest
# METHOD continueTest
# AT ENTRY
# BIND threadName = Thread.currentThread().getName();
# IF TRUE
# DO 
# traceln(">>>> " + threadName + ": rendezvous [continue test]");
# rendezvous("continue test");
# ENDRULE

RULE store: after [artifactMap = kieModules.get(ga)]
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest$4
METHOD run()
AT INVOKE org.drools.compiler.kie.builder.impl.KieRepositoryImpl$KieModuleRepo.store(org.kie.api.builder.KieModule)
BIND threadName = Thread.currentThread().getName();
IF threadName.equals("store")
DO 
# traceln(">>>> " + threadName + ": rendezvous start store [start store]");
rendezvous("start store");
# traceln(">>>> " + threadName + ": rendezvous start store [end remove]");
rendezvous("end remove");
flag("2");
ENDRULE

# If this rule FIRES, then your test is BROKEN!
# RULE store: 2nd kieModule read
# CLASS org.drools.compiler.kie.builder.impl.KieRepositoryImpl$KieModuleRepo
# METHOD store
# AT READ org.drools.compiler.kie.builder.impl.KieRepositoryImpl$KieModuleRepo.kieModules 2
# BIND threadName = Thread.currentThread().getName();
# IF threadName.equals("store")
# DO 
# throw new IllegalStateException("A new artifactMap was added to the KieModuleRepo.kieModules field! That action invalidates this test.");
# ENDRULE

RULE remove: after [artifactMap = kieModules.get(ga)]
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest$3
METHOD run()
AT INVOKE org.drools.compiler.kie.builder.impl.KieRepositoryImpl$KieModuleRepo.remove(org.kie.api.builder.ReleaseId)
BIND threadName = Thread.currentThread().getName();
IF TRUE
DO 
# traceln(">>>> " + threadName + ": rendezvous [continue test]");
# rendezvous("continue test");
# traceln(">>>> " + threadName + ": rendezvous start remove [start store]");
rendezvous("start store");
flag("1");
ENDRULE

RULE remove: after [kieModules.remove(ga)]
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest$3
METHOD run()
AFTER INVOKE org.drools.compiler.kie.builder.impl.KieRepositoryImpl$KieModuleRepo.remove(org.kie.api.builder.ReleaseId)
BIND threadName = Thread.currentThread().getName();
IF TRUE
DO 
# traceln(">>>> " + threadName + ": rendezvous exit remove [end remove]");
rendezvous("end remove");
flag("2");
ENDRULE

# --
# Check rules
# --
 
RULE check thread actions
CLASS org.drools.compiler.kie.builder.impl.KieModuleRepoTest
METHOD checkRules
AT ENTRY
BIND threadName = Thread.currentThread().getName();
IF NOT ( flagged("0") || flagged("1") || flagged("2") )
DO 
throw new IllegalStateException("Not all rules were activated: " 
+ flagged("0") + ", "
+ flagged("1") + ", " 
+ flagged("2") );
ENDRULE