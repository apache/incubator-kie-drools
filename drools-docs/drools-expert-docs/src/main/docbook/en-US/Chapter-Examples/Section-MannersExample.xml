<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
    <title>Miss Manners and Benchmarking</title>

    <programlisting><emphasis role="bold">Name:</emphasis> Miss Manners
<emphasis role="bold">Main class:</emphasis> org.drools.benchmark.manners.MannersBenchmark
<emphasis role="bold">Module:</emphasis> drools-examples
<emphasis role="bold">Type:</emphasis> Java application
<emphasis role="bold">Rules file:</emphasis> manners.drl
<emphasis role="bold">Objective:</emphasis> Advanced walkthrough on the Manners benchmark, covers Depth conflict resolution in depth.</programlisting>

    <section>
      <title>Introduction</title>

      <para>Miss Manners is throwing a party and, being a good host, she wants
      to arrange good seating. Her initial design arranges everyone in 
      male-female pairs, but then she worries about people have things to talk
      about. What is a good host to do? She decides to note the hobby of
      each guest so she can then arrange guests not only pairing them according
      to alternating sex but also ensuring that a guest has someone with a
      common hobby, at least on one side.</para>

      <figure>
        <title>Miss Manners' Guests</title>

        <mediaobject>

          <imageobject>
            <imagedata width="100%"
                     align="center" fileref="images/Chapter-Examples/MannersExample/guests_at_table.png"
                       format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <section>
        <title>BenchMarking</title>

        <para>Five benchmarks were established in the 1991 paper "Effects of
        Database Size on Rule System Performance: Five Case Studies" by 
        David Brant, Timothy Grose, Bernie Lofaso and Daniel P. Miranker:</para>


        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Manners</emphasis> uses a 
            depth-first search approach to determine the
            seating arrangements alternating women and men and ensuring
            one common hobby for neighbors.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Waltz</emphasis> establishes
            a three-dimensional interpretation of a line drawing by
            line labeling by constraint propagation.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">WaltzDB</emphasis> is a more
            general version of Waltz, supporting junctions of more
            than three lines and using a database.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">ARP</emphasis> is a 
            route planner for a robotic air vehicle using the A*
            search algorithm to achieve minimal cost.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Weaver</emphasis> 
            VLSI router for channels and boxes using a black-board
            technique.</para>
          </listitem>
        </itemizedlist>

        <para>Manners has become the de facto rule engine benchmark.
        Its behavior, however, is now well known and many engines
        optimize for this, thus negating its usefulness as a benchmark 
        which is why Waltz is becoming more favorable. These five
        benchmarks are also published at the University of Texas <ulink
        url="http://www.cs.utexas.edu/ftp/pub/ops5-benchmark-suite/">http://www.cs.utexas.edu/ftp/pub/ops5-benchmark-suite/</ulink>.</para>
      </section>

      <section>
        <title>Miss Manners Execution Flow</title>

        <para>After the first seating arrangement has been assigned, a
        depth-first recursion occurs which repeatedly assigns correct
        seating arrangements until the last seat is assigned. Manners
        uses a <code>Context</code> instance to control execution flow.
        The activity diagram is partitioned to show the relation of the
        rule execution to the current <code>Context</code> state.</para>

        <figure>
          <title>Manners Activity Diagram</title>

          <mediaobject>
            <imageobject>
               <imagedata width="100%"
                   align="center" fileref="images/Chapter-Examples/MannersExample/manners_activity_diagram.png"
                   format="PNG" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>The Data and Results</title>

        <para>Before going deeper into the rules, let's first take a look
        at the asserted data and the resulting seating arrangement. The
        data is a simple set of five guests who should be arranged so
        that sexes alternate and neighbors have a common hobby.</para>

        <para><emphasis role="bold">The Data</emphasis></para>

        <para>The data is given in OPS5 syntax, with a parenthesized
        list of name and value pairs for each attribute. Each
        person has only one hobby.</para>

        <literallayout>(guest (name n1) (sex m) (hobby  h1)  )
(guest (name n2) (sex f) (hobby  h1)  )
(guest (name n2) (sex f) (hobby  h3)  )
(guest (name n3) (sex m) (hobby  h3)  )
(guest (name n4) (sex m) (hobby  h1)  )
(guest (name n4) (sex f) (hobby  h2)  )
(guest (name n4) (sex f) (hobby  h3)  )
(guest (name n5) (sex f) (hobby  h2)  )
(guest (name n5) (sex f) (hobby  h1)  )
(last_seat (seat 5)  )</literallayout>

        <para><emphasis role="bold">The Results</emphasis></para>

        <para>Each line of the results list is printed per execution of the
        "Assign Seat" rule. They key bit to notice is that each line has
        a "pid" value one greater than the last. (The significance of this
        will be explained in the discussion of the rule "Assign Seating".)
        The "ls", "rs", "ln" and "rn" refer to the left and right
        seat and neighbor's name, respectively. The actual implementation
        uses longer attribute names (e.g., <code>leftGuestName</code>,
        but here we'll stick to the notation from the original
        implementation.</para>

        <literallayout>[Seating id=1, pid=0, done=true, ls=1, ln=n5, rs=1, rn=n5] 
[Seating id=2, pid=1, done=false, ls=1, ln=n5, rs=2, rn=n4] 
[Seating id=3, pid=2, done=false, ls=2, ln=n4, rs=3, rn=n3] 
[Seating id=4, pid=3, done=false, ls=3, rn=n3, rs=4, rn=n2] 
[Seating id=5, pid=4, done=false, ls=4, ln=n2, rs=5, rn=n1]</literallayout>
      </section>
    </section>

    <section>
      <title>Indepth Discussion</title>

      <section>
        <title>Cheating</title>

        <para>Manners has been designed to exercise cross product
        joins and Agenda activities. Many people not understanding this
        tweak the example to achieve better performance, making their
        port of the Manners benchmark pointless. Known cheats or
        porting errors for Miss Manners are:</para>

        <itemizedlist>
          <listitem>
            <para>Using arrays for a guests hobbies, instead of asserting each
            one as a single fact massively reduces the cross products.</para>
          </listitem>

          <listitem>
            <para>Altering the sequence of data can also reduce the
            amount of matching, increasing execution speed.</para>
          </listitem>

          <listitem>
            <para>It's possible to change the <literal>not</literal> Conditional
            Element so that the test algorithm only uses the
            "first-best-match", which is, basically, transforming
            the test algorithm to backward chaining. The results are only
            comparable to other backward chaining rule engines or ports of
            Manners.</para>
          </listitem>

          <listitem>
            <para>Removing the context so the rule engine matches the guests
            and seats prematurely. A proper port will prevent facts from
            matching using the context start.</para>
          </listitem>

          <listitem>
            <para>It's possible to prevent the rule engine from performing
            combinatorial pattern matching.</para>
          </listitem>

          <listitem>
            <para>If no facts are retracted in the reasoning cycle, as a
            result of the <literal>not</literal> CE, the port is incorrect.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Conflict Resolution</title>

        <para>The Manners benchmark was written for OPS5 which has two conflict
        resolution strategies, LEX and MEA. LEX is a chain of several
        strategies including salience, recency and complexity. The recency
        part of the strategy drives the depth first (LIFO) firing order.
        The CLIPS  manual documents the Recency strategy as follows:</para>

        <blockquote>
          <attribution>CLIPS Reference Manual</attribution>

          <para>Every fact and instance is marked internally with a "time tag"
          to indicate its relative recency with respect to every other fact
          and instance in the system. The pattern entities associated with
          each rule activation are sorted in descending order for determining
          placement. An activation with a more recent pattern entity is
          placed before activations with less recent pattern entities. To
          determine the placement order of two activations, compare the sorted
          time tags of the two activations one by one starting with the
          largest time tags. The comparison should continue until one
          activation’s time tag is greater than the other activation’s
          corresponding time tag. The activation with the greater time tag is
          placed before the other activation on the agenda. If one activation
          has more pattern entities than the other activation and the compared
          time tags are all identical, then the activation with more time tags
          is placed before the other activation on the agenda.</para>
        </blockquote>

        <para>However Jess and CLIPS both use the Depth strategy, which is
        simpler and lighter, which Drools also adopted. The CLIPS manual
        documents the Depth strategy as:</para>

        <blockquote>
          <attribution>CLIPS Reference Manual</attribution>

          <para>Newly activated rules are placed above all rules of the same
          salience. For example, given that fact-a activates rule-1 and rule-2
          and fact-b activates rule-3 and rule-4, then if fact-a is asserted
          before fact-b, rule-3 and rule-4 will be above rule-1 and rule-2 on
          the agenda. However, the position of rule-1 relative to rule-2 and
          rule-3 relative to rule-4 will be arbitrary.</para>
        </blockquote>

        <para>The initial Drools implementation for the Depth strategy would
        not work for Manners without the use of salience on the "make_path"
        rule. The CLIPS support team had this to say:</para>

        <blockquote>
          <attribution>Clips Support Forum</attribution>

          <para>The default conflict resolution strategy for CLIPS, Depth, is
          different than the default conflict resolution strategy used by
          OPS5. Therefore if you directly translate an OPS5 program to CLIPS,
          but use the default depth conflict resolution strategy, you're only
          likely to get the correct behavior by coincidence. The LEX and MEA
          conflict resolution strategies are provided in CLIPS to allow you to
          quickly convert and correctly run an OPS5 program in CLIPS.</para>
        </blockquote>

        <para>Investigation into the CLIPS code reveals there is undocumented
        functionality in the Depth strategy. There is an accumulated time tag
        used in this strategy; it's not an extensively fact by fact comparison
        as in the recency strategy, it simply adds the total of all the time
        tags for each activation and compares.</para>
      </section>

      <section>
        <title>Rule "assignFirstSeat"</title>

        <para>Once the context is changed to <code>START_UP</code>,
        activations are created for all asserted guest. Because all
        activations are created as the result of a single Working Memory
        action, they all have the same Activation time tag. The last
        asserted <code>Guest</code> object would have a higher fact
        time tag, and its Activation would fire because it has the highest
        accumulated fact time tag. The execution order in this rule has little
        importance, but has a big impact in the rule "Assign Seat". The
        activation fires and asserts the first <code>Seating</code>
        arrangement and a <code>Path</code>, and then sets the
        <code>Context</code> attribute <code>state</code> to create 
        an activation for rule <code>findSeating</code>.</para>

        <programlisting>rule assignFirstSeat
    when
        context : Context( state == Context.START_UP )
        guest : Guest()
        count : Count()
    then
        String guestName = guest.getName();
        
        Seating seating =
          new Seating( count.getValue(), 1, true, 1, guestName, 1, guestName);
        insert( seating );
        
        Path path = new Path( count.getValue(), 1, guestName );
        insert( path );
        
        modify( count ) { setValue ( count.getValue() + 1 )  }

    System.out.println( "assign first seat :  " + seating + " : " + path );

        modify( context ) {
            setState( Context.ASSIGN_SEATS )
        } 
end</programlisting>
      </section>

      <section>
        <title>Rule "findSeating"</title>

        <para>This rule determines each of the <code>Seating</code>
        arrangements. The rule creates cross product solutions for
        <emphasis>all</emphasis> asserted <code>Seating</code> arrangements
        against <emphasis>all</emphasis> the asserted guests except 
        against itself or any already assigned chosen solutions.</para>

        <programlisting>rule findSeating
   when 
       context : Context( state == Context.ASSIGN_SEATS )
       $s      : Seating( pathDone == true )
       $g1     : Guest( name == $s.rightGuestName )
       $g2     : Guest( sex != $g1.sex, hobby == $g1.hobby )

       count   : Count()

       not ( Path( id == $s.id, guestName == $g2.name) )
       not ( Chosen( id == $s.id, guestName == $g2.name, hobby == $g1.hobby) )
   then
       int rightSeat = $s.getRightSeat();
       int seatId = $s.getId();
       int countValue = count.getValue();
       
       Seating seating =
         new Seating( countValue, seatId, false, rightSeat,
                      $s.getRightGuestName(), rightSeat + 1, $g2.getName() );
       insert( seating );
                            
       Path path = new Path( countValue, rightSeat + 1, $g2.getName()  );
       insert( path );
       
       Chosen chosen = new Chosen( seatId, $g2.getName(), $g1.getHobby() );
       insert( chosen  );

       System.err.println( "find seating : " + seating + " : " + path +
                           " : " + chosen);

       modify( count ) {setValue(  countValue + 1 )}
       modify( context ) {setState( Context.MAKE_PATH )}
end</programlisting>

        <para>However, as can be seen from the printed results shown earlier,
        it is essential that only the <code>Seating</code> with the highest
        <code>pid</code> cross product be chosen. How can this be possible
        if we have activations, of the same time tag, for nearly all
        existing <code>Seating</code> and <code>Guest</code> objects? For
        example, on the third iteration of <code>findDeating</code> the
        produced activations will be as shown below. Remember, this is from
        a very small data set, and with larger data sets there would be many
        more possible activated <code>Seating</code> solutions, with multiple
        solutions per <code>pid</code>:</para>

        <literallayout>=&gt;[ActivationCreated(35): rule=findSeating 
[fid:19:33]:[Seating id=3, pid=2, done=true, ls=2, ln=n4, rs=3, rn=n3] 
[fid:4:4]:[Guest name=n3, sex=m, hobbies=h3] 
[fid:3:3]:[Guest name=n2, sex=f, hobbies=h3]

=&gt;[ActivationCreated(35): rule=findSeating 
[fid:15:23]:[Seating id=2, pid=1, done=true, ls=1, ln=n5, rs=2, rn=n4] 
[fid:5:5]:[Guest name=n4, sex=m, hobbies=h1] 
[fid:2:2]:[Guest name=n2, sex=f, hobbies=h1] 

=&gt;[ActivationCreated(35): rule=findSeating 
[fid:13:13]:[Seating id=1, pid=0, done=true, ls=1, ln=n5, rs=1, rn=n5] 
[fid:9:9]:[Guest name=n5, sex=f, hobbies=h1] 
[fid:1:1]:[Guest name=n1, sex=m, hobbies=h1]</literallayout>

        <para>The creation of all these redundant activations might seem
        pointless, but it must be remembered that Manners is not about good
        rule design; it's purposefully designed as a bad ruleset to fully
        stress-test the cross product matching process and the Agenda, which
        this clearly does. Notice that each activation has the same time tag
        of 35, as they were all activated by the change in the
        <code>Context</code> object to <code>ASSIGN_SEATS</code>. With OPS5
        and LEX it would correctly fire the activation with the
        <code>Seating</code> asserted last. With Depth, the accumulated fact
        time tag ensures that the activation with the last asserted
        <code>Seating</code> fires.</para>
      </section>

      <section>
        <title>Rules "makePath" and "pathDone"</title>

        <para>Rule <code>makePath</code> must always fire before
        <code>pathDone</code>. A <code>Path</code> object is asserted for
        each <code>Seating</code> arrangement, up to the last asserted 
        <code>Seating</code>. Notice that the conditions in
        <code>pathDone</code> are a subset of those in
        <code>makePath</code> - so how do we ensure that <code>makePath</code>
        fires first?</para>

        <programlisting>rule makePath
    when 
        Context( state == Context.MAKE_PATH )
        Seating( seatingId:id, seatingPid:pid, pathDone == false )
        Path( id == seatingPid, pathGuestName:guestName, pathSeat:seat )
        not Path( id == seatingId, guestName == pathGuestName )
    then
        insert( new Path( seatingId, pathSeat, pathGuestName ) );
end</programlisting>

        <programlisting>rule pathDone
    when
        context : Context( state == Context.MAKE_PATH ) 
        seating : Seating( pathDone == false ) 
    then
        modify( seating ) {setPathDone( true )} 
        
    modify( context ) {setState( Context.CHECK_DONE)}
end</programlisting>

        <figure>
          <title>Rete Diagram</title>

          <mediaobject>

            <imageobject>
        <imagedata align="center" fileref="images/Chapter-Examples/MannersExample/make_path.png" format="PNG"
                         scalefit="1" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Both rules end up on the Agenda in conflict and with identical
        activation time tags. However, the accumulate fact time tag is greater
        for "Make Path" so it gets priority.</para>
      </section>

      <section>
        <title>Rules "continue" and "areWeDone"</title>

        <para>Rule <code>areWeDone</code> only activates when the last seat
        is assigned, at which point both rules will be activated. For the
        same reason that <code>makePath</code> always wins over
        <code>path Done</code>, <code>areWeDone</code> will take
        priority over rule <code>continue</code>.</para>

        <programlisting>rule areWeDone
    when
        context : Context( state == Context.CHECK_DONE ) 
        LastSeat( lastSeat: seat )
        Seating( rightSeat == lastSeat ) 
    then
        modify( context ) {setState(Context.PRINT_RESULTS )}
end
</programlisting>

        <programlisting>rule continue
    when
        context : Context( state == Context.CHECK_DONE ) 
    then
        modify( context ) {setState( Context.ASSIGN_SEATS )}
end
</programlisting>
      </section>
    </section>

    <section>
      <title>Output Summary</title>

      <literallayout><emphasis role="bold">Assign First seat</emphasis>
=&gt;[fid:13:13]:[Seating id=1, pid=0, done=true, ls=1, ln=n5, rs=1, rn=n5]
=&gt;[fid:14:14]:[Path id=1, seat=1, guest=n5]

==&gt;[ActivationCreated(16): rule=findSeating
[fid:13:13]:[Seating id=1, pid=0, done=true, ls=1, ln=n5, rs=1, rn=n5]
[fid:9:9]:[Guest name=n5, sex=f, hobbies=h1]
[fid:1:1]:[Guest name=n1, sex=m, hobbies=h1]

==&gt;[ActivationCreated(16): rule=findSeating
[fid:13:13]:[Seating id=1 , pid=0, done=true, ls=1, ln=n5, rs=1, rn=n5]
[fid:9:9]:[Guest name=n5, sex=f, hobbies=h1]
[fid:5:5]:[Guest name=n4, sex=m, hobbies=h1]*

<emphasis role="bold">Assign Seating</emphasis>
=&gt;[fid:15:17] :[Seating id=2 , pid=1 , done=false, ls=1, lg=n5, rs=2, rn=n4]
=&gt;[fid:16:18]:[Path id=2, seat=2, guest=n4]
=&gt;[fid:17:19]:[Chosen id=1, name=n4, hobbies=h1]

=&gt;[ActivationCreated(21): rule=makePath 
[fid:15:17] : [Seating id=2, pid=1, done=false, ls=1, ln=n5, rs=2, rn=n4]
[fid:14:14] : [Path id=1, seat=1, guest=n5]*

==&gt;[ActivationCreated(21): rule=pathDone
[Seating id=2, pid=1, done=false, ls=1, ln=n5, rs=2, rn=n4]*

<emphasis role="bold">Make Path</emphasis>
=&gt;[fid:18:22:[Path id=2, seat=1, guest=n5]]

<emphasis role="bold">Path Done</emphasis>

<emphasis role="bold">Continue Process</emphasis>
=&gt;[ActivationCreated(25): rule=findSeating
[fid:15:23]:[Seating id=2, pid=1, done=true, ls=1, ln=n5, rs=2, rn=n4]
[fid:7:7]:[Guest name=n4, sex=f, hobbies=h3]
[fid:4:4] : [Guest name=n3, sex=m, hobbies=h3]*

=&gt;[ActivationCreated(25): rule=findSeating
[fid:15:23]:[Seating id=2, pid=1, done=true, ls=1, ln=n5, rs=2, rn=n4]
[fid:5:5]:[Guest name=n4, sex=m, hobbies=h1]
[fid:2:2]:[Guest name=n2, sex=f, hobbies=h1], [fid:12:20] : [Count value=3]

=&gt;[ActivationCreated(25): rule=findSeating
[fid:13:13]:[Seating id=1, pid=0, done=true, ls=1, ln=n5, rs=1, rn=n5]
[fid:9:9]:[Guest name=n5, sex=f, hobbies=h1]
[fid:1:1]:[Guest name=n1, sex=m, hobbies=h1]

<emphasis role="bold">Assign Seating</emphasis>
=&gt;[fid:19:26]:[Seating id=3, pid=2, done=false, ls=2, lnn4, rs=3, rn=n3]]
=&gt;[fid:20:27]:[Path id=3, seat=3, guest=n3]]
=&gt;[fid:21:28]:[Chosen id=2, name=n3, hobbies=h3}]

=&gt;[ActivationCreated(30): rule=makePath
[fid:19:26]:[Seating id=3, pid=2, done=false, ls=2, ln=n4, rs=3, rn=n3]
[fid:18:22]:[Path id=2, seat=1, guest=n5]*

=&gt;[ActivationCreated(30): rule=makePath 
[fid:19:26]:[Seating id=3, pid=2, done=false, ls=2, ln=n4, rs=3, rn=n3]
[fid:16:18]:[Path id=2, seat=2, guest=n4]*

=&gt;[ActivationCreated(30): rule=done 
[fid:19:26]:[Seating id=3, pid=2, done=false, ls=2, ln=n4, rs=3, rn=n3]*

<emphasis role="bold">Make Path</emphasis>
=&gt;[fid:22:31]:[Path id=3, seat=1, guest=n5]

<emphasis role="bold">Make Path </emphasis>
=&gt;[fid:23:32] [Path id=3, seat=2, guest=n4]

<emphasis role="bold">Path Done</emphasis>

<emphasis role="bold">Continue Processing</emphasis>
=&gt;[ActivationCreated(35): rule=findSeating
[fid:19:33]:[Seating id=3, pid=2, done=true, ls=2, ln=n4, rs=3, rn=n3]
[fid:4:4]:[Guest name=n3, sex=m, hobbies=h3]
[fid:3:3]:[Guest name=n2, sex=f, hobbies=h3], [fid:12:29]*

=&gt;[ActivationCreated(35): rule=findSeating 
[fid:15:23]:[Seating id=2, pid=1, done=true, ls=1, ln=n5, rs=2, rn=n4] 
[fid:5:5]:[Guest name=n4, sex=m, hobbies=h1]
[fid:2:2]:[Guest name=n2, sex=f, hobbies=h1]

=&gt;[ActivationCreated(35): rule=findSeating 
[fid:13:13]:[Seating id=1, pid=0, done=true, ls=1, ln=n5, rs=1, rn=n5] 
[fid:9:9]:[Guest name=n5, sex=f, hobbies=h1], [fid:1:1] : [Guest name=n1, sex=m, hobbies=h1]

<emphasis role="bold">Assign Seating</emphasis>
=&gt;[fid:24:36]:[Seating id=4, pid=3, done=false, ls=3, ln=n3, rs=4, rn=n2]]
=&gt;[fid:25:37]:[Path id=4, seat=4, guest=n2]]
=&gt;[fid:26:38]:[Chosen id=3, name=n2, hobbies=h3]

==&gt;[ActivationCreated(40): rule=makePath 
[fid:24:36]:[Seating id=4, pid=3, done=false, ls=3, ln=n3, rs=4, rn=n2]
[fid:23:32]:[Path id=3, seat=2, guest=n4]*

==&gt;[ActivationCreated(40): rule=makePath 
[fid:24:36]:[Seating id=4, pid=3, done=false, ls=3, ln=n3, rs=4, rn=n2] 
[fid:20:27]:[Path id=3, seat=3, guest=n3]*

=&gt;[ActivationCreated(40): rule=makePath 
[fid:24:36]:[Seating id=4, pid=3, done=false, ls=3, ln=n3, rs=4, rn=n2]
[fid:22:31]:[Path id=3, seat=1, guest=n5]*

=&gt;[ActivationCreated(40): rule=done 
[fid:24:36]:[Seating id=4, pid=3, done=false, ls=3, ln=n3, rs=4, rn=n2]*

<emphasis role="bold">Make Path </emphasis>
=&gt;fid:27:41:[Path id=4, seat=2, guest=n4]

<emphasis role="bold">Make Path</emphasis>
=&gt;fid:28:42]:[Path id=4, seat=1, guest=n5]]

<emphasis role="bold">Make Path</emphasis>
=&gt;fid:29:43]:[Path id=4, seat=3, guest=n3]]

<emphasis role="bold">Path Done</emphasis>

<emphasis role="bold">Continue  Processing</emphasis>
=&gt;[ActivationCreated(46): rule=findSeating 
[fid:15:23]:[Seating id=2, pid=1, done=true, ls=1, ln=n5, rs=2, rn=n4] 
[fid:5:5]:[Guest name=n4, sex=m, hobbies=h1], [fid:2:2]
[Guest name=n2, sex=f, hobbies=h1]

=&gt;[ActivationCreated(46): rule=findSeating 
[fid:24:44]:[Seating id=4, pid=3, done=true, ls=3, ln=n3, rs=4, rn=n2]
[fid:2:2]:[Guest name=n2, sex=f, hobbies=h1]
[fid:1:1]:[Guest name=n1, sex=m, hobbies=h1]*

=&gt;[ActivationCreated(46): rule=findSeating 
[fid:13:13]:[Seating id=1, pid=0, done=true, ls=1, ln=n5, rs=1, rn=n5]
[fid:9:9]:[Guest name=n5, sex=f, hobbies=h1]
[fid:1:1]:[Guest name=n1, sex=m, hobbies=h1]

<emphasis role="bold">Assign Seating</emphasis>
=&gt;[fid:30:47]:[Seating id=5, pid=4, done=false, ls=4, ln=n2, rs=5, rn=n1]
=&gt;[fid:31:48]:[Path id=5, seat=5, guest=n1]
=&gt;[fid:32:49]:[Chosen id=4, name=n1, hobbies=h1]
</literallayout>
    </section>
  </section>
