@comment{

  Copyright 2017 Red Hat, Inc. and/or its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}

package @{packageName}

import org.kie.pmml.pmml_4_2.*;
import org.kie.pmml.pmml_4_2.model.*;
import org.kie.pmml.pmml_4_2.model.mining.*;
import org.kie.pmml.pmml_4_2.model.datatypes.*;



@code{ int salienceValue; }



rule "Start Mining - @{miningModel.modelId}"
agenda-group "MiningSegmentation"
salience 1000
auto-focus
when
   rqst: PMMLRequestData( correlationId != null, modelName == "@{miningModel.modelId}", rqstInf: requestParams != null, source == null || source == "EXTERNAL" )
   not @{miningModel.miningPojoClassName}()
then
   @{miningModel.miningPojoClassName} modelData = new @{miningModel.miningPojoClassName}(rqst);
   insert(modelData);
end

rule "Execute Next Segment"
agenda-group "MiningSegmentation"
when
   $segExec: SegmentExecution( $corrId: correlationId, $segmId: segmentationId, state == SegmentExecutionState.WAITING, $segIdx: segmentIndex ) 
   not SegmentExecution( correlationId == $corrId, segmentationId == $segmId, state == SegmentExecutionState.EXECUTING,  segmentIndex < $segIdx )
then
   $segExec.applySegmentModel($segExec.getRequestData(),kcontext);
end

rule "Segment Complete"
agenda-group "MiningSegmentation"
when
   $segExec: SegmentExecution( $corrId: correlationId, $segmId: segmentationId, $segId: segmentId, state == SegmentExecutionState.EXECUTING, $rslt: result != null )
   PMML4Result( this == $rslt, resultCode == "OK" )
then
   System.out.println("Segment "+$segExec.getSegmentId()+" completed");
   modify($segExec) {
      setState(SegmentExecutionState.COMPLETE);
   }
end


rule "Segment Complete with Error"
agenda-group "MiningSegmentation"
when
   $segExec: SegmentExecution( $corrId: correlationId, $segmId: segmentationId, $segId: segmentId, state == SegmentExecutionState.EXECUTING, $rslt: result != null )
   PMML4Result( this == $rslt, resultCode != null && resultCode != "OK" )
then
   System.out.println("Segment "+$segExec.getSegmentId()+" completed with error");
   modify($segExec) {
      setState(SegmentExecutionState.ERROR);
   }
end


@foreach{ childSegment: childSegments }
@code{ salienceValue = 100 - childSegment.segmentIndex; }
@code{ internalModel = childSegment.model; }

rule "Add previous segment results - Segment @{childSegment.segmentId}"
agenda-group "MiningSegmentation"
salience 100
no-loop
when
   segEx: SegmentExecution( $cid: correlationId, $segmId: segmentationId, $segId: segmentId == @{childSegment.segmentId},
                            $segIndex: segmentIndex,
                            state == SegmentExecutionState.WAITING, requestData != null )
   rqst: PMMLRequestData() from segEx.requestData
   prior: SegmentExecution( correlationId == $cid, segmentationId == $segmId, segmentIndex < $segIndex, state == SegmentExecutionState.COMPLETE )
then
   System.out.println("doing the mapping!!");
   PMMLRequestData data = segEx.getRequestData();
   PMML4Result result = prior.getResult();
   @foreach{ field: childSegment.model.miningFields }
   @if{ !field.inDictionary }
   rqst.addRequestParam( "@{field.name}", result.getResultValue("@{field.compactUpperCaseName}","value") );
   @end{}
   @end{}
   update(segEx);
   System.out.println(rqst.getMappedRequestParams());
end

rule "Check Segment Can Fire - Segment @{childSegment.segmentId}"
agenda-group "MiningSegmentation"
salience @{salienceValue}
when
   @if{ childSegment.predicateText != null && childSegment.predicateText != "" }
   model: @{miningModel.miningPojoClassName}( $corrId: correlationId, @{childSegment.predicateText} )
   @else{}
   model: @{miningModel.miningPojoClassName}( $corrId: correlationId )
   @end{} 
then
   PMMLRequestData rqstData = new PMMLRequestData(model.getCorrelationId(),"@{childSegment.model.modelId}");
   rqstData.setSource("@{childSegment.owner.segmentationId}:@{childSegment.segmentId}");
   @foreach{ field: childSegment.model.miningFields }
   @if{ field.inDictionary }
   rqstData.addRequestParam( "@{field.name}",model.getV@{field.compactUpperCaseName}() );
   @end{}
   @end{}
   SegmentExecution segEx = new SegmentExecution( model.getCorrelationId(),
                                                  "@{childSegment.owner.segmentationId}",
                                                  "@{childSegment.segmentId}",
                                                   @{childSegment.segmentIndex},
                                                  "@{childSegment.segmentAgendaId}" );
   segEx.setRequestData(rqstData);
   insertLogical(segEx);
end



@end{}

