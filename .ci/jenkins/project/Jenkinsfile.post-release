/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand


pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }

    options {
        timestamps()
        timeout(time: 120, unit: 'MINUTES')
        disableConcurrentBuilds(abortPrevious: true)
    }

    environment {
        DROOLS_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        PR_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs(disableDeferredWipeout: true)
                }
            }
        }
        stage('Update drools version in drools-website') {
            steps {
                script {
                    String droolsWebsiteRepository = 'incubator-kie-drools-website'
                    String prLink = null
                    String prBranchName = "${getProjectVersion().toLowerCase()}-${env.PR_BRANCH_HASH}"
                    dir(droolsWebsiteRepository) {
                        checkoutRepo(droolsWebsiteRepository, getBuildBranch()) // there is no other branch
                        githubscm.createBranch(prBranchName)

                        // Update versions in links on the website and in the docs.
                        sh "./scripts/update-versions.sh ${getProjectVersion()} ${getNextMinorSnapshotVersion(getProjectVersion())} ${getReleaseNotesNumber()}"
                        // Check if everyting builds
                        sh 'mvn clean generate-resources'
                        // Add changed files, commit, open and merge PR
                        prLink = commitAndCreatePR("Upgrade drools-website ${getProjectVersion()}", prBranchName, getBuildBranch())
                        approveAndMergePR(prLink)
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
        unsuccessful {
            sendErrorNotification()
        }
    }
}

void sendErrorNotification() {
    mailer.sendMarkdownTestSummaryNotification('Post-release', "[${getBuildBranch()}] Drools-website", [env.DROOLS_CI_EMAIL_TO])
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

String getProjectVersion() {
    return params.DROOLS_VERSION
}

String getBuildBranch() {
    return 'main'
}

String getNextMinorSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'minor')
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorPushCredsId() {
    return env.GIT_AUTHOR_PUSH_CREDS_ID
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getReleaseNotesNumber() {
    return params.RELEASE_NOTES_NUMBER
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutRepo(String repo, String branch) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), branch, false, getGitAuthorCredsId()))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

void approveAndMergePR(String prLink) {
    if (prLink?.trim()) {
        githubscm.approvePR(prLink, getGitAuthorPushCredsId())
        githubscm.mergePR(prLink, getGitAuthorPushCredsId())
    }
}

String commitAndCreatePR(String commitMsg, String localBranch, String targetBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
    githubscm.setUserConfigFromCreds(getGitAuthorPushCredsId())
    githubscm.commitChanges(commitMsg)
    githubscm.pushObject('origin', localBranch, getGitAuthorPushCredsId())
    return githubscm.createPR(commitMsg, prBody, targetBranch, getGitAuthorCredsId())
}