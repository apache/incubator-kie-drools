/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

//created on: 12 juin 2006
package Number

import org.drools.mvel.compiler.IndexedNumber;
import java.util.List;

global java.util.List orderedNumbers;
global java.util.List errors;
 
rule "Order1"
salience 210
    when
        // testing join node + eval
        n1 : IndexedNumber($nb1 : number);
        n2 : IndexedNumber(number < $nb1);
        eval(n1.getIndex() < n2.getIndex());
    then
        if ( ! (n1.getIndex() < n2.getIndex())) {
            errors.add("{1} Shouldn't fire for: " + n1 + " " + n2);
        }
end

rule "Order2"
salience 200
    when
        // testing pure join nodes
        n1 : IndexedNumber($nb1 : number, $index : index);
        n2 : IndexedNumber(number < $nb1, index > $index );
    then
        if ( ! (n1.getIndex() < n2.getIndex())) {
            errors.add("{2} Shouldn't fire for: " + n1 + " " + n2);
        }
        swap(n1, n2);
        update(n1);
        update(n2);
end

rule "Debug"
salience 10
    when
        n : IndexedNumber($idx : index);
        not IndexedNumber(index < $idx);
    then
        orderedNumbers.add(n);
        delete(n);
end

function void swap(IndexedNumber n1, IndexedNumber n2) {
    int tmp = n1.getIndex();
    n1.setIndex(n2.getIndex());
    n2.setIndex(tmp);
}
