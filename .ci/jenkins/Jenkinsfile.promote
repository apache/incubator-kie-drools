import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

deployProperties = [:]
pipelineProperties = [:]

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }

    options {
        timestamps()
        timeout(time: 180, unit: 'MINUTES')
    }

    environment {
        DROOLS_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    assert getProjectVersion()
                    assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                }
            }
        }
        stage('Merge deploy PR and tag') {
            steps {
                script {
                    dir(getRepoName()) {
                        checkoutRepo()
                        mergeAndPush(getDeployPrLink())
                        tagLatest()
                    }
                }
            }
        }

        stage('Create release') {
            steps {
                script {
                    dir(getRepoName()) {
                        checkoutRepo()
                        if(githubscm.isReleaseExist(getGitTag(), getGitAuthorCredsId())) {
                            githubscm.deleteRelease(getGitTag(), getGitAuthorCredsId())
                        }
                        githubscm.createReleaseWithGeneratedReleaseNotes(getGitTag(), getBuildBranch(), githubscm.getPreviousTagFromVersion(getGitTag()), getGitAuthorCredsId())
                        githubscm.updateReleaseBody(getGitTag(), getGitAuthorCredsId())
                    }
                }
            }
        }

        stage('Upload drools binaries and documentation') {
            when {
                expression { return isMainStream() }
            }
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        getMavenCommand()
                            .withOptions(env.DROOLS_BUILD_MVN_OPTS ? [ env.DROOLS_BUILD_MVN_OPTS ] : [])
                            .withOptions(env.BUILD_MVN_OPTS_CURRENT ? [ env.BUILD_MVN_OPTS_CURRENT ] : [])
                            .inDirectory(getRepoName())
                            .skipTests(true)
                            .withProperty('full')
                            .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                            .run('clean install')
                    }
                    uploadFileMgmt(getRepoName())
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode()
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Promote', "[${getBuildBranch()}] Drools", [env.DROOLS_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties() {
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != '') {
        if (!deployUrl.endsWith('/')) {
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}

boolean hasDeployProperty(String key) {
    return deployProperties[key] != null
}

String getDeployProperty(String key) {
    if (hasDeployProperty(key)) {
        return deployProperties[key]
    }
    return ''
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey) {
    if (params[paramKey] != '') {
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

String getRepoName() {
    return env.REPO_NAME
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorPushCredsId() {
    return env.GIT_AUTHOR_PUSH_CREDS_ID
}

String getDeployPrLink() {
    return getDeployProperty("${getRepoName()}.pr.link")
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false, getGitAuthorCredsId()))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
}

void mergeAndPush(String prLink) {
    if (prLink) {
        githubscm.mergePR(prLink, getGitAuthorCredsId())
        githubscm.pushObject('origin', getBuildBranch(), getGitAuthorPushCredsId())
    }
}

void tagLatest() {
    if (getGitTag()) {
        githubscm.tagLocalAndRemoteRepository('origin', getGitTag(), getGitAuthorPushCredsId(), env.BUILD_TAG, true)
    }
}

MavenCommand getMavenCommand() {
    mvnCmd = new MavenCommand(this, ['-fae', '-ntp'])
                    .withOptions(env.BUILD_MVN_OPTS ? [ env.BUILD_MVN_OPTS ] : [])
    if (env.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', env.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

void uploadFileMgmt(String directory) {
    if (isNotTestingBuild()) {
        echo "upload binaries and docs for ${directory}"
        dir(directory) {
            sshagent(['drools-filemgmt']) {
                sh "script/release/upload_filemgmt.sh ${getProjectVersion()}"
            }
        }
    } else {
        echo 'No uploadFileMgmt due to testing build'
    }
}

boolean isNotTestingBuild() {
    return getGitAuthor() == 'apache'
}

boolean isMainStream() {
    return env.DROOLS_STREAM == 'main'
}
