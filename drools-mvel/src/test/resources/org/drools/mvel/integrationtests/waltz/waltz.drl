/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

//created on: 25/03/2006
package org.benchmarks.waltz

import org.drools.mvel.integrationtests.waltz.Stage
import org.drools.mvel.integrationtests.waltz.Line
import org.drools.mvel.integrationtests.waltz.Edge
import org.drools.mvel.integrationtests.waltz.Junction
import org.drools.mvel.integrationtests.waltz.WaltzUtil
import org.drools.mvel.integrationtests.waltz.Junction
import org.drools.mvel.integrationtests.waltz.WaltzUtil

global java.io.PrintStream sysout;

// the starting rule
rule "begin waltz"
    when
        $stage : Stage(value == Stage.START)
    then
        insert (new Line( 122,  107));
        insert (new Line( 107, 2207));
        insert (new Line(2207, 3204));
        insert (new Line(3204, 6404));
        insert (new Line(2216, 2207));
        insert (new Line(3213, 3204));
        insert (new Line(2216, 3213));
        insert (new Line( 107, 2601));
        insert (new Line(2601, 7401));
        insert (new Line(6404, 7401));
        insert (new Line(3213, 6413));
        insert (new Line(6413, 6404));
        insert (new Line(7416, 7401));
        insert (new Line(5216, 6413));
        insert (new Line(2216, 5216));
        insert (new Line( 122, 5222));
        insert (new Line(5222, 7416));
        insert (new Line(5222, 5216));
        $stage.setValue(Stage.DUPLICATE);
        update ( $stage );
        //sysout.println("Waltz started");
        //sysout.println("Stage: duplicate");
end

//If the duplicate flag is set, and there is still a line in WM, delete the line
//and add two edges. One edge runs from p1 to p2 and the other runs from p2 to
//p1.  We then plot the edge.
rule "reverse edges"
    when
        Stage(value == Stage.DUPLICATE)
        $line : Line ( $p1:p1, $p2:p2 )
    then
        //sysout.println("Draw "+$p1+" "+$p2);
        insert( new Edge ( $p1, $p2, false, Edge.NIL, false ) );
        insert( new Edge ( $p2, $p1, false, Edge.NIL, false ) );
        delete( $line );
end

//If the duplicating flag is set, and there are no more lines, then remove the
//duplicating flag and set the make junctions flag.
rule "reversing done" salience -10
    when
        $stage: Stage ( value == Stage.DUPLICATE )
        not ( Line() )
    then
        modify( $stage ) {
            setValue( Stage.DETECT_JUNCTIONS );
        }
        //sysout.println("reversing done");
end

//If three edges meet at a point and none of them have already been joined in
//a junction, then make the corresponding type of junction and label the
//edges joined.  This production calls make-3_junction to determine
//what type of junction it is based on the angles inscribed by the
//intersecting edges
rule "make 3 junction" salience 10
    when
        Stage ( value == Stage.DETECT_JUNCTIONS )
        $edge1: Edge( $basePoint:p1, $edge1P2:p2, joined==false )
        $edge2: Edge( p1==$basePoint, $edge2P2:p2 != $edge1P2, joined == false )
        $edge3: Edge( p1==$basePoint, $edge3P2:p2 != $edge1P2, p2 != $edge2P2, joined == false )
    then
        Junction junction = WaltzUtil.make_3_junction( $basePoint, $edge1P2, $edge2P2, $edge3P2 );
        insert( junction );
        $edge1.setJoined(true);
        $edge2.setJoined(true);
        $edge3.setJoined(true);
        update( $edge1 );
        update( $edge2 );
        update( $edge3 );
        //sysout.println("make 3 junction");
end

//If two, and only two, edges meet that have not already been joined, then
//the junction is an "L"
rule "make L"
    when
        Stage ( value == Stage.DETECT_JUNCTIONS )
        $edge1: Edge( $basePoint:p1, $edge1P2:p2, joined==false )
        $edge2: Edge( p1==$basePoint, $edge2P2:p2 != $edge1P2, joined == false )
        not Edge( p1==$basePoint, p2 != $edge1P2, p2 != $edge2P2 )
    then
        insert( new Junction($edge1P2, $edge2P2, 0, $basePoint, Junction.L) );
        $edge1.setJoined(true);
        $edge2.setJoined(true);
        update( $edge1 );
        update( $edge2 );
        //sysout.println("make L");
end

//If the detect junctions flag is set, and there are no more un_joined edges,
//set the find_initial_boundary flag
rule "detecting done" salience -10
    when
        $stage : Stage ( value == Stage.DETECT_JUNCTIONS )
     then
         $stage.setValue( Stage.FIND_INITIAL_BOUNDARY );
         update( $stage );
        //sysout.println("detecting done");
end
