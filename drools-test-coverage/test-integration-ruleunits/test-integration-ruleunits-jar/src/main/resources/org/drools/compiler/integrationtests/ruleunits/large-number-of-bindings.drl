/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.drools.compiler.integrationtests.ruleunits;

unit NumericUnit;

rule "populate units"
    then
        number1.set(1);
        number2.set(1);
        number3.set(1);
        number4.set(1);
        number5.set(1);
        number6.set(1);
        number7.set(1);
        number8.set(1);
        number9.set(1);
        number10.set(1);
        number11.set(1);
        number12.set(1);
        number13.set(1);
        number14.set(1);
        number15.set(1);
        number16.set(1);
        number17.set(1);
        number18.set(1);
        number19.set(1);
        number20.set(1);
        number21.set(1);
        number22.set(1);
        number23.set(1);
        number24.set(1);
        number25.set(1);
        number26.set(1);
end

rule "sum"
    when
        $n1: /number1
        $n2: /number2
        $n3: /number3
        $n4: /number4
        $n5: /number5
        $n6: /number6
        $n7: /number7
        $n8: /number8
        $n9: /number9
        $n10: /number10
        $n11: /number11
        $n12: /number12
        $n13: /number13
        $n14: /number14
        $n15: /number15
        $n16: /number16
        $n17: /number17
        $n18: /number18
        $n19: /number19
        $n20: /number20
        $n21: /number21
        $n22: /number22
        $n23: /number23
        $n24: /number24
        $n25: /number25
        $n26: /number26
        $partialSum1: Integer() from sum(new Integer[]{$n1 , $n2 , $n3 , $n4 , $n5 , $n6 , $n7 , $n8 , $n9 , $n10 , $n11})
        $partialSum2: Integer() from sum(new Integer[]{$n12 , $n13 , $n14 , $n15 , $n16 , $n17 , $n18 , $n19 , $n20 , $n21 , $n22})
        $partialSum3: Integer() from sum(new Integer[]{$n23 , $n24 , $n25 , $n26 })
    then
        System.out.println("Numbers present: " + $n1 + ", " + $n2 + ", " + $n3 + ", " + $n4 + ", " + $n5 + ", " + $n6 + ", " + $n7 + ", " + $n8 + ", " + $n9 + ", " + $n10 + ", " + $n11 + ", " + $n12 + ", " + $n13 + ", " + $n14 + ", " + $n15 + ", " + $n16 + ", " + $n17 + ", " + $n18 + ", " + $n19 + ", " + $n20 + ", " + $n21 + ", " + $n22 + ", " + $n23 + ", " + $n24 + ", " + $n25 + ", " + $n26 + ", " + ", sum: " + $partialSum1+$partialSum2+$partialSum3);
        result.add($partialSum1+$partialSum2+$partialSum3);
end

function Integer sum(Integer[] numbers) {
    Integer sum = 0;
    for (Integer number : numbers) {
        sum += number;
    }
    return sum;
}