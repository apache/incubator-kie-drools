<?xml version="1.0" encoding="UTF-8"?>
<semantic:definitions xmlns="https://www.drools.org/kie-dmn"
                      xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/"
                      xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/"
                      xmlns:dmndi="http://www.omg.org/spec/DMN/20180521/DMNDI/"
                      xmlns:feel="http://www.omg.org/spec/DMN/20180521/FEEL/"
                      xmlns:kie="https://www.drools.org/kie-dmn"
                      xmlns:semantic="http://www.omg.org/spec/DMN/20180521/MODEL/"
                      id="_0019_flight_rebooking"
                      name="0019-flight-rebooking"
                      namespace="https://www.drools.org/kie-dmn">
   <semantic:description>
        DISCLAIMER: this is a counter example on how to implement a DMN model.
                    Although it is executable and returns the correct result,
                    the use of a single decision node with a very long and complex
                    FEEL expression, makes the model hard to read, understand
                    and maintain.

        KIDS, don't try this at home! ;)
    </semantic:description>
   <semantic:itemDefinition id="_tFlight" name="tFlight">
      <semantic:itemComponent id="_tFlight_Flight" name="Flight Number">
         <semantic:typeRef>string</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tFlight_From" name="From">
         <semantic:typeRef>string</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tFlight_To" name="To">
         <semantic:typeRef>string</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tFlight_Dep" name="Departure">
         <semantic:typeRef>dateTime</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tFlight_Arr" name="Arrival">
         <semantic:typeRef>dateTime</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tFlight_Capacity" name="Capacity">
         <semantic:typeRef>number</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tFlight_Status" name="Status">
         <semantic:typeRef>string</semantic:typeRef>
      </semantic:itemComponent>
   </semantic:itemDefinition>
   <semantic:itemDefinition id="_tFlightTable" isCollection="true" name="tFlightTable">
      <semantic:typeRef>tFlight</semantic:typeRef>
   </semantic:itemDefinition>
   <semantic:itemDefinition id="_tPassenger" name="tPassenger">
      <semantic:itemComponent id="_tPassenger_Name" name="Name">
         <semantic:typeRef>string</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tPassenger_Status" name="Status">
         <semantic:typeRef>string</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tPassenger_Miles" name="Miles">
         <semantic:typeRef>number</semantic:typeRef>
      </semantic:itemComponent>
      <semantic:itemComponent id="_tPassenger_Flight" name="Flight Number">
         <semantic:typeRef>string</semantic:typeRef>
      </semantic:itemComponent>
   </semantic:itemDefinition>
   <semantic:itemDefinition id="_tPassengerTable" isCollection="true" name="tPassengerTable">
      <semantic:typeRef>tPassenger</semantic:typeRef>
   </semantic:itemDefinition>
   <semantic:inputData id="i_Flight_List" name="Flight List">
      <semantic:variable name="Flight List" typeRef="tFlightTable"/>
   </semantic:inputData>
   <semantic:inputData id="i_Passenger_List" name="Passenger List">
      <semantic:variable name="Passenger List" typeRef="tPassengerTable"/>
   </semantic:inputData>
   <semantic:decision name="Rebooked Passengers" id="d_RebookedPassengers">
      <semantic:variable name="Rebooked Passengers" typeRef="tPassengerTable"/>
      <semantic:informationRequirement>
         <semantic:requiredInput href="#i_Passenger_List"/>
      </semantic:informationRequirement>
      <semantic:informationRequirement>
         <semantic:requiredInput href="#i_Flight_List"/>
      </semantic:informationRequirement>
      <semantic:literalExpression>
         <semantic:text>
                {
                    // creating the status priority decision table:
                    status priority : decision table( 
                        outputs: "status priority",
                        input expression list: ["Status"],
                        rule list: [
                            [ "gold", "1" ],
                            [ "silver", "2" ],
                            [ "bronze", "3" ] ],
                        hit policy: "U"
                    ),
                    
                    // sorting the waiting list according to priorities
                    Cancelled Flights : Flight List[ Status = "cancelled" ].Flight Number,
                    Waiting List : Passenger List[ list contains( Cancelled Flights, Flight Number ) ],
                    passenger priority : function( Passenger1, Passenger2 ) 
                        status priority( Passenger1.Status ) &lt; status priority( Passenger2.Status ) or
                        ( status priority( Passenger1.Status ) = status priority( Passenger2.Status ) and 
                        Passenger1.Miles &gt; Passenger2.Miles ) ,
                    Prioritized Waiting List : sort( Waiting List, passenger priority ),
                    
                    // defining the functions to assign passengers to new flights
                    has capacity : function( flight, rebooked list ) flight.Capacity &gt; count( rebooked list[ Flight Number = flight.Flight Number ] ),
                    
                    rebooked flights : function( Waiting, Rebooked, Flights ) {
                        Passenger : Waiting[1],
                        Original Flight : Flights[ Flight Number = Passenger.Flight Number ][1],
                        Best Alternate Flight : Flights[ From = Original Flight.From and 
                                                         To = Original Flight.To and
                                                         Departure &gt; Original Flight.Departure and
                                                         Status = "scheduled" and
                                                         has capacity( item, Rebooked ) ][1] ,
                        New Flight : {
                                         Name : Passenger.Name,
                                         Status : Passenger.Status,
                                         Miles : Passenger.Miles,
                                         Flight Number : Best Alternate Flight.Flight Number
                                     },
                        result : if count( Waiting ) &gt; 1 then
                                     rebooked flights( remove( Waiting, 1 ),
                                                       append( Rebooked, New Flight ),
                                                       Flights )
                                 else 
                                     append( Rebooked, New Flight ) 
                    }.result,
                    
                    // assigning the passengers to new flights
                    result : rebooked flights( Prioritized Waiting List, [], Flight List )
                }.result
            </semantic:text>
      </semantic:literalExpression>
   </semantic:decision>
</semantic:definitions>
