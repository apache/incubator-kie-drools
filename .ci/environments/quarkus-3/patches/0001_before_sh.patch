diff --git a/build-parent/pom.xml b/build-parent/pom.xml
index ba78a93374..acb0a5ff7e 100644
--- a/build-parent/pom.xml
+++ b/build-parent/pom.xml
@@ -40,22 +40,22 @@
     <version.commons-logging>1.1.1</version.commons-logging>
     <version.commons-io>2.11.0</version.commons-io>
     <version.common-text>1.10.0</version.common-text>
-    <version.com.fasterxml.jackson>2.15.2</version.com.fasterxml.jackson>
-    <version.com.fasterxml.jackson.databind>2.15.2</version.com.fasterxml.jackson.databind>
-    <version.com.fasterxml.jackson.annotations>2.15.2</version.com.fasterxml.jackson.annotations>
+    <version.com.fasterxml.jackson>2.14.2</version.com.fasterxml.jackson>
+    <version.com.fasterxml.jackson.databind>2.14.2</version.com.fasterxml.jackson.databind>
+    <version.com.fasterxml.jackson.annotations>2.14.2</version.com.fasterxml.jackson.annotations>
     <version.com.github.victools>4.31.0</version.com.github.victools> <!-- victools should align with Jackson if possible -->
     <version.com.miglayout>3.7.4</version.com.miglayout>
     <version.domino-slf4j-logger>1.0.1</version.domino-slf4j-logger>
     <version.com.google.protobuf>3.22.0</version.com.google.protobuf>
-    <version.com.h2database>2.2.220</version.com.h2database>
+    <version.com.h2database>2.1.214</version.com.h2database>
     <version.com.networknt.json-schema-validator>1.0.86</version.com.networknt.json-schema-validator>
     <version.com.sun.xml.bind>2.3.0</version.com.sun.xml.bind>
     <version.com.thoughtworks.xstream>1.4.20</version.com.thoughtworks.xstream>
     <version.guru.nidi>0.18.0</version.guru.nidi>
     <version.info.picocli>4.7.1</version.info.picocli>
-    <version.io.micrometer>1.10.2</version.io.micrometer>
-    <version.io.quarkus>2.16.7.Final</version.io.quarkus>
-    <version.io.smallrye.openapi.core>3.1.1</version.io.smallrye.openapi.core>
+    <version.io.micrometer>1.10.5</version.io.micrometer>
+    <version.io.quarkus>3.0.0.Final</version.io.quarkus>
+    <version.io.smallrye.openapi.core>3.3.2</version.io.smallrye.openapi.core>
     <version.it.unimi.dsi.fastutil>8.5.11</version.it.unimi.dsi.fastutil>
     <version.junit>4.13.1</version.junit>
     <version.net.java.dev.glazedlists>1.8.0</version.net.java.dev.glazedlists>
@@ -68,42 +68,42 @@
     <version.org.apache.httpcomponents.httpcore>4.4.15</version.org.apache.httpcomponents.httpcore>
     <version.org.apache.maven>3.8.6</version.org.apache.maven>
     <version.org.apache.maven.resolver>1.7.3</version.org.apache.maven.resolver>
-    <version.org.apache.maven.wagon>3.5.1</version.org.apache.maven.wagon>
+    <version.org.apache.maven.wagon>3.5.3</version.org.apache.maven.wagon>
     <version.org.apache.pdfbox>2.0.28</version.org.apache.pdfbox>
     <version.org.apache.poi>5.1.0</version.org.apache.poi>
-    <version.org.apache.tomcat.tomcat-dbcp>9.0.21</version.org.apache.tomcat.tomcat-dbcp>
+    <version.org.apache.tomcat.tomcat-dbcp>10.1.7</version.org.apache.tomcat.tomcat-dbcp>
     <version.org.assertj>3.23.1</version.org.assertj>
     <version.org.eclipse.jdt>3.33.0</version.org.eclipse.jdt>
     <version.org.freemarker>2.3.32</version.org.freemarker>
-    <version.org.glassfish.jaxb>2.3.6</version.org.glassfish.jaxb>
+    <version.org.glassfish.jaxb>4.0.3</version.org.glassfish.jaxb>
     <!--This needs to be in sync with JUnit-->
     <version.org.hamcrest>1.3</version.org.hamcrest>
-    <version.org.hibernate>5.6.12.Final</version.org.hibernate>
+    <version.org.hibernate>6.2.0.Final</version.org.hibernate>
     <version.org.hsqldb>2.3.0</version.org.hsqldb>
     <version.org.infinispan>14.0.13.Final</version.org.infinispan>
     <version.org.javassist>3.26.0-GA</version.org.javassist>
-    <version.org.jboss.narayana.tomcat>5.13.1.Final</version.org.jboss.narayana.tomcat>
+    <version.org.jboss.narayana.tomcat>6.0.0.Final</version.org.jboss.narayana.tomcat>
     <version.org.jboss.transaction.spi>7.6.1.Final</version.org.jboss.transaction.spi>
     <version.org.jboss.weld.weld>3.1.6.Final</version.org.jboss.weld.weld>
-    <version.org.eclipse.microprofile.config>2.0.1</version.org.eclipse.microprofile.config>
-    <version.jakarta.enterprise.cdi-api>2.0.2</version.jakarta.enterprise.cdi-api>
-    <version.jakarta.activation>1.2.1</version.jakarta.activation>
-    <version.jakarta.activation-api>1.2.1</version.jakarta.activation-api>
-    <version.jakarta.inject-api>1.0</version.jakarta.inject-api>
-    <version.jakarta.annotation-api>1.3.5</version.jakarta.annotation-api>
+    <version.org.eclipse.microprofile.config>3.0.2</version.org.eclipse.microprofile.config>
+    <version.jakarta.enterprise.cdi-api>4.0.1</version.jakarta.enterprise.cdi-api>
+    <version.jakarta.activation>2.0.0</version.jakarta.activation>
+    <version.jakarta.activation-api>2.1.1</version.jakarta.activation-api>
+    <version.jakarta.inject-api>2.0.1</version.jakarta.inject-api>
+    <version.jakarta.annotation-api>2.1.1</version.jakarta.annotation-api>
     <version.jakarta.ejb-api>3.2.6</version.jakarta.ejb-api>
     <version.jakarta.servlet.jsp-api>2.3.6</version.jakarta.servlet.jsp-api>
     <version.jakarta.servlet.jsp.jstl-api>2.0.0</version.jakarta.servlet.jsp.jstl-api>
-    <version.jakarta.transaction-api>1.3.3</version.jakarta.transaction-api>
-    <version.jakarta.ws.rs-api>2.1.6</version.jakarta.ws.rs-api>
-    <version.jakarta.xml.ws-api>2.3.3</version.jakarta.xml.ws-api>
-    <version.jakarta.persistence-api>2.2.3</version.jakarta.persistence-api>
-    <version.jakarta.servlet-api>4.0.3</version.jakarta.servlet-api>
-    <version.jakarta.xml.bind-api>2.3.3</version.jakarta.xml.bind-api>
-    <version.jakarta.json.bind-api>1.0.2</version.jakarta.json.bind-api>
-    <version.jakarta.json>1.1.6</version.jakarta.json>
-    <version.jakarta.json-api>1.1.6</version.jakarta.json-api>
-    <version.org.jpmml.model>1.5.1</version.org.jpmml.model> <!-- jpmml-model BSD 3C license - ATTENTION 1.5.1 intentional, because 1.5.1 evaluators works with 1.5.1 -->
+    <version.jakarta.transaction-api>2.0.1</version.jakarta.transaction-api>
+    <version.jakarta.ws.rs-api>3.1.0</version.jakarta.ws.rs-api>
+    <version.jakarta.xml.ws-api>4.0.0</version.jakarta.xml.ws-api>
+    <version.jakarta.persistence-api>3.1.0</version.jakarta.persistence-api>
+    <version.jakarta.servlet-api>6.0.0</version.jakarta.servlet-api>
+    <version.jakarta.xml.bind-api>4.0.0</version.jakarta.xml.bind-api>
+    <version.jakarta.json.bind-api>3.0.0</version.jakarta.json.bind-api>
+    <version.jakarta.json>1.1.1</version.jakarta.json>
+    <version.jakarta.json-api>2.1.1</version.jakarta.json-api>
+    <version.org.jpmml.model>1.6.4</version.org.jpmml.model> <!-- jpmml-model BSD 3C license - ATTENTION 1.5.1 intentional, because 1.5.1 evaluators works with 1.5.1 -->
     <version.org.junit>5.9.2</version.org.junit>
     <version.org.mvel>2.5.0.Final</version.org.mvel>
     <version.org.powermock>2.0.7</version.org.powermock>
@@ -132,7 +132,7 @@
     <version.org.asciidoctor.asciidoctorj>2.2.0</version.org.asciidoctor.asciidoctorj>
     <version.org.asciidoctor.asciidoctorj-pdf>1.5.0</version.org.asciidoctor.asciidoctorj-pdf>
     <version.org.w3c.dom>2.3.0-jaxb-1.0.6</version.org.w3c.dom>
-    <version.org.mockito>4.11.0</version.org.mockito>
+    <version.org.mockito>5.2.0</version.org.mockito>
     <!-- Version of JMH -->
     <version.org.openjdk.jmh>1.21</version.org.openjdk.jmh>
 
@@ -151,10 +151,10 @@
     <version.surefire.plugin>2.22.1</version.surefire.plugin>
     <!-- Add for kie-maven-plugin -->
     <version.plugin.plugin>3.6.4</version.plugin.plugin>
-    <version.plugin.annotations>3.6.0</version.plugin.annotations>
+    <version.plugin.annotations>3.7.1</version.plugin.annotations>
     <version.artifact.transfer>0.9.1</version.artifact.transfer>
     <version.shared.utils>3.3.4</version.shared.utils>
-    <version.common.compress>1.22</version.common.compress>
+    <version.common.compress>1.23.0</version.common.compress>
     <version.common.exec>1.3</version.common.exec>
     <!-- -->
     <!-- Jacoco plugin configurations -->
@@ -182,16 +182,16 @@
 
     <version.net.byte-buddy>1.12.18</version.net.byte-buddy>
 
-    <version.org.postgresql>42.5.4</version.org.postgresql>
+    <version.org.postgresql>42.6.0</version.org.postgresql>
 
     <version.ch.obermuhlner>2.0.1</version.ch.obermuhlner>
     <version.io.smallrye.jandex>3.0.5</version.io.smallrye.jandex>
     <version.io.smallrye.jandex-maven-plugin>${version.io.smallrye.jandex}</version.io.smallrye.jandex-maven-plugin>
-    <version.org.eclipse.yasson>1.0.11</version.org.eclipse.yasson>
+    <version.org.eclipse.yasson>3.0.2</version.org.eclipse.yasson>
 
-    <version.com.github.javaparser>3.24.2</version.com.github.javaparser>
+    <version.com.github.javaparser>3.25.1</version.com.github.javaparser>
 
-    <version.com.google.guava>32.0.1-jre</version.com.google.guava>
+    <version.com.google.guava>31.1-jre</version.com.google.guava>
 
     <!-- JaCoCo coverage data file location -->
     <!--suppress UnresolvedMavenProperty -->
@@ -267,7 +267,7 @@
       </dependency>
       <dependency>
         <groupId>com.fasterxml.jackson.module</groupId>
-        <artifactId>jackson-module-jaxb-annotations</artifactId>
+        <artifactId>jackson-module-jakarta-xmlbind-annotations</artifactId>
         <version>${version.com.fasterxml.jackson.annotations}</version>
       </dependency>
       <dependency>
@@ -276,8 +276,8 @@
         <version>${version.com.fasterxml.jackson}</version>
       </dependency>
       <dependency>
-        <groupId>com.fasterxml.jackson.jaxrs</groupId>
-        <artifactId>jackson-jaxrs-json-provider</artifactId>
+        <groupId>com.fasterxml.jackson.jakarta.rs</groupId>
+        <artifactId>jackson-jakarta-rs-json-provider</artifactId>
         <version>${version.com.fasterxml.jackson}</version>
       </dependency>
       <dependency>
@@ -351,9 +351,9 @@
         <version>${version.com.sun.xml.bind}</version>
       </dependency>
       <dependency>
-        <groupId>com.sun.xml.bind</groupId>
-        <artifactId>jaxb-impl</artifactId>
-        <version>${version.com.sun.xml.bind}</version>
+        <groupId>org.glassfish.jaxb</groupId>
+        <artifactId>jaxb-runtime</artifactId>
+        <version>4.0.2</version>
       </dependency>
       <dependency>
         <groupId>com.sun.xml.bind</groupId>
@@ -403,8 +403,8 @@
       </dependency>
 
       <dependency>
-        <groupId>org.glassfish</groupId>
-        <artifactId>jakarta.json</artifactId>
+        <groupId>org.eclipse.parsson</groupId>
+        <artifactId>parsson</artifactId>
         <version>${version.jakarta.json}</version>
       </dependency>
       <dependency>
@@ -439,8 +439,8 @@
       </dependency>
 
       <dependency>
-        <groupId>com.sun.activation</groupId>
-        <artifactId>jakarta.activation</artifactId>
+        <groupId>org.eclipse.angus</groupId>
+        <artifactId>angus-activation</artifactId>
         <version>${version.jakarta.activation}</version>
       </dependency>
       <dependency>
@@ -775,12 +775,12 @@
       </dependency>
 
       <dependency>
-        <groupId>org.hibernate</groupId>
+        <groupId>org.hibernate.orm</groupId>
         <artifactId>hibernate-envers</artifactId>
         <version>${version.org.hibernate}</version>
       </dependency>
       <dependency>
-        <groupId>org.hibernate</groupId>
+        <groupId>org.hibernate.orm</groupId>
         <artifactId>hibernate-jpamodelgen</artifactId>
         <version>${version.org.hibernate}</version>
         <exclusions>
@@ -1099,7 +1099,7 @@
       </dependency>
 
       <dependency>
-        <groupId>org.hibernate</groupId>
+        <groupId>org.hibernate.orm</groupId>
         <artifactId>hibernate-core</artifactId>
         <version>${version.org.hibernate}</version>
         <exclusions>
@@ -1121,31 +1121,16 @@
           </exclusion>
         </exclusions>
       </dependency>
-      <dependency>
-        <groupId>org.hibernate</groupId>
-        <artifactId>hibernate-entitymanager</artifactId>
-        <version>${version.org.hibernate}</version>
-        <exclusions>
-          <exclusion>
-            <groupId>javax.persistence</groupId>
-            <artifactId>javax.persistence-api</artifactId>
-          </exclusion>
-          <exclusion>
-            <groupId>org.jboss.spec.javax.transaction</groupId>
-            <artifactId>jboss-transaction-api_1.2_spec</artifactId>
-          </exclusion>
-        </exclusions>
-      </dependency>
       <!-- Required for Errai Dynamic Bean validation  -->
       <dependency>
-        <groupId>javax.validation</groupId>
-        <artifactId>validation-api</artifactId>
-        <version>${version.javax.validation}</version>
+        <groupId>jakarta.validation</groupId>
+        <artifactId>jakarta.validation-api</artifactId>
+        <version>3.0.2</version>
       </dependency>
       <dependency>
-        <groupId>javax.validation</groupId>
-        <artifactId>validation-api</artifactId>
-        <version>${version.javax.validation}</version>
+        <groupId>jakarta.validation</groupId>
+        <artifactId>jakarta.validation-api</artifactId>
+        <version>3.0.2</version>
         <classifier>sources</classifier>
       </dependency>
 
diff --git a/drools-base/pom.xml b/drools-base/pom.xml
index 759d1dc2ad..a5fb7a622c 100644
--- a/drools-base/pom.xml
+++ b/drools-base/pom.xml
@@ -63,9 +63,10 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>jakarta.xml.bind</groupId>
diff --git a/drools-commands/src/main/java/org/drools/commands/GetVariableCommand.java b/drools-commands/src/main/java/org/drools/commands/GetVariableCommand.java
index 281582bfd3..800ec105c3 100644
--- a/drools-commands/src/main/java/org/drools/commands/GetVariableCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/GetVariableCommand.java
@@ -16,11 +16,11 @@
 
 package org.drools.commands;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbListAdapter.java b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbListAdapter.java
index 90fbda1b37..0578da7313 100644
--- a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbListAdapter.java
+++ b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbListAdapter.java
@@ -24,7 +24,7 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 import org.drools.commands.jaxb.JaxbListWrapper.JaxbWrapperType;
 import org.slf4j.Logger;
diff --git a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbListWrapper.java b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbListWrapper.java
index 92d5dd6811..5e89a69b7f 100644
--- a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbListWrapper.java
+++ b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbListWrapper.java
@@ -16,11 +16,11 @@
 
 package org.drools.commands.jaxb;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 /**
  * This is actually a wrapper for the following collections:
diff --git a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbMapAdapter.java b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbMapAdapter.java
index 544431b350..5fb0c9edd5 100644
--- a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbMapAdapter.java
+++ b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbMapAdapter.java
@@ -21,7 +21,7 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
diff --git a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbObjectObjectPair.java b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbObjectObjectPair.java
index 292a2dfd92..b0ad67a888 100644
--- a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbObjectObjectPair.java
+++ b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbObjectObjectPair.java
@@ -16,11 +16,11 @@
 
 package org.drools.commands.jaxb;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 @XmlAccessorType(XmlAccessType.NONE)
 public class JaxbObjectObjectPair {
diff --git a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbStringObjectPair.java b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbStringObjectPair.java
index 97c1d42a5e..6f4eb3df3d 100644
--- a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbStringObjectPair.java
+++ b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbStringObjectPair.java
@@ -16,12 +16,12 @@
 
 package org.drools.commands.jaxb;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlSeeAlso;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlSeeAlso;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 @XmlAccessorType(XmlAccessType.NONE)
 @XmlSeeAlso({JaxbListWrapper.class})
diff --git a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbUnknownAdapter.java b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbUnknownAdapter.java
index 79b902ab82..f9c59dac37 100644
--- a/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbUnknownAdapter.java
+++ b/drools-commands/src/main/java/org/drools/commands/jaxb/JaxbUnknownAdapter.java
@@ -29,7 +29,7 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 import org.drools.core.QueryResultsImpl;
 import org.drools.core.common.DisconnectedFactHandle;
diff --git a/drools-commands/src/main/java/org/drools/commands/jaxb/ObjectFactory.java b/drools-commands/src/main/java/org/drools/commands/jaxb/ObjectFactory.java
index b76eb0770f..12a3ee104b 100644
--- a/drools-commands/src/main/java/org/drools/commands/jaxb/ObjectFactory.java
+++ b/drools-commands/src/main/java/org/drools/commands/jaxb/ObjectFactory.java
@@ -16,7 +16,7 @@
 
 package org.drools.commands.jaxb;
 
-import javax.xml.bind.annotation.XmlRegistry;
+import jakarta.xml.bind.annotation.XmlRegistry;
 
 @XmlRegistry
 public class ObjectFactory {
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/AdvanceSessionTimeCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/AdvanceSessionTimeCommand.java
index c757b616b8..c61788017d 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/AdvanceSessionTimeCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/AdvanceSessionTimeCommand.java
@@ -17,10 +17,10 @@
 package org.drools.commands.runtime;
 
 import java.util.concurrent.TimeUnit;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.commands.IdentifiableResult;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/BatchExecutionCommandImpl.java b/drools-commands/src/main/java/org/drools/commands/runtime/BatchExecutionCommandImpl.java
index d40c218877..5ed7409a8b 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/BatchExecutionCommandImpl.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/BatchExecutionCommandImpl.java
@@ -18,13 +18,13 @@ package org.drools.commands.runtime;
 
 import java.util.ArrayList;
 import java.util.List;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElements;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElements;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 import org.drools.commands.fluent.Batch;
 import org.drools.commands.runtime.pmml.ApplyPmmlModelCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/DisposeCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/DisposeCommand.java
index b8e8c07365..a0fdcf64d9 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/DisposeCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/DisposeCommand.java
@@ -16,9 +16,9 @@
 
 package org.drools.commands.runtime;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.commands.impl.NotTransactionalCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/ExecutionResultImpl.java b/drools-commands/src/main/java/org/drools/commands/runtime/ExecutionResultImpl.java
index 0a0b17d9fa..86868a62e2 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/ExecutionResultImpl.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/ExecutionResultImpl.java
@@ -20,11 +20,11 @@ import java.io.Serializable;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.jaxb.JaxbMapAdapter;
 import org.kie.api.runtime.ExecutionResults;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/ExecutionResultsMap.java b/drools-commands/src/main/java/org/drools/commands/runtime/ExecutionResultsMap.java
index d0295f1f1c..1c8cd6376a 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/ExecutionResultsMap.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/ExecutionResultsMap.java
@@ -19,7 +19,7 @@ package org.drools.commands.runtime;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.jaxb.JaxbMapAdapter;
 
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/FlatQueryResults.java b/drools-commands/src/main/java/org/drools/commands/runtime/FlatQueryResults.java
index d7ce35d78f..6c5f5a82b8 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/FlatQueryResults.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/FlatQueryResults.java
@@ -23,13 +23,13 @@ import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSeeAlso;
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSeeAlso;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.jaxb.JaxbListAdapter;
 import org.drools.commands.jaxb.JaxbListWrapper;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/GetFactCountCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/GetFactCountCommand.java
index 71053ae9aa..3fb3666d0f 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/GetFactCountCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/GetFactCountCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/GetGlobalCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/GetGlobalCommand.java
index cba80658f7..1602e121b7 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/GetGlobalCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/GetGlobalCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.commands.IdentifiableResult;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/GetIdCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/GetIdCommand.java
index 5ac74b60bf..5e1942717e 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/GetIdCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/GetIdCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/GetSessionTimeCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/GetSessionTimeCommand.java
index fd4f9744a8..539d98af9d 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/GetSessionTimeCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/GetSessionTimeCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.commands.IdentifiableResult;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/ObjectFactory.java b/drools-commands/src/main/java/org/drools/commands/runtime/ObjectFactory.java
index 39592aabb1..00a069a690 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/ObjectFactory.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/ObjectFactory.java
@@ -16,7 +16,7 @@
 
 package org.drools.commands.runtime;
 
-import javax.xml.bind.annotation.XmlRegistry;
+import jakarta.xml.bind.annotation.XmlRegistry;
 
 
 @XmlRegistry
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/QueryResultsJaxbAdapter.java b/drools-commands/src/main/java/org/drools/commands/runtime/QueryResultsJaxbAdapter.java
index d0ef1d951c..8fcfb4074b 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/QueryResultsJaxbAdapter.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/QueryResultsJaxbAdapter.java
@@ -16,7 +16,7 @@
 
 package org.drools.commands.runtime;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 import org.drools.core.QueryResultsImpl;
 
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/SetGlobalCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/SetGlobalCommand.java
index 08e5d4a98c..267164b8ff 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/SetGlobalCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/SetGlobalCommand.java
@@ -16,12 +16,12 @@
 
 package org.drools.commands.runtime;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.commands.jaxb.JaxbUnknownAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/pmml/ApplyPmmlModelCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/pmml/ApplyPmmlModelCommand.java
index 1e91f79151..660a4886da 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/pmml/ApplyPmmlModelCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/pmml/ApplyPmmlModelCommand.java
@@ -18,12 +18,12 @@ package org.drools.commands.runtime.pmml;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElements;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElements;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.commands.IdentifiableResult;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/AbortProcessInstanceCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/AbortProcessInstanceCommand.java
index 6b40c5f256..d94d08f719 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/AbortProcessInstanceCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/AbortProcessInstanceCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.process;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/AbortWorkItemCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/AbortWorkItemCommand.java
index 5b4bcfa3d8..ee4edad76b 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/AbortWorkItemCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/AbortWorkItemCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.process;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/CompleteWorkItemCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/CompleteWorkItemCommand.java
index 833fb1bb0e..e5d289f5d7 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/CompleteWorkItemCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/CompleteWorkItemCommand.java
@@ -19,12 +19,12 @@ package org.drools.commands.runtime.process;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.jaxb.JaxbMapAdapter;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/CreateCorrelatedProcessInstanceCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/CreateCorrelatedProcessInstanceCommand.java
index c71fb3bf36..e42439fd6e 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/CreateCorrelatedProcessInstanceCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/CreateCorrelatedProcessInstanceCommand.java
@@ -19,12 +19,12 @@ package org.drools.commands.runtime.process;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.commands.jaxb.JaxbMapAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/CreateProcessInstanceCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/CreateProcessInstanceCommand.java
index 6757e315f7..12618cd571 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/CreateProcessInstanceCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/CreateProcessInstanceCommand.java
@@ -19,12 +19,12 @@ package org.drools.commands.runtime.process;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.commands.jaxb.JaxbMapAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessEventListenersCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessEventListenersCommand.java
index 47f0b5ea64..b643f04f33 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessEventListenersCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessEventListenersCommand.java
@@ -17,9 +17,9 @@
 package org.drools.commands.runtime.process;
 
 import java.util.Collection;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.event.process.ProcessEventListener;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessIdsCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessIdsCommand.java
index 893fec0e55..321e751f68 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessIdsCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessIdsCommand.java
@@ -18,10 +18,10 @@ package org.drools.commands.runtime.process;
 
 import java.util.ArrayList;
 import java.util.List;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.definition.process.Process;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstanceByCorrelationKeyCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstanceByCorrelationKeyCommand.java
index f04f897b55..1db39272e8 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstanceByCorrelationKeyCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstanceByCorrelationKeyCommand.java
@@ -16,12 +16,12 @@
 
 package org.drools.commands.runtime.process;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstanceCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstanceCommand.java
index 5884fb86a5..e897b05d4c 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstanceCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstanceCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.process;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstancesCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstancesCommand.java
index ea9550c78f..b0a3b876e8 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstancesCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetProcessInstancesCommand.java
@@ -18,10 +18,10 @@ package org.drools.commands.runtime.process;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetWorkItemCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetWorkItemCommand.java
index 2aef697a60..a699cbc342 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetWorkItemCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetWorkItemCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.process;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.core.process.WorkItem;
 import org.drools.core.process.WorkItemManager;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetWorkItemIdsCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetWorkItemIdsCommand.java
index 08d5b3dc8c..8b767ffd06 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/GetWorkItemIdsCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/GetWorkItemIdsCommand.java
@@ -19,10 +19,10 @@ package org.drools.commands.runtime.process;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.core.process.WorkItem;
 import org.drools.core.process.WorkItemManager;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/ObjectFactory.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/ObjectFactory.java
index 930a531761..d32ce592e7 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/ObjectFactory.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/ObjectFactory.java
@@ -17,7 +17,7 @@
 package org.drools.commands.runtime.process;
 
 
-import javax.xml.bind.annotation.XmlRegistry;
+import jakarta.xml.bind.annotation.XmlRegistry;
 
 
 @XmlRegistry
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/ReTryWorkItemCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/ReTryWorkItemCommand.java
index aaf8c067f7..5e95c7456b 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/ReTryWorkItemCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/ReTryWorkItemCommand.java
@@ -19,11 +19,11 @@ package org.drools.commands.runtime.process;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.core.process.WorkItemManager;
 import org.drools.commands.jaxb.JaxbMapAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/RegisterWorkItemHandlerCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/RegisterWorkItemHandlerCommand.java
index c82fbefe24..c143e422e7 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/RegisterWorkItemHandlerCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/RegisterWorkItemHandlerCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.process;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.jaxb.JaxbUnknownAdapter;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/SetProcessInstanceVariablesCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/SetProcessInstanceVariablesCommand.java
index 7e56dd5259..68624da634 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/SetProcessInstanceVariablesCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/SetProcessInstanceVariablesCommand.java
@@ -19,12 +19,12 @@ package org.drools.commands.runtime.process;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.jaxb.JaxbMapAdapter;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/SignalEventCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/SignalEventCommand.java
index 3da07dc90d..f7c0e8f44c 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/SignalEventCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/SignalEventCommand.java
@@ -16,12 +16,12 @@
 
 package org.drools.commands.runtime.process;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.jaxb.JaxbUnknownAdapter;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/StartCorrelatedProcessCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/StartCorrelatedProcessCommand.java
index 105e02086b..baba637fb5 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/StartCorrelatedProcessCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/StartCorrelatedProcessCommand.java
@@ -19,13 +19,13 @@ package org.drools.commands.runtime.process;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.commands.jaxb.JaxbMapAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessCommand.java
index c4c40115ee..ec4136106a 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessCommand.java
@@ -19,14 +19,14 @@ package org.drools.commands.runtime.process;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAnyElement;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAnyElement;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.commands.jaxb.JaxbMapAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessFromNodeIdsCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessFromNodeIdsCommand.java
index 76fb682351..bac224ebf7 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessFromNodeIdsCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessFromNodeIdsCommand.java
@@ -18,12 +18,12 @@ package org.drools.commands.runtime.process;
 
 import java.util.List;
 import java.util.Map;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.kie.api.runtime.Context;
 import org.kie.api.runtime.ExecutionResults;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessInstanceCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessInstanceCommand.java
index 447c57795b..b6ecbb32dd 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessInstanceCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/process/StartProcessInstanceCommand.java
@@ -16,9 +16,9 @@
 
 package org.drools.commands.runtime.process;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/AgendaGroupSetFocusCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/AgendaGroupSetFocusCommand.java
index d511668f89..7d213ad9b0 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/AgendaGroupSetFocusCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/AgendaGroupSetFocusCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearActivationGroupCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearActivationGroupCommand.java
index 7c034b26a1..7d6b75348c 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearActivationGroupCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearActivationGroupCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearAgendaCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearAgendaCommand.java
index 0f09bf1434..1ca4445886 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearAgendaCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearAgendaCommand.java
@@ -16,9 +16,9 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearAgendaGroupCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearAgendaGroupCommand.java
index 86b7f492c0..edeb786eb5 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearAgendaGroupCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearAgendaGroupCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.runtime.Context;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearRuleFlowGroupCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearRuleFlowGroupCommand.java
index 70dec44eb7..f68322ccfe 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearRuleFlowGroupCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ClearRuleFlowGroupCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.core.common.ReteEvaluator;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteCommand.java
index 7523dcf517..ea80c2578b 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.drools.core.common.DisconnectedFactHandle;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteFromEntryPointCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteFromEntryPointCommand.java
index a19f4abb70..4f96b0b3bc 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteFromEntryPointCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteFromEntryPointCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
 
 import org.drools.core.common.DisconnectedFactHandle;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteObjectCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteObjectCommand.java
index 63ebc428b5..caf18188c4 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteObjectCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/DeleteObjectCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.util.StringUtils;
 import org.drools.commands.jaxb.JaxbUnknownAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/EnableAuditLogCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/EnableAuditLogCommand.java
index 1c1918de85..664049dd87 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/EnableAuditLogCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/EnableAuditLogCommand.java
@@ -1,9 +1,9 @@
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.KieServices;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/FireAllRulesCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/FireAllRulesCommand.java
index 9fcd43364f..422697929a 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/FireAllRulesCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/FireAllRulesCommand.java
@@ -16,12 +16,12 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAnyElement;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAnyElement;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.commands.jaxb.JaxbUnknownAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/FireUntilHaltCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/FireUntilHaltCommand.java
index ba9c3be15a..64dfba8874 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/FireUntilHaltCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/FireUntilHaltCommand.java
@@ -16,11 +16,11 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAnyElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAnyElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.core.common.InternalWorkingMemory;
 import org.drools.commands.jaxb.JaxbUnknownAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetAgendaEventListenersCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetAgendaEventListenersCommand.java
index 64c41a7e9f..2c471a3fd4 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetAgendaEventListenersCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetAgendaEventListenersCommand.java
@@ -17,7 +17,7 @@
 package org.drools.commands.runtime.rule;
 
 import java.util.Collection;
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.kie.api.command.ExecutableCommand;
 import org.kie.api.event.rule.AgendaEventListener;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetEntryPointCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetEntryPointCommand.java
index 81e14c3bac..60c3d79964 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetEntryPointCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetEntryPointCommand.java
@@ -16,7 +16,7 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.drools.commands.EntryPointCreator;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetEntryPointsCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetEntryPointsCommand.java
index 7351059acc..ae0dd5500a 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetEntryPointsCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetEntryPointsCommand.java
@@ -18,7 +18,7 @@ package org.drools.commands.runtime.rule;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.drools.commands.EntryPointCreator;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandleCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandleCommand.java
index 279c626671..1d44d1568e 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandleCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandleCommand.java
@@ -16,7 +16,7 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.drools.core.common.InternalFactHandle;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandleInEntryPointCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandleInEntryPointCommand.java
index 7ac7c37063..bd699452dd 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandleInEntryPointCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandleInEntryPointCommand.java
@@ -16,7 +16,7 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.drools.core.common.InternalFactHandle;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandlesCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandlesCommand.java
index cf6b2e5576..bac17fecc9 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandlesCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetFactHandlesCommand.java
@@ -18,9 +18,9 @@ package org.drools.commands.runtime.rule;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.drools.core.common.InternalFactHandle;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectCommand.java
index 9bd16c9616..bc075adb16 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectCommand.java
@@ -16,12 +16,12 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.core.common.DefaultFactHandle;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectInEntryPointCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectInEntryPointCommand.java
index c48f435a01..6f14ac93bb 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectInEntryPointCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectInEntryPointCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.core.common.DefaultFactHandle;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectsCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectsCommand.java
index 282b1dbb74..2f907120a2 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectsCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectsCommand.java
@@ -19,10 +19,10 @@ package org.drools.commands.runtime.rule;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.core.ClassObjectSerializationFilter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectsInEntryPointCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectsInEntryPointCommand.java
index 81de706c88..68a5f8ed29 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectsInEntryPointCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/GetObjectsInEntryPointCommand.java
@@ -19,9 +19,9 @@ package org.drools.commands.runtime.rule;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
 
 import org.drools.commands.IdentifiableResult;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertElementsCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertElementsCommand.java
index db23b36827..574f4efa2c 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertElementsCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertElementsCommand.java
@@ -19,11 +19,11 @@ package org.drools.commands.runtime.rule;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.commands.runtime.ExecutionResultImpl;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertObjectCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertObjectCommand.java
index c23a0d5cfe..12e737d408 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertObjectCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertObjectCommand.java
@@ -16,12 +16,12 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.core.common.DefaultFactHandle;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertObjectInEntryPointCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertObjectInEntryPointCommand.java
index 461a05f632..44131cfe6f 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertObjectInEntryPointCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/InsertObjectInEntryPointCommand.java
@@ -16,10 +16,10 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.core.common.DefaultFactHandle;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ModifyCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ModifyCommand.java
index 7acbe35e9f..02caedc595 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ModifyCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ModifyCommand.java
@@ -19,11 +19,11 @@ package org.drools.commands.runtime.rule;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.drools.base.base.CoreComponentsBuilder;
 import org.drools.core.common.DisconnectedFactHandle;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ObjectFactory.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ObjectFactory.java
index 44a4e47881..097d1def2c 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/ObjectFactory.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/ObjectFactory.java
@@ -16,7 +16,7 @@
 
 package org.drools.commands.runtime.rule;
 
-import javax.xml.bind.annotation.XmlRegistry;
+import jakarta.xml.bind.annotation.XmlRegistry;
 
 import org.drools.commands.runtime.rule.ModifyCommand.SetterImpl;
 
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/QueryCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/QueryCommand.java
index fed6d919b9..054191425e 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/QueryCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/QueryCommand.java
@@ -19,10 +19,10 @@ package org.drools.commands.runtime.rule;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
 
 import org.drools.commands.IdentifiableResult;
 import org.drools.commands.runtime.FlatQueryResults;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/UpdateCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/UpdateCommand.java
index c427ffc270..5e0f2ab414 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/UpdateCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/UpdateCommand.java
@@ -18,12 +18,12 @@ package org.drools.commands.runtime.rule;
 
 import java.util.Arrays;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSchemaType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.drools.core.common.DisconnectedFactHandle;
 import org.drools.commands.jaxb.JaxbUnknownAdapter;
diff --git a/drools-commands/src/main/java/org/drools/commands/runtime/rule/UpdateInEntryPointCommand.java b/drools-commands/src/main/java/org/drools/commands/runtime/rule/UpdateInEntryPointCommand.java
index 19c566794f..984f218d5f 100644
--- a/drools-commands/src/main/java/org/drools/commands/runtime/rule/UpdateInEntryPointCommand.java
+++ b/drools-commands/src/main/java/org/drools/commands/runtime/rule/UpdateInEntryPointCommand.java
@@ -18,8 +18,8 @@ package org.drools.commands.runtime.rule;
 
 import java.util.Arrays;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 
 import org.drools.core.common.DisconnectedFactHandle;
 import org.kie.api.command.ExecutableCommand;
diff --git a/drools-compiler/pom.xml b/drools-compiler/pom.xml
index fe25aeb02a..9492138d6b 100644
--- a/drools-compiler/pom.xml
+++ b/drools-compiler/pom.xml
@@ -108,9 +108,10 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>jakarta.xml.bind</groupId>
diff --git a/drools-compiler/src/main/java/org/drools/compiler/runtime/pipeline/impl/DroolsJaxbHelperProviderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/runtime/pipeline/impl/DroolsJaxbHelperProviderImpl.java
index 1fcab7e603..a61c6ac6ef 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/runtime/pipeline/impl/DroolsJaxbHelperProviderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/runtime/pipeline/impl/DroolsJaxbHelperProviderImpl.java
@@ -28,8 +28,8 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBException;
 
 import com.sun.codemodel.CodeWriter;
 import com.sun.codemodel.JCodeModel;
diff --git a/drools-core/pom.xml b/drools-core/pom.xml
index a7a3b4e852..eabeae6720 100644
--- a/drools-core/pom.xml
+++ b/drools-core/pom.xml
@@ -76,9 +76,10 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>jakarta.xml.bind</groupId>
diff --git a/drools-core/src/main/java/org/drools/core/ClassObjectSerializationFilter.java b/drools-core/src/main/java/org/drools/core/ClassObjectSerializationFilter.java
index 9f0e1fadf9..136270b9f8 100644
--- a/drools-core/src/main/java/org/drools/core/ClassObjectSerializationFilter.java
+++ b/drools-core/src/main/java/org/drools/core/ClassObjectSerializationFilter.java
@@ -1,9 +1,9 @@
 package org.drools.core;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.runtime.ClassObjectFilter;
 import org.kie.api.runtime.ObjectFilter;
diff --git a/drools-core/src/main/java/org/drools/core/base/ArrayElements.java b/drools-core/src/main/java/org/drools/core/base/ArrayElements.java
index 2318d25e54..aa3e359f76 100644
--- a/drools-core/src/main/java/org/drools/core/base/ArrayElements.java
+++ b/drools-core/src/main/java/org/drools/core/base/ArrayElements.java
@@ -17,10 +17,10 @@
 package org.drools.core.base;
 
 import java.util.Arrays;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name="array-elements")
 @XmlAccessorType(XmlAccessType.NONE)
diff --git a/drools-core/src/main/java/org/drools/core/base/RuleNameEndsWithAgendaFilter.java b/drools-core/src/main/java/org/drools/core/base/RuleNameEndsWithAgendaFilter.java
index cb579b9530..a3288d92b5 100644
--- a/drools-core/src/main/java/org/drools/core/base/RuleNameEndsWithAgendaFilter.java
+++ b/drools-core/src/main/java/org/drools/core/base/RuleNameEndsWithAgendaFilter.java
@@ -18,10 +18,10 @@ package org.drools.core.base;
 
 import java.io.Serializable;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.kie.api.runtime.rule.AgendaFilter;
 import org.kie.api.runtime.rule.Match;
 
diff --git a/drools-core/src/main/java/org/drools/core/base/RuleNameEqualsAgendaFilter.java b/drools-core/src/main/java/org/drools/core/base/RuleNameEqualsAgendaFilter.java
index 74e86b8f30..1457cfc0d0 100644
--- a/drools-core/src/main/java/org/drools/core/base/RuleNameEqualsAgendaFilter.java
+++ b/drools-core/src/main/java/org/drools/core/base/RuleNameEqualsAgendaFilter.java
@@ -18,10 +18,10 @@ package org.drools.core.base;
 
 import java.io.Serializable;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.kie.api.runtime.rule.AgendaFilter;
 import org.kie.api.runtime.rule.Match;
 
diff --git a/drools-core/src/main/java/org/drools/core/base/RuleNameMatchesAgendaFilter.java b/drools-core/src/main/java/org/drools/core/base/RuleNameMatchesAgendaFilter.java
index 6003fb3fbf..b52dd7053d 100644
--- a/drools-core/src/main/java/org/drools/core/base/RuleNameMatchesAgendaFilter.java
+++ b/drools-core/src/main/java/org/drools/core/base/RuleNameMatchesAgendaFilter.java
@@ -20,10 +20,10 @@ import java.io.Serializable;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.kie.api.runtime.rule.AgendaFilter;
 import org.kie.api.runtime.rule.Match;
 
diff --git a/drools-core/src/main/java/org/drools/core/base/RuleNameStartsWithAgendaFilter.java b/drools-core/src/main/java/org/drools/core/base/RuleNameStartsWithAgendaFilter.java
index c5f6384f43..fea26fb7bc 100644
--- a/drools-core/src/main/java/org/drools/core/base/RuleNameStartsWithAgendaFilter.java
+++ b/drools-core/src/main/java/org/drools/core/base/RuleNameStartsWithAgendaFilter.java
@@ -18,10 +18,10 @@ package org.drools.core.base;
 
 import java.io.Serializable;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import org.kie.api.runtime.rule.AgendaFilter;
 import org.kie.api.runtime.rule.Match;
 
diff --git a/drools-core/src/main/java/org/drools/core/common/DefaultFactHandle.java b/drools-core/src/main/java/org/drools/core/common/DefaultFactHandle.java
index 0559383b05..b35424e9f4 100644
--- a/drools-core/src/main/java/org/drools/core/common/DefaultFactHandle.java
+++ b/drools-core/src/main/java/org/drools/core/common/DefaultFactHandle.java
@@ -29,10 +29,10 @@ import org.drools.core.util.AbstractBaseLinkedListNode;
 import org.drools.util.StringUtils;
 import org.kie.api.runtime.rule.FactHandle;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 import java.util.Objects;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
diff --git a/drools-core/src/main/java/org/drools/core/common/DisconnectedFactHandle.java b/drools-core/src/main/java/org/drools/core/common/DisconnectedFactHandle.java
index 4d77523f42..da5bef425f 100644
--- a/drools-core/src/main/java/org/drools/core/common/DisconnectedFactHandle.java
+++ b/drools-core/src/main/java/org/drools/core/common/DisconnectedFactHandle.java
@@ -26,13 +26,13 @@ import org.drools.core.reteoo.RightTuple;
 import org.drools.core.reteoo.Tuple;
 import org.kie.api.runtime.rule.FactHandle;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSchemaType;
-import javax.xml.bind.annotation.XmlSeeAlso;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlSeeAlso;
 import java.io.Externalizable;
 import java.io.IOException;
 import java.io.ObjectInput;
diff --git a/drools-core/src/main/java/org/drools/core/common/ObjectFactory.java b/drools-core/src/main/java/org/drools/core/common/ObjectFactory.java
index 236d78023e..cb378ad082 100644
--- a/drools-core/src/main/java/org/drools/core/common/ObjectFactory.java
+++ b/drools-core/src/main/java/org/drools/core/common/ObjectFactory.java
@@ -16,7 +16,7 @@
 
 package org.drools.core.common;
 
-import javax.xml.bind.annotation.XmlRegistry;
+import jakarta.xml.bind.annotation.XmlRegistry;
 
 @XmlRegistry
 public class ObjectFactory {
diff --git a/drools-core/src/main/java/org/drools/core/common/QueryElementFactHandle.java b/drools-core/src/main/java/org/drools/core/common/QueryElementFactHandle.java
index 6a96edb408..cc399e13d5 100644
--- a/drools-core/src/main/java/org/drools/core/common/QueryElementFactHandle.java
+++ b/drools-core/src/main/java/org/drools/core/common/QueryElementFactHandle.java
@@ -24,9 +24,9 @@ import org.drools.core.reteoo.LeftTuple;
 import org.drools.core.reteoo.RightTuple;
 import org.drools.core.reteoo.Tuple;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
 import java.util.Arrays;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
diff --git a/drools-core/src/main/java/org/drools/core/util/AbstractBaseLinkedListNode.java b/drools-core/src/main/java/org/drools/core/util/AbstractBaseLinkedListNode.java
index 5cd6e541a5..b38cf3801b 100644
--- a/drools-core/src/main/java/org/drools/core/util/AbstractBaseLinkedListNode.java
+++ b/drools-core/src/main/java/org/drools/core/util/AbstractBaseLinkedListNode.java
@@ -16,9 +16,9 @@
 
 package org.drools.core.util;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 /**
  * Provides a abstract base implementation that an object can extend so that it can be used in a LinkedList.
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-deployment/src/main/java/org/drools/drl/quarkus/deployment/DroolsAssetsProcessor.java b/drools-drl-quarkus-extension/drools-drl-quarkus-deployment/src/main/java/org/drools/drl/quarkus/deployment/DroolsAssetsProcessor.java
index a17475e17d..c6083e2f78 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-deployment/src/main/java/org/drools/drl/quarkus/deployment/DroolsAssetsProcessor.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-deployment/src/main/java/org/drools/drl/quarkus/deployment/DroolsAssetsProcessor.java
@@ -23,7 +23,7 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import io.quarkus.arc.deployment.GeneratedBeanBuildItem;
 import io.quarkus.deployment.annotations.BuildProducer;
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-multiunit/src/test/java/org/drools/quarkus/ruleunit/examples/multiunit/RuntimeTest.java b/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-multiunit/src/test/java/org/drools/quarkus/ruleunit/examples/multiunit/RuntimeTest.java
index 728bf58c32..f8d77a3717 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-multiunit/src/test/java/org/drools/quarkus/ruleunit/examples/multiunit/RuntimeTest.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-multiunit/src/test/java/org/drools/quarkus/ruleunit/examples/multiunit/RuntimeTest.java
@@ -16,7 +16,7 @@
 package org.drools.quarkus.ruleunit.examples.multiunit;
 
 import java.util.concurrent.atomic.AtomicReference;
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import io.quarkus.test.junit.QuarkusTest;
 import org.drools.ruleunits.api.DataHandle;
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/main/java/org/drools/quarkus/ruleunit/examples/reactive/Adaptor.java b/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/main/java/org/drools/quarkus/ruleunit/examples/reactive/Adaptor.java
index bf39868231..8d6faa6145 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/main/java/org/drools/quarkus/ruleunit/examples/reactive/Adaptor.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/main/java/org/drools/quarkus/ruleunit/examples/reactive/Adaptor.java
@@ -15,10 +15,10 @@
  */
 package org.drools.quarkus.ruleunit.examples.reactive;
 
-import javax.annotation.PostConstruct;
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 
+import jakarta.annotation.PostConstruct;
 import org.eclipse.microprofile.reactive.messaging.Channel;
 import org.eclipse.microprofile.reactive.messaging.Emitter;
 import org.eclipse.microprofile.reactive.messaging.Incoming;
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/test/java/org/drools/quarkus/ruleunit/examples/reactive/KafkaTestResourceLifecycleManager.java b/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/test/java/org/drools/quarkus/ruleunit/examples/reactive/KafkaTestResourceLifecycleManager.java
index 14e6615a21..e1daf6033d 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/test/java/org/drools/quarkus/ruleunit/examples/reactive/KafkaTestResourceLifecycleManager.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/test/java/org/drools/quarkus/ruleunit/examples/reactive/KafkaTestResourceLifecycleManager.java
@@ -19,7 +19,7 @@ import java.util.HashMap;
 import java.util.Map;
 
 import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;
-import io.smallrye.reactive.messaging.providers.connectors.InMemoryConnector;
+import io.smallrye.reactive.messaging.memory.InMemoryConnector;
 
 public class KafkaTestResourceLifecycleManager implements QuarkusTestResourceLifecycleManager {
 
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/test/java/org/drools/quarkus/ruleunit/examples/reactive/RuntimeTest.java b/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/test/java/org/drools/quarkus/ruleunit/examples/reactive/RuntimeTest.java
index 6e1f058eef..79b6bb074c 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/test/java/org/drools/quarkus/ruleunit/examples/reactive/RuntimeTest.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-examples/drools-drl-quarkus-examples-reactive/src/test/java/org/drools/quarkus/ruleunit/examples/reactive/RuntimeTest.java
@@ -15,13 +15,13 @@
  */
 package org.drools.quarkus.ruleunit.examples.reactive;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import io.quarkus.test.common.QuarkusTestResource;
 import io.quarkus.test.junit.QuarkusTest;
-import io.smallrye.reactive.messaging.providers.connectors.InMemoryConnector;
-import io.smallrye.reactive.messaging.providers.connectors.InMemorySink;
-import io.smallrye.reactive.messaging.providers.connectors.InMemorySource;
+import io.smallrye.reactive.messaging.memory.InMemoryConnector;
+import io.smallrye.reactive.messaging.memory.InMemorySink;
+import io.smallrye.reactive.messaging.memory.InMemorySource;
 import org.eclipse.microprofile.reactive.messaging.spi.Connector;
 import org.junit.jupiter.api.Test;
 
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test-hotreload/src/main/java/org/drools/quarkus/test/hotreload/FindAdultEndpoint.java b/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test-hotreload/src/main/java/org/drools/quarkus/test/hotreload/FindAdultEndpoint.java
index 8d34b05084..9043abe090 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test-hotreload/src/main/java/org/drools/quarkus/test/hotreload/FindAdultEndpoint.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test-hotreload/src/main/java/org/drools/quarkus/test/hotreload/FindAdultEndpoint.java
@@ -17,12 +17,12 @@ package org.drools.quarkus.test.hotreload;
 
 import java.util.ArrayList;
 import java.util.List;
-import javax.inject.Inject;
-import javax.ws.rs.Consumes;
-import javax.ws.rs.POST;
-import javax.ws.rs.Path;
-import javax.ws.rs.Produces;
-import javax.ws.rs.core.MediaType;
+import jakarta.inject.Inject;
+import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.Produces;
+import jakarta.ws.rs.core.MediaType;
 
 import org.kie.api.runtime.KieRuntimeBuilder;
 import org.kie.api.runtime.KieSession;
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test/src/main/java/org/drools/quarkus/test/TestableResource.java b/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test/src/main/java/org/drools/quarkus/test/TestableResource.java
index c2b54de4a4..340c6a0830 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test/src/main/java/org/drools/quarkus/test/TestableResource.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test/src/main/java/org/drools/quarkus/test/TestableResource.java
@@ -22,10 +22,10 @@ import org.kie.api.runtime.KieSession;
 import org.kie.api.runtime.rule.FactHandle;
 import org.kie.api.time.SessionPseudoClock;
 
-import javax.inject.Inject;
-import javax.ws.rs.GET;
-import javax.ws.rs.Path;
-import javax.ws.rs.core.Response;
+import jakarta.inject.Inject;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.core.Response;
 import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test/src/test/java/org/drools/quarkus/test/RuntimeTest.java b/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test/src/test/java/org/drools/quarkus/test/RuntimeTest.java
index 541d798fb4..c8aff28b7b 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test/src/test/java/org/drools/quarkus/test/RuntimeTest.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-integration-test/src/test/java/org/drools/quarkus/test/RuntimeTest.java
@@ -21,7 +21,7 @@ import org.kie.api.definition.KiePackage;
 import org.kie.api.runtime.KieRuntimeBuilder;
 import org.kie.api.runtime.KieSession;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 import java.util.List;
 import java.util.stream.Collectors;
 
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/main/java/org/drools/quarkus/quickstart/test/HomeAlertsBean.java b/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/main/java/org/drools/quarkus/quickstart/test/HomeAlertsBean.java
index b8341c62ae..9b677cf639 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/main/java/org/drools/quarkus/quickstart/test/HomeAlertsBean.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/main/java/org/drools/quarkus/quickstart/test/HomeAlertsBean.java
@@ -18,8 +18,8 @@ package org.drools.quarkus.quickstart.test;
 import java.util.Collection;
 import java.util.stream.Collectors;
 
-import javax.enterprise.context.ApplicationScoped;
-import javax.inject.Inject;
+import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
 
 import org.drools.quarkus.quickstart.test.model.Alert;
 import org.drools.quarkus.quickstart.test.model.CCTV;
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/test/java/org/drools/quarkus/quickstart/test/BeanTest.java b/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/test/java/org/drools/quarkus/quickstart/test/BeanTest.java
index 2029f09c59..1fccb052af 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/test/java/org/drools/quarkus/quickstart/test/BeanTest.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/test/java/org/drools/quarkus/quickstart/test/BeanTest.java
@@ -15,7 +15,7 @@
  */
 package org.drools.quarkus.quickstart.test;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import io.quarkus.test.junit.QuarkusTest;
 
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/test/java/org/drools/quarkus/quickstart/test/RuntimeIT.java b/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/test/java/org/drools/quarkus/quickstart/test/RuntimeIT.java
index 1eef910ed3..637bc75cf5 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/test/java/org/drools/quarkus/quickstart/test/RuntimeIT.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-quickstart-test/src/test/java/org/drools/quarkus/quickstart/test/RuntimeIT.java
@@ -15,7 +15,7 @@
  */
 package org.drools.quarkus.quickstart.test;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import io.quarkus.test.junit.QuarkusTest;
 import org.drools.quarkus.quickstart.test.model.Alert;
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/main/java/org/drools/quarkus/ruleunit/test/TestableResource.java b/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/main/java/org/drools/quarkus/ruleunit/test/TestableResource.java
index e956f4e318..29a8932f7f 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/main/java/org/drools/quarkus/ruleunit/test/TestableResource.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/main/java/org/drools/quarkus/ruleunit/test/TestableResource.java
@@ -17,10 +17,10 @@ package org.drools.quarkus.ruleunit.test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import javax.inject.Inject;
-import javax.ws.rs.GET;
-import javax.ws.rs.Path;
-import javax.ws.rs.core.Response;
+import jakarta.inject.Inject;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.core.Response;
 
 import org.drools.ruleunits.api.RuleUnit;
 import org.drools.ruleunits.api.RuleUnitInstance;
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/test/java/org/drools/quarkus/ruleunit/test/RuntimeDslRuleUnitTest.java b/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/test/java/org/drools/quarkus/ruleunit/test/RuntimeDslRuleUnitTest.java
index b5c0335a67..eb2582f0ae 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/test/java/org/drools/quarkus/ruleunit/test/RuntimeDslRuleUnitTest.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/test/java/org/drools/quarkus/ruleunit/test/RuntimeDslRuleUnitTest.java
@@ -5,7 +5,7 @@ import org.drools.ruleunits.api.RuleUnit;
 import org.drools.ruleunits.api.RuleUnitInstance;
 import org.junit.jupiter.api.Test;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/test/java/org/drools/quarkus/ruleunit/test/RuntimeTest.java b/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/test/java/org/drools/quarkus/ruleunit/test/RuntimeTest.java
index b683dcef38..5e7d100d4c 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/test/java/org/drools/quarkus/ruleunit/test/RuntimeTest.java
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus-ruleunit-integration-test/src/test/java/org/drools/quarkus/ruleunit/test/RuntimeTest.java
@@ -20,7 +20,7 @@ import org.drools.ruleunits.api.RuleUnit;
 import org.drools.ruleunits.api.RuleUnitInstance;
 import org.junit.jupiter.api.Test;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
diff --git a/drools-drl-quarkus-extension/drools-drl-quarkus/pom.xml b/drools-drl-quarkus-extension/drools-drl-quarkus/pom.xml
index 18266ffbd4..b16cacbe6a 100644
--- a/drools-drl-quarkus-extension/drools-drl-quarkus/pom.xml
+++ b/drools-drl-quarkus-extension/drools-drl-quarkus/pom.xml
@@ -83,7 +83,7 @@
         <plugins>
             <plugin>
                 <groupId>io.quarkus</groupId>
-                <artifactId>quarkus-bootstrap-maven-plugin</artifactId>
+                <artifactId>quarkus-extension-maven-plugin</artifactId>
                 <version>${version.io.quarkus}</version>
                 <executions>
                     <execution>
diff --git a/drools-legacy-test-util/src/test/java/org/drools/mvel/compiler/Person.java b/drools-legacy-test-util/src/test/java/org/drools/mvel/compiler/Person.java
index 3a767f8f52..4943dd1dff 100644
--- a/drools-legacy-test-util/src/test/java/org/drools/mvel/compiler/Person.java
+++ b/drools-legacy-test-util/src/test/java/org/drools/mvel/compiler/Person.java
@@ -18,8 +18,8 @@ package org.drools.mvel.compiler;
 
 import org.drools.base.factmodel.traits.Traitable;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
diff --git a/drools-mvel/pom.xml b/drools-mvel/pom.xml
index 8d5ee900e0..59d1a48237 100644
--- a/drools-mvel/pom.xml
+++ b/drools-mvel/pom.xml
@@ -70,9 +70,10 @@
             <scope>provided</scope>
         </dependency>
         <dependency>
-            <groupId>com.sun.xml.bind</groupId>
-            <artifactId>jaxb-impl</artifactId>
+            <groupId>org.glassfish.jaxb</groupId>
+            <artifactId>jaxb-runtime</artifactId>
             <scope>provided</scope>
+            <version>4.0.3</version>
         </dependency>
         <dependency>
             <groupId>jakarta.xml.bind</groupId>
diff --git a/drools-mvel/src/test/java/org/drools/mvel/compiler/Person.java b/drools-mvel/src/test/java/org/drools/mvel/compiler/Person.java
index 866fd03b54..b4fa18bf5c 100644
--- a/drools-mvel/src/test/java/org/drools/mvel/compiler/Person.java
+++ b/drools-mvel/src/test/java/org/drools/mvel/compiler/Person.java
@@ -18,8 +18,8 @@ package org.drools.mvel.compiler;
 
 import org.drools.base.factmodel.traits.Traitable;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
diff --git a/drools-persistence/drools-persistence-api/pom.xml b/drools-persistence/drools-persistence-api/pom.xml
index 334e37c5cf..13678c7b70 100644
--- a/drools-persistence/drools-persistence-api/pom.xml
+++ b/drools-persistence/drools-persistence-api/pom.xml
@@ -41,9 +41,10 @@
       <artifactId>drools-commands</artifactId>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>com.sun.xml.bind</groupId>
diff --git a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/api/PersistenceContextManager.java b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/api/PersistenceContextManager.java
index d64ee3b8e3..1c988e07cc 100644
--- a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/api/PersistenceContextManager.java
+++ b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/api/PersistenceContextManager.java
@@ -19,7 +19,7 @@ import org.kie.api.runtime.ExecutableRunner;
 import org.kie.api.command.Command;
 import org.kie.api.runtime.KieSession;
 
-import javax.transaction.Synchronization;
+import jakarta.transaction.Synchronization;
 
 public interface PersistenceContextManager {
     
diff --git a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/api/TransactionSynchronizationRegistryHelper.java b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/api/TransactionSynchronizationRegistryHelper.java
index 5d4a3b36d4..d567816171 100644
--- a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/api/TransactionSynchronizationRegistryHelper.java
+++ b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/api/TransactionSynchronizationRegistryHelper.java
@@ -15,7 +15,7 @@
 
 package org.drools.persistence.api;
 
-import javax.transaction.TransactionSynchronizationRegistry;
+import jakarta.transaction.TransactionSynchronizationRegistry;
 
 import org.drools.persistence.jta.JtaTransactionSynchronizationAdapter;
 import org.slf4j.Logger;
diff --git a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionManager.java b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionManager.java
index 9ed3486b10..08d3957504 100644
--- a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionManager.java
+++ b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionManager.java
@@ -20,10 +20,10 @@ import java.util.HashMap;
 import java.util.Map;
 import javax.naming.InitialContext;
 import javax.naming.NamingException;
-import javax.transaction.Status;
-import javax.transaction.SystemException;
-import javax.transaction.TransactionSynchronizationRegistry;
-import javax.transaction.UserTransaction;
+import jakarta.transaction.Status;
+import jakarta.transaction.SystemException;
+import jakarta.transaction.TransactionSynchronizationRegistry;
+import jakarta.transaction.UserTransaction;
 
 import org.drools.persistence.api.TransactionManager;
 import org.drools.persistence.api.TransactionSynchronization;
@@ -69,7 +69,7 @@ public class JtaTransactionManager
 
     UserTransaction                      ut;
     Object                               tsr;
-    javax.transaction.TransactionManager tm;
+    jakarta.transaction.TransactionManager tm;
     
     public JtaTransactionManager(Object ut,
                                  Object tsr,
@@ -80,20 +80,20 @@ public class JtaTransactionManager
             this.ut = ( UserTransaction ) ( (ut != null) ? ut : findUserTransaction() );
         }
         
-        if ( tm instanceof javax.transaction.TransactionManager ) {
-            this.tm = ( javax.transaction.TransactionManager ) tm;
+        if ( tm instanceof jakarta.transaction.TransactionManager ) {
+            this.tm = ( jakarta.transaction.TransactionManager ) tm;
         } else {
-            this.tm = ( javax.transaction.TransactionManager ) ( (tm != null) ? tm : findTransactionManager( this.ut ) );
+            this.tm = ( jakarta.transaction.TransactionManager ) ( (tm != null) ? tm : findTransactionManager( this.ut ) );
         }
         this.tsr = (tsr != null) ? tsr : findTransactionSynchronizationRegistry( this.ut,
                                                                                  this.tm );
     }
 
-    protected javax.transaction.TransactionManager findTransactionManager(UserTransaction ut) {
-        if ( ut instanceof javax.transaction.TransactionManager ) {
+    protected jakarta.transaction.TransactionManager findTransactionManager(UserTransaction ut) {
+        if ( ut instanceof jakarta.transaction.TransactionManager ) {
             logger.debug( "JTA UserTransaction object [{}] implements TransactionManager",
                           ut );
-            return (javax.transaction.TransactionManager) ut;
+            return (jakarta.transaction.TransactionManager) ut;
         }
 
         InitialContext context;
@@ -112,7 +112,7 @@ public class JtaTransactionManager
                 continue;
             }
             try {
-                javax.transaction.TransactionManager tm = (javax.transaction.TransactionManager) context.lookup( jndiName );
+                jakarta.transaction.TransactionManager tm = (jakarta.transaction.TransactionManager) context.lookup( jndiName );
                 logger.debug( "JTA TransactionManager found at fallback JNDI location [{}]",
                               jndiName );
                 return tm;
@@ -146,7 +146,7 @@ public class JtaTransactionManager
     }
 
     protected Object findTransactionSynchronizationRegistry(UserTransaction ut,
-                                                            javax.transaction.TransactionManager tm) {
+                                                            jakarta.transaction.TransactionManager tm) {
 
         if ( transactionSynchronizationRegistryClass == null ) {
             // JTA 1.1 API not present - skip.
diff --git a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionManagerFactory.java b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionManagerFactory.java
index 7572b105d1..7cfb68b514 100644
--- a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionManagerFactory.java
+++ b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionManagerFactory.java
@@ -32,8 +32,8 @@ public class JtaTransactionManagerFactory extends TransactionManagerFactory {
     }
 
     /**
-     * Creates a {@link JtaTransactionManager} instance using any of the {@link javax.transaction.UserTransaction},
-     * {@link javax.transaction.TransactionSynchronizationRegistry}, and {@link javax.transaction.TransactionManager}
+     * Creates a {@link JtaTransactionManager} instance using any of the {@link jakarta.transaction.UserTransaction},
+     * {@link jakarta.transaction.TransactionSynchronizationRegistry}, and {@link jakarta.transaction.TransactionManager}
      * present in {@code env}.
      * 
      * @param env
diff --git a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionSynchronizationAdapter.java b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionSynchronizationAdapter.java
index d1d8dcc3a9..ba7001e629 100644
--- a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionSynchronizationAdapter.java
+++ b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/JtaTransactionSynchronizationAdapter.java
@@ -15,8 +15,8 @@
 
 package org.drools.persistence.jta;
 
-import javax.transaction.Status;
-import javax.transaction.Synchronization;
+import jakarta.transaction.Status;
+import jakarta.transaction.Synchronization;
 
 import org.drools.persistence.api.TransactionManager;
 import org.drools.persistence.api.TransactionSynchronization;
diff --git a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/TransactionLockInterceptor.java b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/TransactionLockInterceptor.java
index 228078eec7..267c2fca72 100644
--- a/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/TransactionLockInterceptor.java
+++ b/drools-persistence/drools-persistence-api/src/main/java/org/drools/persistence/jta/TransactionLockInterceptor.java
@@ -19,7 +19,7 @@ package org.drools.persistence.jta;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArraySet;
 import java.util.concurrent.locks.ReentrantLock;
-import javax.transaction.Status;
+import jakarta.transaction.Status;
 
 import org.drools.commands.impl.AbstractInterceptor;
 import org.drools.persistence.api.OrderedTransactionSynchronization;
diff --git a/drools-persistence/drools-persistence-jpa/pom.xml b/drools-persistence/drools-persistence-jpa/pom.xml
index d41e34ba41..f0249dccf7 100644
--- a/drools-persistence/drools-persistence-jpa/pom.xml
+++ b/drools-persistence/drools-persistence-jpa/pom.xml
@@ -103,9 +103,10 @@
       <artifactId>drools-mvel</artifactId>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>com.sun.xml.bind</groupId>
@@ -147,13 +148,8 @@
     </dependency>
 
     <!-- Hibernate -->
-    <dependency>
-      <groupId>org.hibernate</groupId>
-      <artifactId>hibernate-entitymanager</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.hibernate</groupId>
+    <!--~~(No version provided)~~>--><dependency>
+      <groupId>org.hibernate.orm</groupId>
       <artifactId>hibernate-core</artifactId>
       <scope>test</scope>
       <exclusions>
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/TriggerUpdateTransactionSynchronization.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/TriggerUpdateTransactionSynchronization.java
index d71fbda727..aaeb023cb3 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/TriggerUpdateTransactionSynchronization.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/TriggerUpdateTransactionSynchronization.java
@@ -16,7 +16,7 @@
 package org.drools.persistence;
 
 import java.util.Set;
-import javax.persistence.EntityManager;
+import jakarta.persistence.EntityManager;
 
 import org.drools.persistence.api.TransactionManager;
 import org.drools.persistence.api.TransactionManagerHelper;
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/info/SessionInfo.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/info/SessionInfo.java
index 52cc91c136..b5da3259b2 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/info/SessionInfo.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/info/SessionInfo.java
@@ -17,15 +17,15 @@ package org.drools.persistence.info;
 
 import java.util.Date;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Lob;
-import javax.persistence.SequenceGenerator;
-import javax.persistence.Transient;
-import javax.persistence.Version;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.Lob;
+import jakarta.persistence.SequenceGenerator;
+import jakarta.persistence.Transient;
+import jakarta.persistence.Version;
 
 import org.drools.persistence.api.PersistentSession;
 import org.drools.persistence.SessionMarshallingHelper;
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/info/WorkItemInfo.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/info/WorkItemInfo.java
index 65e07c870c..3308128753 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/info/WorkItemInfo.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/info/WorkItemInfo.java
@@ -20,15 +20,15 @@ import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.util.Date;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Lob;
-import javax.persistence.SequenceGenerator;
-import javax.persistence.Transient;
-import javax.persistence.Version;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.Lob;
+import jakarta.persistence.SequenceGenerator;
+import jakarta.persistence.Transient;
+import jakarta.persistence.Version;
 
 import org.drools.core.marshalling.MarshallerReaderContext;
 import org.drools.core.marshalling.MarshallerWriteContext;
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/AbstractPersistenceContextManager.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/AbstractPersistenceContextManager.java
index a36e1b4843..abf285eb0d 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/AbstractPersistenceContextManager.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/AbstractPersistenceContextManager.java
@@ -15,8 +15,8 @@
  */
  package org.drools.persistence.jpa;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
 
 import org.drools.persistence.api.TransactionManager;
 import org.kie.api.runtime.Environment;
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/JpaPersistenceContext.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/JpaPersistenceContext.java
index 9cf810eef7..ee7012c495 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/JpaPersistenceContext.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/JpaPersistenceContext.java
@@ -17,8 +17,8 @@ package org.drools.persistence.jpa;
 
 import java.lang.reflect.Field;
 
-import javax.persistence.EntityManager;
-import javax.persistence.LockModeType;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.LockModeType;
 
 import org.drools.persistence.api.PersistenceContext;
 import org.drools.persistence.api.PersistentSession;
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/JpaPersistenceContextManager.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/JpaPersistenceContextManager.java
index 407ff42b02..6baa92cf50 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/JpaPersistenceContextManager.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/JpaPersistenceContextManager.java
@@ -15,7 +15,7 @@
  */
  package org.drools.persistence.jpa;
 
-import javax.persistence.EntityManager;
+import jakarta.persistence.EntityManager;
 
 import org.drools.persistence.api.PersistenceContext;
 import org.drools.persistence.api.PersistenceContextManager;
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/OptimisticLockRetryInterceptor.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/OptimisticLockRetryInterceptor.java
index b5bea39c66..5e64f56dea 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/OptimisticLockRetryInterceptor.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/OptimisticLockRetryInterceptor.java
@@ -22,7 +22,7 @@ import org.kie.api.runtime.RequestContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.persistence.OptimisticLockException;
+import jakarta.persistence.OptimisticLockException;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/EntityPersister.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/EntityPersister.java
index 231e8e2ee9..c05ec10dea 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/EntityPersister.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/EntityPersister.java
@@ -19,7 +19,7 @@ package org.drools.persistence.jpa.marshaller;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.persistence.EntityManager;
+import jakarta.persistence.EntityManager;
 
 public class EntityPersister {
 
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/JPAPlaceholderResolverStrategy.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/JPAPlaceholderResolverStrategy.java
index a107323a50..e48adb7e91 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/JPAPlaceholderResolverStrategy.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/JPAPlaceholderResolverStrategy.java
@@ -25,11 +25,11 @@ import java.io.Serializable;
 import java.util.HashSet;
 import java.util.Set;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
-import javax.persistence.metamodel.EntityType;
-import javax.persistence.metamodel.Metamodel;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
+import jakarta.persistence.metamodel.EntityType;
+import jakarta.persistence.metamodel.Metamodel;
 import org.drools.base.common.DroolsObjectInputStream;
 import org.drools.persistence.api.TransactionAware;
 import org.drools.persistence.api.TransactionManager;
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/MappedVariable.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/MappedVariable.java
index 604fe48cea..5edb5d9e1d 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/MappedVariable.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/MappedVariable.java
@@ -17,13 +17,13 @@
 package org.drools.persistence.jpa.marshaller;
 
 import java.io.Serializable;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.SequenceGenerator;
-import javax.persistence.Version;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.SequenceGenerator;
+import jakarta.persistence.Version;
 
 @Entity
 @SequenceGenerator(name="mappedVarIdSeq", sequenceName="MAPPED_VAR_ID_SEQ")
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/VariableEntity.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/VariableEntity.java
index 445d9eb17f..f35762181d 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/VariableEntity.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/VariableEntity.java
@@ -19,11 +19,11 @@ package org.drools.persistence.jpa.marshaller;
 import java.io.Serializable;
 import java.util.HashSet;
 import java.util.Set;
-import javax.persistence.CascadeType;
-import javax.persistence.JoinColumn;
-import javax.persistence.MappedSuperclass;
-import javax.persistence.OneToMany;
-import javax.persistence.FetchType;
+import jakarta.persistence.CascadeType;
+import jakarta.persistence.JoinColumn;
+import jakarta.persistence.MappedSuperclass;
+import jakarta.persistence.OneToMany;
+import jakarta.persistence.FetchType;
 
 @MappedSuperclass
 public abstract class VariableEntity implements Serializable {
diff --git a/drools-persistence/drools-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml b/drools-persistence/drools-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml
index 6c29cb4771..027943ebcc 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml
+++ b/drools-persistence/drools-persistence-jpa/src/test/filtered-resources/META-INF/persistence.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<persistence version="2.1"
-             xmlns="http://xmlns.jcp.org/xml/ns/persistence"
+<persistence version="3.0"
+             xmlns="https://jakarta.ee/xml/ns/persistence"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
+             xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd">
 
     <persistence-unit name="org.drools.persistence.jpa" transaction-type="JTA">
       <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/JtaTransactionManagerFactoryTest.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/JtaTransactionManagerFactoryTest.java
index c21e072745..ec16582dbf 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/JtaTransactionManagerFactoryTest.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/JtaTransactionManagerFactoryTest.java
@@ -16,13 +16,13 @@ package org.drools.persistence.jta;
 
 import javax.naming.InitialContext;
 import javax.naming.NamingException;
-import javax.transaction.HeuristicMixedException;
-import javax.transaction.HeuristicRollbackException;
-import javax.transaction.NotSupportedException;
-import javax.transaction.RollbackException;
-import javax.transaction.SystemException;
-import javax.transaction.TransactionManager;
-import javax.transaction.UserTransaction;
+import jakarta.transaction.HeuristicMixedException;
+import jakarta.transaction.HeuristicRollbackException;
+import jakarta.transaction.NotSupportedException;
+import jakarta.transaction.RollbackException;
+import jakarta.transaction.SystemException;
+import jakarta.transaction.TransactionManager;
+import jakarta.transaction.UserTransaction;
 import org.drools.core.impl.EnvironmentFactory;
 
 import static org.assertj.core.api.Assertions.assertThat;
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/JtaTransactionManagerTest.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/JtaTransactionManagerTest.java
index 2ed2d81ebd..fd02afeba9 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/JtaTransactionManagerTest.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/JtaTransactionManagerTest.java
@@ -20,10 +20,10 @@ import java.util.HashMap;
 import java.util.Map;
 import javax.naming.InitialContext;
 import javax.naming.NamingException;
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.transaction.RollbackException;
-import javax.transaction.UserTransaction;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.transaction.RollbackException;
+import jakarta.transaction.UserTransaction;
 
 import org.drools.commands.impl.CommandBasedStatefulKnowledgeSessionImpl;
 import org.drools.kiesession.rulebase.InternalKnowledgeBase;
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/TransactionTestCommand.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/TransactionTestCommand.java
index 3c04feca2e..08c264c012 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/TransactionTestCommand.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/TransactionTestCommand.java
@@ -16,8 +16,8 @@
 package org.drools.persistence.jta;
 
 import java.util.HashMap;
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
 
 import com.arjuna.ats.jta.TransactionManager;
 import org.drools.core.base.MapGlobalResolver;
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/TransactionTestObject.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/TransactionTestObject.java
index e3f3f3d8a3..5ed617ea17 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/TransactionTestObject.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/jta/TransactionTestObject.java
@@ -17,13 +17,13 @@ package org.drools.persistence.jta;
 
 import java.io.Serializable;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.OneToOne;
-import javax.persistence.SequenceGenerator;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.OneToOne;
+import jakarta.persistence.SequenceGenerator;
 
 /**
  * This class is used to test transactions. 
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/kie/persistence/session/JpaPersistentStatefulSessionTest.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/kie/persistence/session/JpaPersistentStatefulSessionTest.java
index c23b5361db..28babfedb9 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/kie/persistence/session/JpaPersistentStatefulSessionTest.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/kie/persistence/session/JpaPersistentStatefulSessionTest.java
@@ -26,7 +26,7 @@ import java.util.Properties;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.naming.InitialContext;
-import javax.transaction.UserTransaction;
+import jakarta.transaction.UserTransaction;
 
 import org.drools.core.FlowSessionConfiguration;
 import org.drools.core.SessionConfiguration;
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/map/impl/JpaBasedPersistenceTest.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/map/impl/JpaBasedPersistenceTest.java
index ba7dd5109d..6e7e5432c6 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/map/impl/JpaBasedPersistenceTest.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/map/impl/JpaBasedPersistenceTest.java
@@ -31,7 +31,7 @@ import org.kie.internal.persistence.jpa.JPAKnowledgeService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.persistence.EntityManagerFactory;
+import jakarta.persistence.EntityManagerFactory;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Map;
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/session/JpaPersistentStatefulSessionTest.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/session/JpaPersistentStatefulSessionTest.java
index 438650b714..566285a37a 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/session/JpaPersistentStatefulSessionTest.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/session/JpaPersistentStatefulSessionTest.java
@@ -25,7 +25,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.stream.IntStream;
 
 import javax.naming.InitialContext;
-import javax.transaction.UserTransaction;
+import jakarta.transaction.UserTransaction;
 
 import org.drools.commands.ChainableRunner;
 import org.drools.commands.impl.CommandBasedStatefulKnowledgeSessionImpl;
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/session/ReloadSessionTest.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/session/ReloadSessionTest.java
index fada845fc1..2b8e3a8b3a 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/session/ReloadSessionTest.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/session/ReloadSessionTest.java
@@ -20,8 +20,8 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Random;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 
 import org.drools.core.common.DefaultFactHandle;
 import org.drools.kiesession.rulebase.InternalKnowledgeBase;
diff --git a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/util/DroolsPersistenceUtil.java b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/util/DroolsPersistenceUtil.java
index 31038d2afa..775f3f19dc 100644
--- a/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/util/DroolsPersistenceUtil.java
+++ b/drools-persistence/drools-persistence-jpa/src/test/java/org/drools/persistence/util/DroolsPersistenceUtil.java
@@ -19,7 +19,7 @@ import static org.kie.api.runtime.EnvironmentName.GLOBALS;
 import static org.kie.api.runtime.EnvironmentName.TRANSACTION;
 
 import java.util.Map;
-import javax.transaction.UserTransaction;
+import jakarta.transaction.UserTransaction;
 import org.drools.core.base.MapGlobalResolver;
 import org.drools.core.impl.EnvironmentFactory;
 import org.kie.api.runtime.Environment;
diff --git a/drools-reliability/drools-reliability-infinispan/pom.xml b/drools-reliability/drools-reliability-infinispan/pom.xml
index ffb87b57ff..c48548c093 100644
--- a/drools-reliability/drools-reliability-infinispan/pom.xml
+++ b/drools-reliability/drools-reliability-infinispan/pom.xml
@@ -32,7 +32,7 @@
   <dependencies>
     <dependency>
       <groupId>org.infinispan</groupId>
-      <artifactId>infinispan-core</artifactId>
+      <artifactId>infinispan-core-jakarta</artifactId>
     </dependency>
     <dependency>
       <groupId>org.infinispan.protostream</groupId>
@@ -41,7 +41,7 @@
     </dependency>
     <dependency>
       <groupId>org.infinispan</groupId>
-      <artifactId>infinispan-client-hotrod</artifactId>
+      <artifactId>infinispan-client-hotrod-jakarta</artifactId>
     </dependency>
     <dependency>
       <groupId>org.drools</groupId>
diff --git a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/mvel/compiler/Person.java b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/mvel/compiler/Person.java
index 866fd03b54..b4fa18bf5c 100644
--- a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/mvel/compiler/Person.java
+++ b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/mvel/compiler/Person.java
@@ -18,8 +18,8 @@ package org.drools.mvel.compiler;
 
 import org.drools.base.factmodel.traits.Traitable;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
diff --git a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/mvel/integrationtests/QueryTest.java b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/mvel/integrationtests/QueryTest.java
index c4902c912e..7091274b36 100644
--- a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/mvel/integrationtests/QueryTest.java
+++ b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/mvel/integrationtests/QueryTest.java
@@ -54,7 +54,7 @@ import org.kie.api.runtime.rule.Row;
 import org.kie.api.runtime.rule.Variable;
 import org.kie.api.runtime.rule.ViewChangedEventListener;
 
-import javax.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBContext;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.StringWriter;
diff --git a/drools-test-coverage/test-integration-nomvel/pom.xml b/drools-test-coverage/test-integration-nomvel/pom.xml
index 31b46c1f7e..d62ab784ec 100644
--- a/drools-test-coverage/test-integration-nomvel/pom.xml
+++ b/drools-test-coverage/test-integration-nomvel/pom.xml
@@ -102,9 +102,10 @@
             <scope>test</scope>
         </dependency>
         <dependency>
-            <groupId>com.sun.xml.bind</groupId>
-            <artifactId>jaxb-impl</artifactId>
+            <groupId>org.glassfish.jaxb</groupId>
+            <artifactId>jaxb-runtime</artifactId>
             <scope>test</scope>
+            <version>4.0.3</version>
         </dependency>
         <dependency>
             <groupId>jakarta.xml.bind</groupId>
diff --git a/drools-traits/pom.xml b/drools-traits/pom.xml
index 514c9ec2cd..368f4b3f1c 100644
--- a/drools-traits/pom.xml
+++ b/drools-traits/pom.xml
@@ -138,8 +138,8 @@
     </dependency>
 
     <!-- Hibernate -->
-    <dependency>
-      <groupId>org.hibernate</groupId>
+    <!--~~(No version provided)~~>--><dependency>
+      <groupId>org.hibernate.orm</groupId>
       <artifactId>hibernate-core</artifactId>
       <scope>test</scope>
       <exclusions>
@@ -158,11 +158,6 @@
       <artifactId>jandex</artifactId>
       <scope>test</scope>
     </dependency>
-    <dependency>
-      <groupId>org.hibernate</groupId>
-      <artifactId>hibernate-entitymanager</artifactId>
-      <scope>test</scope>
-    </dependency>
 
     <dependency>
       <groupId>com.sun.xml.bind</groupId>
diff --git a/drools-traits/src/test/filtered-resources/META-INF/persistence.xml b/drools-traits/src/test/filtered-resources/META-INF/persistence.xml
index 6c29cb4771..027943ebcc 100644
--- a/drools-traits/src/test/filtered-resources/META-INF/persistence.xml
+++ b/drools-traits/src/test/filtered-resources/META-INF/persistence.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<persistence version="2.1"
-             xmlns="http://xmlns.jcp.org/xml/ns/persistence"
+<persistence version="3.0"
+             xmlns="https://jakarta.ee/xml/ns/persistence"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
+             xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd">
 
     <persistence-unit name="org.drools.persistence.jpa" transaction-type="JTA">
       <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
diff --git a/drools-traits/src/test/java/org/drools/traits/persistence/DroolsPersistenceUtil.java b/drools-traits/src/test/java/org/drools/traits/persistence/DroolsPersistenceUtil.java
index aaf01f00a2..9d634ec94c 100644
--- a/drools-traits/src/test/java/org/drools/traits/persistence/DroolsPersistenceUtil.java
+++ b/drools-traits/src/test/java/org/drools/traits/persistence/DroolsPersistenceUtil.java
@@ -17,7 +17,7 @@ package org.drools.traits.persistence;
 
 import java.util.Map;
 
-import javax.transaction.UserTransaction;
+import jakarta.transaction.UserTransaction;
 
 import org.drools.core.base.MapGlobalResolver;
 import org.drools.core.impl.EnvironmentFactory;
diff --git a/drools-wiring/drools-wiring-dynamic/pom.xml b/drools-wiring/drools-wiring-dynamic/pom.xml
index 7e11c4d9eb..3978487185 100755
--- a/drools-wiring/drools-wiring-dynamic/pom.xml
+++ b/drools-wiring/drools-wiring-dynamic/pom.xml
@@ -34,9 +34,10 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>jakarta.xml.bind</groupId>
diff --git a/drools-xml-support/src/test/java/org/drools/xml/support/CommandSerializationTest.java b/drools-xml-support/src/test/java/org/drools/xml/support/CommandSerializationTest.java
index 0599915ec9..41b607324f 100644
--- a/drools-xml-support/src/test/java/org/drools/xml/support/CommandSerializationTest.java
+++ b/drools-xml-support/src/test/java/org/drools/xml/support/CommandSerializationTest.java
@@ -31,9 +31,9 @@ import java.util.Random;
 import java.util.UUID;
 import java.util.regex.Pattern;
 
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElements;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElements;
 
 import org.drools.core.ClassObjectFilter;
 import org.drools.core.ClassObjectSerializationFilter;
diff --git a/kie-api/src/main/java/org/kie/api/pmml/AbstractOutput.java b/kie-api/src/main/java/org/kie/api/pmml/AbstractOutput.java
index cb33ba3dc3..5748494ac9 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/AbstractOutput.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/AbstractOutput.java
@@ -15,11 +15,11 @@
  */
 package org.kie.api.pmml;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement(name="pmmlOutput")
 @XmlAccessorType(XmlAccessType.FIELD)
diff --git a/kie-api/src/main/java/org/kie/api/pmml/DoubleFieldOutput.java b/kie-api/src/main/java/org/kie/api/pmml/DoubleFieldOutput.java
index 413db4a8fd..d6c5f18648 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/DoubleFieldOutput.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/DoubleFieldOutput.java
@@ -15,9 +15,9 @@
  */
 package org.kie.api.pmml;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement(name="value")
 @XmlAccessorType(XmlAccessType.FIELD)
diff --git a/kie-api/src/main/java/org/kie/api/pmml/IntegerFieldOutput.java b/kie-api/src/main/java/org/kie/api/pmml/IntegerFieldOutput.java
index 0de625b8f2..37b5d8317c 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/IntegerFieldOutput.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/IntegerFieldOutput.java
@@ -15,9 +15,9 @@
  */
 package org.kie.api.pmml;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement(name="value")
 @XmlAccessorType(XmlAccessType.FIELD)
diff --git a/kie-api/src/main/java/org/kie/api/pmml/PMML4DataField.java b/kie-api/src/main/java/org/kie/api/pmml/PMML4DataField.java
index 5294014700..f7ea76fedb 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/PMML4DataField.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/PMML4DataField.java
@@ -15,10 +15,10 @@
  */
 package org.kie.api.pmml;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.definition.type.Role;
 import org.kie.api.definition.type.Role.Type;
diff --git a/kie-api/src/main/java/org/kie/api/pmml/PMML4OutputField.java b/kie-api/src/main/java/org/kie/api/pmml/PMML4OutputField.java
index f795d3a5b0..b001d86df1 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/PMML4OutputField.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/PMML4OutputField.java
@@ -15,11 +15,11 @@
  */
 package org.kie.api.pmml;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 import org.kie.api.definition.type.Role;
 import org.kie.api.definition.type.Role.Type;
diff --git a/kie-api/src/main/java/org/kie/api/pmml/PMML4Result.java b/kie-api/src/main/java/org/kie/api/pmml/PMML4Result.java
index 49728c846f..0bb619813d 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/PMML4Result.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/PMML4Result.java
@@ -21,13 +21,13 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 import org.kie.api.definition.type.PropertyReactive;
 import org.slf4j.Logger;
diff --git a/kie-api/src/main/java/org/kie/api/pmml/PMMLRequestData.java b/kie-api/src/main/java/org/kie/api/pmml/PMMLRequestData.java
index b39d168f63..4ad5e23862 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/PMMLRequestData.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/PMMLRequestData.java
@@ -22,12 +22,12 @@ import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * This class provides a vanilla mechanism for sending data to
diff --git a/kie-api/src/main/java/org/kie/api/pmml/ParameterInfo.java b/kie-api/src/main/java/org/kie/api/pmml/ParameterInfo.java
index 677a93b394..7fcf52c98d 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/ParameterInfo.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/ParameterInfo.java
@@ -15,12 +15,12 @@
  */
 package org.kie.api.pmml;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name="ParameterInfo")
 @XmlAccessorType(XmlAccessType.NONE)
diff --git a/kie-api/src/main/java/org/kie/api/pmml/StringFieldOutput.java b/kie-api/src/main/java/org/kie/api/pmml/StringFieldOutput.java
index 1d59e1de4d..adf7419718 100644
--- a/kie-api/src/main/java/org/kie/api/pmml/StringFieldOutput.java
+++ b/kie-api/src/main/java/org/kie/api/pmml/StringFieldOutput.java
@@ -15,9 +15,9 @@
  */
 package org.kie.api.pmml;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @XmlRootElement(name="value")
 @XmlAccessorType(XmlAccessType.FIELD)
diff --git a/kie-api/src/main/java/org/kie/api/runtime/query/QueryContext.java b/kie-api/src/main/java/org/kie/api/runtime/query/QueryContext.java
index 970c21fafd..e461e4857d 100644
--- a/kie-api/src/main/java/org/kie/api/runtime/query/QueryContext.java
+++ b/kie-api/src/main/java/org/kie/api/runtime/query/QueryContext.java
@@ -18,11 +18,11 @@ package org.kie.api.runtime.query;
 
 import java.io.Serializable;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlSchemaType;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType(name="kieQueryContext")
 @XmlAccessorType(XmlAccessType.FIELD)
diff --git a/kie-api/src/main/java/org/kie/api/task/model/Status.java b/kie-api/src/main/java/org/kie/api/task/model/Status.java
index f37ba2607c..737985a4db 100644
--- a/kie-api/src/main/java/org/kie/api/task/model/Status.java
+++ b/kie-api/src/main/java/org/kie/api/task/model/Status.java
@@ -16,7 +16,7 @@
 
 package org.kie.api.task.model;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 
 @XmlType
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNImportPMMLInfo.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNImportPMMLInfo.java
index 7c3bb1c197..d7053e68a3 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNImportPMMLInfo.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNImportPMMLInfo.java
@@ -62,7 +62,7 @@ public class DMNImportPMMLInfo extends PMMLInfo<DMNPMMLModelInfo> {
             final PMML pmml = org.jpmml.model.PMMLUtil.unmarshal(is);
             PMMLHeaderInfo h = PMMLInfo.pmmlToHeaderInfo(pmml, pmml.getHeader());
             for (DataField df : pmml.getDataDictionary().getDataFields()) {
-                String dfName = df.getName().getValue();
+                String dfName =df.getName();
                 BuiltInType ft = getBuiltInTypeByDataType(df.getDataType());
                 List<FEELProfile> helperFEELProfiles = cc.getFeelProfiles();
                 DMNFEELHelper feel = new DMNFEELHelper(cc.getRootClassLoader(), helperFEELProfiles);
@@ -118,7 +118,7 @@ public class DMNImportPMMLInfo extends PMMLInfo<DMNPMMLModelInfo> {
                 // register <import name>.<pmml MODEL name>, being a composite type of the different model outputs fields
                 Map<String, DMNType> typeMap = new HashMap<>();
                 outputFields.stream().forEach(field -> {
-                    String fieldName = field.getName().getValue();
+                    String fieldName =field.getName();
                     BuiltInType ft = getBuiltInTypeByDataType(field.getDataType());
                     DMNType type = new SimpleTypeImpl(i.getNamespace(), fieldName, null, false, null, dmnModel.getTypeRegistry().resolveType(dmnModel.getDefinitions().getURIFEEL(), ft.getName()), ft);
                     typeMap.put(fieldName, type);
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/PMMLInfo.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/PMMLInfo.java
index e272189c00..a2cc46881c 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/PMMLInfo.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/PMMLInfo.java
@@ -24,7 +24,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.Extension;
 import org.dmg.pmml.Header;
@@ -73,15 +73,15 @@ public class PMMLInfo<M extends PMMLModelInfo> {
         miningSchema.getMiningFields()
                     .stream()
                     .filter(mf -> mf.getUsageType() == UsageType.ACTIVE)
-                    .forEach(fn -> inputFields.add(fn.getName().getValue()));
+                    .forEach(fn -> inputFields.add(fn.getName()));
         Collection<String> targetFields = new ArrayList<>();
         miningSchema.getMiningFields()
                     .stream()
                     .filter(mf -> mf.getUsageType() == UsageType.PREDICTED)
-                    .forEach(fn -> targetFields.add(fn.getName().getValue()));
+                    .forEach(fn -> targetFields.add(fn.getName()));
         Collection<String> outputFields = new ArrayList<>();
         if (pm.getOutput() != null && pm.getOutput().getOutputFields() != null) {
-            pm.getOutput().getOutputFields().forEach(of -> outputFields.add(of.getName().getValue()));
+            pm.getOutput().getOutputFields().forEach(of -> outputFields.add(of.getName()));
         }
         return new PMMLModelInfo(pm.getModelName(), pm.getClass().getSimpleName(), inputFields, targetFields, outputFields);
     }
diff --git a/kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/jandex/AbstractJandexTest.java b/kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/jandex/AbstractJandexTest.java
index 1e4a002044..0f043b9da0 100644
--- a/kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/jandex/AbstractJandexTest.java
+++ b/kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/jandex/AbstractJandexTest.java
@@ -29,9 +29,9 @@ import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import javax.json.bind.Jsonb;
-import javax.json.bind.JsonbBuilder;
-import javax.json.bind.JsonbConfig;
+import jakarta.json.bind.Jsonb;
+import jakarta.json.bind.JsonbBuilder;
+import jakarta.json.bind.JsonbConfig;
 
 import org.jboss.jandex.ClassInfo;
 import org.jboss.jandex.DotName;
diff --git a/kie-dmn/kie-dmn-legacy-tests/pom.xml b/kie-dmn/kie-dmn-legacy-tests/pom.xml
index 4251009e55..ecb25d2372 100644
--- a/kie-dmn/kie-dmn-legacy-tests/pom.xml
+++ b/kie-dmn/kie-dmn-legacy-tests/pom.xml
@@ -100,9 +100,10 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>jakarta.xml.bind</groupId>
diff --git a/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_2/dmndi/DMNDiagram.java b/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_2/dmndi/DMNDiagram.java
index 0667ee8e9e..f89f066949 100644
--- a/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_2/dmndi/DMNDiagram.java
+++ b/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_2/dmndi/DMNDiagram.java
@@ -19,7 +19,7 @@ package org.kie.dmn.model.v1_2.dmndi;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.xml.bind.JAXBElement;
+import jakarta.xml.bind.JAXBElement;
 
 public class DMNDiagram extends Diagram implements org.kie.dmn.model.api.dmndi.DMNDiagram {
 
diff --git a/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_2/dmndi/DiagramElement.java b/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_2/dmndi/DiagramElement.java
index f13fcb5275..6d6950fb5f 100644
--- a/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_2/dmndi/DiagramElement.java
+++ b/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_2/dmndi/DiagramElement.java
@@ -19,7 +19,7 @@ package org.kie.dmn.model.v1_2.dmndi;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.xml.bind.JAXBElement;
+import jakarta.xml.bind.JAXBElement;
 
 import org.kie.dmn.model.v1_2.KieDMNModelInstrumentedBase;
 
diff --git a/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_3/dmndi/DMNDiagram.java b/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_3/dmndi/DMNDiagram.java
index a1c3bda6f5..b2332ca6e8 100644
--- a/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_3/dmndi/DMNDiagram.java
+++ b/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_3/dmndi/DMNDiagram.java
@@ -19,7 +19,7 @@ package org.kie.dmn.model.v1_3.dmndi;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.xml.bind.JAXBElement;
+import jakarta.xml.bind.JAXBElement;
 
 public class DMNDiagram extends Diagram implements org.kie.dmn.model.api.dmndi.DMNDiagram {
 
diff --git a/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_3/dmndi/DiagramElement.java b/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_3/dmndi/DiagramElement.java
index 37f68faf85..7720ab80ed 100644
--- a/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_3/dmndi/DiagramElement.java
+++ b/kie-dmn/kie-dmn-model/src/main/java/org/kie/dmn/model/v1_3/dmndi/DiagramElement.java
@@ -19,7 +19,7 @@ package org.kie.dmn.model.v1_3.dmndi;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.xml.bind.JAXBElement;
+import jakarta.xml.bind.JAXBElement;
 
 import org.kie.dmn.model.v1_3.KieDMNModelInstrumentedBase;
 
diff --git a/kie-dmn/kie-dmn-model/src/test/java/org/kie/dmn/model/jandex/KieDMNModelJandexTest.java b/kie-dmn/kie-dmn-model/src/test/java/org/kie/dmn/model/jandex/KieDMNModelJandexTest.java
index 14c47f65e8..4004e43729 100644
--- a/kie-dmn/kie-dmn-model/src/test/java/org/kie/dmn/model/jandex/KieDMNModelJandexTest.java
+++ b/kie-dmn/kie-dmn-model/src/test/java/org/kie/dmn/model/jandex/KieDMNModelJandexTest.java
@@ -29,9 +29,9 @@ import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import javax.json.bind.Jsonb;
-import javax.json.bind.JsonbBuilder;
-import javax.json.bind.JsonbConfig;
+import jakarta.json.bind.Jsonb;
+import jakarta.json.bind.JsonbBuilder;
+import jakarta.json.bind.JsonbConfig;
 
 import org.jboss.jandex.ClassInfo;
 import org.jboss.jandex.DotName;
diff --git a/kie-dmn/kie-dmn-openapi/pom.xml b/kie-dmn/kie-dmn-openapi/pom.xml
index 629fa8e8af..3405f1954c 100644
--- a/kie-dmn/kie-dmn-openapi/pom.xml
+++ b/kie-dmn/kie-dmn-openapi/pom.xml
@@ -62,9 +62,10 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>jakarta.xml.bind</groupId>
diff --git a/kie-dmn/kie-dmn-pmml-tests-parent/kie-dmn-pmml-tests/pom.xml b/kie-dmn/kie-dmn-pmml-tests-parent/kie-dmn-pmml-tests/pom.xml
index 9f515b78cb..4cbb7b6c28 100644
--- a/kie-dmn/kie-dmn-pmml-tests-parent/kie-dmn-pmml-tests/pom.xml
+++ b/kie-dmn/kie-dmn-pmml-tests-parent/kie-dmn-pmml-tests/pom.xml
@@ -62,9 +62,10 @@
       <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
     <dependency>
       <groupId>jakarta.xml.bind</groupId>
diff --git a/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/Converter.java b/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/Converter.java
index 17887354ff..97309c1dda 100644
--- a/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/Converter.java
+++ b/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/Converter.java
@@ -36,7 +36,6 @@ import javax.xml.namespace.QName;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.Model;
 import org.dmg.pmml.PMML;
 import org.dmg.pmml.SimplePredicate;
@@ -143,7 +142,7 @@ public class Converter {
             for (String input : usedPredictors) {
                 List<SimplePredicate> predicatesForInput = r.map.get(input);
                 if (predicatesForInput != null && !predicatesForInput.isEmpty())  {
-                    FieldName fnLookup = FieldName.create(input);
+                     String fnLookup =input;
                     Optional<DataField> df = pmml.getDataDictionary().getDataFields().stream().filter(x-> x.getName().equals(fnLookup)).findFirst();
                     UnaryTests ut = processSimplePredicateUnaryOrBinary(predicatesForInput, df);
                     if (ut.getText().startsWith("\"") && ut.getText().endsWith("\"")) {
@@ -195,9 +194,9 @@ public class Converter {
         }
 
         for (DataField df : pmml.getDataDictionary().getDataFields()) {
-            if (df.getDataType() == DataType.STRING && predictorsLoVs.containsKey(df.getName().getValue())) {
+            if (df.getDataType() == DataType.STRING && predictorsLoVs.containsKey(df.getName())) {
                 for (Value value : df.getValues()) {
-                    predictorsLoVs.get(df.getName().getValue()).add("\""+value.getValue().toString()+"\"");
+                    predictorsLoVs.get(df.getName()).add("\""+value.getValue().toString()+"\"");
                 }
             }
         }
@@ -476,7 +475,7 @@ public class Converter {
     }
 
     private static String feelTypeFromDD(DataDictionary dd, String id) {
-        FieldName lookup = FieldName.create(id);
+         String lookup =id;
         Optional<DataField> opt = dd.getDataFields().stream().filter(df -> df.getName().equals(lookup)).findFirst();
         if (opt.isEmpty()) {
             return "Any";
diff --git a/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/SimpleRuleRow.java b/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/SimpleRuleRow.java
index f5b19f4e05..25171444d1 100644
--- a/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/SimpleRuleRow.java
+++ b/kie-dmn/kie-dmn-ruleset2dmn-parent/kie-dmn-ruleset2dmn/src/main/java/org/kie/dmn/ruleset2dmn/SimpleRuleRow.java
@@ -37,7 +37,7 @@ public class SimpleRuleRow {
         Predicate rootPredicate = r.getPredicate();
         if (rootPredicate instanceof SimplePredicate) {
             SimplePredicate sp = (SimplePredicate) rootPredicate;
-            map.computeIfAbsent(sp.getField().getValue(), k -> new ArrayList<SimplePredicate>()).add(sp);
+            map.computeIfAbsent(sp.getField(), k -> new ArrayList<SimplePredicate>()).add(sp);
         } else {
             if (!(rootPredicate instanceof CompoundPredicate)) {
                 throw new UnsupportedOperationException("Was expecting a CompoundPredicate, found: "+rootPredicate.getClass());
@@ -48,7 +48,7 @@ public class SimpleRuleRow {
             }
             for (Predicate c : cPredicate.getPredicates()) {
                 SimplePredicate sp = (SimplePredicate) c;
-                map.computeIfAbsent(sp.getField().getValue(), k -> new ArrayList<SimplePredicate>()).add(sp);
+                map.computeIfAbsent(sp.getField(), k -> new ArrayList<SimplePredicate>()).add(sp);
             }
         }
     }
diff --git a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/MCDC2TCKGenerator.java b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/MCDC2TCKGenerator.java
index 17147f54a7..4a32d87f94 100644
--- a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/MCDC2TCKGenerator.java
+++ b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/MCDC2TCKGenerator.java
@@ -21,10 +21,10 @@ import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBElement;
-import javax.xml.bind.JAXBException;
-import javax.xml.bind.Marshaller;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBElement;
+import jakarta.xml.bind.JAXBException;
+import jakarta.xml.bind.Marshaller;
 
 import org.kie.dmn.model.api.DecisionTable;
 import org.kie.dmn.validation.dtanalysis.mcdc.MCDCAnalyser.PosNegBlock;
diff --git a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/ObjectFactory.java b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/ObjectFactory.java
index 48a48628e4..e5e128f026 100644
--- a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/ObjectFactory.java
+++ b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/ObjectFactory.java
@@ -2,9 +2,9 @@
 package org.kie.dmn.validation.dtanalysis.mcdc.dmntck;
 
 import org.kie.dmn.feel.util.Generated;
-import javax.xml.bind.JAXBElement;
-import javax.xml.bind.annotation.XmlElementDecl;
-import javax.xml.bind.annotation.XmlRegistry;
+import jakarta.xml.bind.JAXBElement;
+import jakarta.xml.bind.annotation.XmlElementDecl;
+import jakarta.xml.bind.annotation.XmlRegistry;
 import javax.xml.namespace.QName;
 
 
diff --git a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/TestCaseType.java b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/TestCaseType.java
index b2006fd5a2..cd387bc2f6 100644
--- a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/TestCaseType.java
+++ b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/TestCaseType.java
@@ -2,9 +2,9 @@
 package org.kie.dmn.validation.dtanalysis.mcdc.dmntck;
 
 import org.kie.dmn.feel.util.Generated;
-import javax.xml.bind.annotation.XmlEnum;
-import javax.xml.bind.annotation.XmlEnumValue;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlEnum;
+import jakarta.xml.bind.annotation.XmlEnumValue;
+import jakarta.xml.bind.annotation.XmlType;
 
 
 /**
diff --git a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/TestCases.java b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/TestCases.java
index 45caf032e2..138efc4c08 100644
--- a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/TestCases.java
+++ b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/TestCases.java
@@ -7,16 +7,16 @@ import java.util.HashMap;
 import java.util.Map;
 
 import org.kie.dmn.feel.util.Generated;
-import javax.xml.bind.JAXBElement;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAnyAttribute;
-import javax.xml.bind.annotation.XmlAnyElement;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSchemaType;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.JAXBElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAnyAttribute;
+import jakarta.xml.bind.annotation.XmlAnyElement;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlType;
 import javax.xml.namespace.QName;
 
 import org.w3c.dom.Element;
diff --git a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/ValueType.java b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/ValueType.java
index 30254ad028..0f02b4ce32 100644
--- a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/ValueType.java
+++ b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/ValueType.java
@@ -7,17 +7,17 @@ import java.util.HashMap;
 import java.util.Map;
 
 import org.kie.dmn.feel.util.Generated;
-import javax.xml.bind.JAXBElement;
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAnyAttribute;
-import javax.xml.bind.annotation.XmlAnyElement;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementRef;
-import javax.xml.bind.annotation.XmlSchemaType;
-import javax.xml.bind.annotation.XmlSeeAlso;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.JAXBElement;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAnyAttribute;
+import jakarta.xml.bind.annotation.XmlAnyElement;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementRef;
+import jakarta.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlSeeAlso;
+import jakarta.xml.bind.annotation.XmlType;
 import javax.xml.namespace.QName;
 
 import org.w3c.dom.Element;
diff --git a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/package-info.java b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/package-info.java
index f6c8310e3a..9b27fa3be2 100644
--- a/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/package-info.java
+++ b/kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/dtanalysis/mcdc/dmntck/package-info.java
@@ -4,4 +4,4 @@
                                      xmlns = {@XmlNs(prefix = "tc", namespaceURI = "http://www.omg.org/spec/DMN/20160719/testcase")})
 package org.kie.dmn.validation.dtanalysis.mcdc.dmntck;
 
-import javax.xml.bind.annotation.XmlNs;
+import jakarta.xml.bind.annotation.XmlNs;
diff --git a/kie-internal/pom.xml b/kie-internal/pom.xml
index 1acfd99581..7f2ebe893e 100644
--- a/kie-internal/pom.xml
+++ b/kie-internal/pom.xml
@@ -76,9 +76,10 @@
        <scope>provided</scope>
     </dependency>
     <dependency>
-      <groupId>com.sun.xml.bind</groupId>
-      <artifactId>jaxb-impl</artifactId>
+      <groupId>org.glassfish.jaxb</groupId>
+      <artifactId>jaxb-runtime</artifactId>
       <scope>provided</scope>
+      <version>4.0.3</version>
     </dependency>
 
     <dependency>
diff --git a/kie-internal/src/main/java/org/kie/internal/builder/help/DroolsJaxbHelperProvider.java b/kie-internal/src/main/java/org/kie/internal/builder/help/DroolsJaxbHelperProvider.java
index 398a8ca6b2..708942c667 100644
--- a/kie-internal/src/main/java/org/kie/internal/builder/help/DroolsJaxbHelperProvider.java
+++ b/kie-internal/src/main/java/org/kie/internal/builder/help/DroolsJaxbHelperProvider.java
@@ -19,8 +19,8 @@ package org.kie.internal.builder.help;
 import java.io.IOException;
 import java.util.Map;
 
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBException;
 
 import com.sun.tools.xjc.Options;
 import org.kie.api.KieBase;
diff --git a/kie-internal/src/main/java/org/kie/internal/builder/help/KnowledgeBuilderHelper.java b/kie-internal/src/main/java/org/kie/internal/builder/help/KnowledgeBuilderHelper.java
index 5bc9fb6176..aef8a66011 100644
--- a/kie-internal/src/main/java/org/kie/internal/builder/help/KnowledgeBuilderHelper.java
+++ b/kie-internal/src/main/java/org/kie/internal/builder/help/KnowledgeBuilderHelper.java
@@ -20,8 +20,8 @@ import java.io.IOException;
 import java.util.Collections;
 import java.util.Map;
 
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBException;
 
 import com.sun.tools.xjc.Options;
 import org.kie.api.KieBase;
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/CorrelationKeyXmlAdapter.java b/kie-internal/src/main/java/org/kie/internal/jaxb/CorrelationKeyXmlAdapter.java
index 78b83922f0..7b3f93bf2b 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/CorrelationKeyXmlAdapter.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/CorrelationKeyXmlAdapter.java
@@ -21,7 +21,7 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 import org.kie.internal.KieInternalServices;
 import org.kie.internal.process.CorrelationKey;
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/LocalDateTimeXmlAdapter.java b/kie-internal/src/main/java/org/kie/internal/jaxb/LocalDateTimeXmlAdapter.java
index 1a8848a4ff..281e5e1823 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/LocalDateTimeXmlAdapter.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/LocalDateTimeXmlAdapter.java
@@ -21,7 +21,7 @@ import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
 import java.time.temporal.ChronoField;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 public class LocalDateTimeXmlAdapter extends XmlAdapter<String, LocalDateTime> {
 
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/LocalDateXmlAdapter.java b/kie-internal/src/main/java/org/kie/internal/jaxb/LocalDateXmlAdapter.java
index c41076f7a5..bdcc613daf 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/LocalDateXmlAdapter.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/LocalDateXmlAdapter.java
@@ -18,7 +18,7 @@ package org.kie.internal.jaxb;
 import java.time.DateTimeException;
 import java.time.LocalDate;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 public class LocalDateXmlAdapter extends XmlAdapter<String, LocalDate> {
 
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/LocalTimeXmlAdapter.java b/kie-internal/src/main/java/org/kie/internal/jaxb/LocalTimeXmlAdapter.java
index 184f65b0f2..6894454118 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/LocalTimeXmlAdapter.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/LocalTimeXmlAdapter.java
@@ -21,7 +21,7 @@ import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
 import java.time.temporal.ChronoField;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 public class LocalTimeXmlAdapter extends XmlAdapter<String, LocalTime> {
 
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/OffsetDateTimeXmlAdapter.java b/kie-internal/src/main/java/org/kie/internal/jaxb/OffsetDateTimeXmlAdapter.java
index 7774380f71..d2cf1a1c93 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/OffsetDateTimeXmlAdapter.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/OffsetDateTimeXmlAdapter.java
@@ -21,7 +21,7 @@ import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
 import java.time.temporal.ChronoField;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 public class OffsetDateTimeXmlAdapter extends XmlAdapter<String, OffsetDateTime> {
 
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueEntry.java b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueEntry.java
index 6cb8412e19..9bdfb6c0e5 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueEntry.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueEntry.java
@@ -17,12 +17,12 @@ package org.kie.internal.jaxb;
 
 import java.util.Map.Entry;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlAttribute;
-import javax.xml.bind.annotation.XmlSchemaType;
-import javax.xml.bind.annotation.XmlType;
-import javax.xml.bind.annotation.XmlValue;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlAttribute;
+import jakarta.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlValue;
 
 
 @XmlType
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueMap.java b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueMap.java
index 7cbab15791..db46e1e033 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueMap.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueMap.java
@@ -23,10 +23,10 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 import static org.kie.internal.jaxb.StringKeyObjectValueMapXmlAdapter.createJaxbStringObjectMapEntry;
 import static org.kie.internal.jaxb.StringKeyObjectValueMapXmlAdapter.deserializeObject;
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueMapXmlAdapter.java b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueMapXmlAdapter.java
index 0f8326be2f..3a0fd51b2d 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueMapXmlAdapter.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyObjectValueMapXmlAdapter.java
@@ -25,7 +25,7 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueEntry.java b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueEntry.java
index 07ac95248f..d22ef755e3 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueEntry.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueEntry.java
@@ -15,10 +15,10 @@
 
 package org.kie.internal.jaxb;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 
 @XmlType
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueMap.java b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueMap.java
index d05c3b3606..d84990d6f3 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueMap.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueMap.java
@@ -23,10 +23,10 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * This implements {@link Map} in order to fool JSON..
diff --git a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueMapXmlAdapter.java b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueMapXmlAdapter.java
index caf41ec85a..ccf5431e32 100644
--- a/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueMapXmlAdapter.java
+++ b/kie-internal/src/main/java/org/kie/internal/jaxb/StringKeyStringValueMapXmlAdapter.java
@@ -19,7 +19,7 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 
-import javax.xml.bind.annotation.adapters.XmlAdapter;
+import jakarta.xml.bind.annotation.adapters.XmlAdapter;
 
 /**
  * This is a {@link XmlAdapter} for mapping Map&lt;String, String&gt; instances
diff --git a/kie-internal/src/main/java/org/kie/internal/query/QueryContext.java b/kie-internal/src/main/java/org/kie/internal/query/QueryContext.java
index c8d54837c2..e0b739007b 100644
--- a/kie-internal/src/main/java/org/kie/internal/query/QueryContext.java
+++ b/kie-internal/src/main/java/org/kie/internal/query/QueryContext.java
@@ -16,9 +16,9 @@
 
 package org.kie.internal.query;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType
 @XmlAccessorType(XmlAccessType.FIELD)
diff --git a/kie-internal/src/main/java/org/kie/internal/query/QueryFilter.java b/kie-internal/src/main/java/org/kie/internal/query/QueryFilter.java
index 21a3b82277..52ef85b198 100644
--- a/kie-internal/src/main/java/org/kie/internal/query/QueryFilter.java
+++ b/kie-internal/src/main/java/org/kie/internal/query/QueryFilter.java
@@ -20,9 +20,9 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlSchemaType;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.kie.internal.jaxb.StringKeyObjectValueMapXmlAdapter;
 
diff --git a/kie-internal/src/main/java/org/kie/internal/query/data/QueryData.java b/kie-internal/src/main/java/org/kie/internal/query/data/QueryData.java
index a07910db94..04acf1f1ab 100644
--- a/kie-internal/src/main/java/org/kie/internal/query/data/QueryData.java
+++ b/kie-internal/src/main/java/org/kie/internal/query/data/QueryData.java
@@ -15,10 +15,10 @@
 
 package org.kie.internal.query.data;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 import org.kie.internal.query.QueryContext;
 
diff --git a/kie-internal/src/main/java/org/kie/internal/query/data/QueryParameters.java b/kie-internal/src/main/java/org/kie/internal/query/data/QueryParameters.java
index 3c22fb6b7f..c31fd5bbbb 100644
--- a/kie-internal/src/main/java/org/kie/internal/query/data/QueryParameters.java
+++ b/kie-internal/src/main/java/org/kie/internal/query/data/QueryParameters.java
@@ -21,12 +21,12 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlTransient;
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlTransient;
+import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 
 import org.kie.internal.jaxb.StringKeyObjectValueMapXmlAdapter;
 
diff --git a/kie-internal/src/main/java/org/kie/internal/runtime/conf/DeploymentDescriptor.java b/kie-internal/src/main/java/org/kie/internal/runtime/conf/DeploymentDescriptor.java
index 4f0cf1ebb8..68fdf05e9b 100644
--- a/kie-internal/src/main/java/org/kie/internal/runtime/conf/DeploymentDescriptor.java
+++ b/kie-internal/src/main/java/org/kie/internal/runtime/conf/DeploymentDescriptor.java
@@ -18,8 +18,8 @@ package org.kie.internal.runtime.conf;
 
 import java.util.List;
 
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlType;
 
 import org.kie.api.remote.Remotable;
 
diff --git a/kie-internal/src/main/java/org/kie/internal/runtime/conf/MergeMode.java b/kie-internal/src/main/java/org/kie/internal/runtime/conf/MergeMode.java
index 2ca6a37da3..d1829b33e7 100644
--- a/kie-internal/src/main/java/org/kie/internal/runtime/conf/MergeMode.java
+++ b/kie-internal/src/main/java/org/kie/internal/runtime/conf/MergeMode.java
@@ -16,7 +16,7 @@
 
 package org.kie.internal.runtime.conf;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 /**
  * Defines merging strategy of two descriptors
diff --git a/kie-internal/src/main/java/org/kie/internal/runtime/conf/NamedObjectModel.java b/kie-internal/src/main/java/org/kie/internal/runtime/conf/NamedObjectModel.java
index 22f0573bb5..cfdef63ab4 100644
--- a/kie-internal/src/main/java/org/kie/internal/runtime/conf/NamedObjectModel.java
+++ b/kie-internal/src/main/java/org/kie/internal/runtime/conf/NamedObjectModel.java
@@ -16,11 +16,11 @@
 
 package org.kie.internal.runtime.conf;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
 
 /**
  * Extension of <code>ObjectModel</code> that provides unique name for the object model
diff --git a/kie-internal/src/main/java/org/kie/internal/runtime/conf/ObjectModel.java b/kie-internal/src/main/java/org/kie/internal/runtime/conf/ObjectModel.java
index 5d8ffe8134..2ae91cff15 100644
--- a/kie-internal/src/main/java/org/kie/internal/runtime/conf/ObjectModel.java
+++ b/kie-internal/src/main/java/org/kie/internal/runtime/conf/ObjectModel.java
@@ -21,12 +21,12 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
 /**
  * Object model that defines how and of what type the object instance should be created.<br>
  * The how is actually delegated to resolved implementation <code>ObjectModelResolver</code>
diff --git a/kie-internal/src/main/java/org/kie/internal/runtime/conf/RuntimeStrategy.java b/kie-internal/src/main/java/org/kie/internal/runtime/conf/RuntimeStrategy.java
index a70f3100d0..415a2c5388 100644
--- a/kie-internal/src/main/java/org/kie/internal/runtime/conf/RuntimeStrategy.java
+++ b/kie-internal/src/main/java/org/kie/internal/runtime/conf/RuntimeStrategy.java
@@ -15,7 +15,7 @@
 
 package org.kie.internal.runtime.conf;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType
 public enum RuntimeStrategy {
diff --git a/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/DeploymentDescriptorIO.java b/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/DeploymentDescriptorIO.java
index aeeef03797..cb31932264 100644
--- a/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/DeploymentDescriptorIO.java
+++ b/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/DeploymentDescriptorIO.java
@@ -21,10 +21,10 @@ import java.io.StringWriter;
 import java.net.URL;
 
 import javax.xml.XMLConstants;
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBException;
-import javax.xml.bind.Marshaller;
-import javax.xml.bind.Unmarshaller;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBException;
+import jakarta.xml.bind.Marshaller;
+import jakarta.xml.bind.Unmarshaller;
 import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
 
diff --git a/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/DeploymentDescriptorImpl.java b/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/DeploymentDescriptorImpl.java
index c2907e3a7e..a8d8dd299e 100644
--- a/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/DeploymentDescriptorImpl.java
+++ b/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/DeploymentDescriptorImpl.java
@@ -27,13 +27,13 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import javax.xml.bind.annotation.XmlAccessType;
-import javax.xml.bind.annotation.XmlAccessorType;
-import javax.xml.bind.annotation.XmlElement;
-import javax.xml.bind.annotation.XmlElementWrapper;
-import javax.xml.bind.annotation.XmlRootElement;
-import javax.xml.bind.annotation.XmlSchemaType;
-import javax.xml.bind.annotation.XmlTransient;
+import jakarta.xml.bind.annotation.XmlAccessType;
+import jakarta.xml.bind.annotation.XmlAccessorType;
+import jakarta.xml.bind.annotation.XmlElement;
+import jakarta.xml.bind.annotation.XmlElementWrapper;
+import jakarta.xml.bind.annotation.XmlRootElement;
+import jakarta.xml.bind.annotation.XmlSchemaType;
+import jakarta.xml.bind.annotation.XmlTransient;
 
 import org.kie.internal.runtime.conf.AuditMode;
 import org.kie.internal.runtime.conf.BuilderHandler;
diff --git a/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/TransientObjectModel.java b/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/TransientObjectModel.java
index eb2e3dcbf9..89d6b93d31 100644
--- a/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/TransientObjectModel.java
+++ b/kie-internal/src/main/java/org/kie/internal/runtime/manager/deploy/TransientObjectModel.java
@@ -16,7 +16,7 @@
 
 package org.kie.internal.runtime.manager.deploy;
 
-import javax.xml.bind.annotation.XmlTransient;
+import jakarta.xml.bind.annotation.XmlTransient;
 
 import org.kie.internal.runtime.conf.ObjectModel;
 
diff --git a/kie-internal/src/main/java/org/kie/internal/task/api/model/AccessType.java b/kie-internal/src/main/java/org/kie/internal/task/api/model/AccessType.java
index e892aba698..12420b0f79 100644
--- a/kie-internal/src/main/java/org/kie/internal/task/api/model/AccessType.java
+++ b/kie-internal/src/main/java/org/kie/internal/task/api/model/AccessType.java
@@ -19,7 +19,7 @@
  */
 package org.kie.internal.task.api.model;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType
 public enum AccessType {
diff --git a/kie-internal/src/main/java/org/kie/internal/task/api/model/SubTasksStrategy.java b/kie-internal/src/main/java/org/kie/internal/task/api/model/SubTasksStrategy.java
index 86cf39d196..982920d369 100644
--- a/kie-internal/src/main/java/org/kie/internal/task/api/model/SubTasksStrategy.java
+++ b/kie-internal/src/main/java/org/kie/internal/task/api/model/SubTasksStrategy.java
@@ -16,7 +16,7 @@
 
 package org.kie.internal.task.api.model;
 
-import javax.xml.bind.annotation.XmlType;
+import jakarta.xml.bind.annotation.XmlType;
 
 @XmlType
 public enum SubTasksStrategy{
diff --git a/kie-internal/src/test/java/org/kie/internal/runtime/manager/deploy/JaxbMarshalingTest.java b/kie-internal/src/test/java/org/kie/internal/runtime/manager/deploy/JaxbMarshalingTest.java
index 29f8b7e2f8..65e66814a9 100644
--- a/kie-internal/src/test/java/org/kie/internal/runtime/manager/deploy/JaxbMarshalingTest.java
+++ b/kie-internal/src/test/java/org/kie/internal/runtime/manager/deploy/JaxbMarshalingTest.java
@@ -18,9 +18,9 @@ package org.kie.internal.runtime.manager.deploy;
 
 import java.io.StringWriter;
 
-import javax.xml.bind.JAXBContext;
-import javax.xml.bind.JAXBException;
-import javax.xml.bind.Marshaller;
+import jakarta.xml.bind.JAXBContext;
+import jakarta.xml.bind.JAXBException;
+import jakarta.xml.bind.Marshaller;
 
 import org.junit.Test;
 import org.kie.internal.runtime.conf.DeploymentDescriptor;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java
index faeebf018f..ab667a71c9 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/dto/CommonCompilationDTO.java
@@ -116,7 +116,7 @@ public class CommonCompilationDTO<T extends Model> implements CompilationDTO<T>
             targetDataField = this.fields.stream()
                     .filter(DataField.class::isInstance)
                     .map(DataField.class::cast)
-                    .filter(field -> Objects.equals(getTargetFieldName(), field.getName().getValue()))
+                    .filter(field -> Objects.equals(getTargetFieldName(),field.getName()))
                     .findFirst().orElse(null);
         } else {
             targetDataField = null;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java
index 8f99b7d8c8..b4e5e7069f 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/utils/ModelUtils.java
@@ -48,8 +48,8 @@ import org.dmg.pmml.TargetValue;
 import org.dmg.pmml.Targets;
 import org.dmg.pmml.TransformationDictionary;
 import org.dmg.pmml.Value;
-import org.jpmml.model.inlinetable.InputCell;
-import org.jpmml.model.inlinetable.OutputCell;
+import org.jpmml.model.cells.InputCell;
+import org.jpmml.model.cells.OutputCell;
 import org.kie.pmml.api.enums.CAST_INTEGER;
 import org.kie.pmml.api.enums.DATA_TYPE;
 import org.kie.pmml.api.enums.FIELD_USAGE_TYPE;
@@ -120,8 +120,8 @@ public class ModelUtils {
         if (model.getMiningSchema() != null && model.getMiningSchema().getMiningFields() != null) {
             for (MiningField miningField : model.getMiningSchema().getMiningFields()) {
                 if (MiningField.UsageType.TARGET.equals(miningField.getUsageType()) || MiningField.UsageType.PREDICTED.equals(miningField.getUsageType())) {
-                    OP_TYPE opType = getOpType(fields, model, miningField.getName().getValue());
-                    toReturn.add(new KiePMMLNameOpType(miningField.getName().getValue(), opType));
+                    OP_TYPE opType = getOpType(fields, model,miningField.getName());
+                    toReturn.add(new KiePMMLNameOpType(miningField.getName(), opType));
                 }
             }
         }
@@ -142,8 +142,7 @@ public class ModelUtils {
         if (model.getMiningSchema() != null && model.getMiningSchema().getMiningFields() != null) {
             for (MiningField miningField : model.getMiningSchema().getMiningFields()) {
                 if (MiningField.UsageType.TARGET.equals(miningField.getUsageType()) || MiningField.UsageType.PREDICTED.equals(miningField.getUsageType())) {
-                    toReturn.put(miningField.getName().getValue(), getDATA_TYPE(fields,
-                                                                                miningField.getName().getValue()));
+                    toReturn.put(miningField.getName(), getDATA_TYPE(fields,miningField.getName()));
                 }
             }
         }
@@ -179,7 +178,7 @@ public class ModelUtils {
                                                         final String fieldName) {
         return fields == null ? Optional.empty() :
                 fields.stream()
-                        .filter(dataField -> Objects.equals(fieldName, dataField.getName().getValue()) && dataField.getOpType() != null)
+                        .filter(dataField -> Objects.equals(fieldName,dataField.getName()) && dataField.getOpType() != null)
                         .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()))
                         .findFirst();
     }
@@ -193,7 +192,7 @@ public class ModelUtils {
     public static Optional<OP_TYPE> getOpTypeFromMiningFields(MiningSchema miningSchema, String fieldName) {
         if (miningSchema != null && miningSchema.getMiningFields() != null) {
             return miningSchema.getMiningFields().stream()
-                    .filter(miningField -> Objects.equals(fieldName, miningField.getName().getValue()) && miningField.getOpType() != null)
+                    .filter(miningField -> Objects.equals(fieldName,miningField.getName()) && miningField.getOpType() != null)
                     .findFirst()
                     .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()));
         } else {
@@ -210,7 +209,7 @@ public class ModelUtils {
     public static Optional<OP_TYPE> getOpTypeFromTargets(Targets targets, String fieldName) {
         if (targets != null && targets.getTargets() != null) {
             return targets.getTargets().stream()
-                    .filter(target -> Objects.equals(fieldName, target.getField().getValue()) && target.getOpType() != null)
+                    .filter(target -> Objects.equals(fieldName,target.getField()) && target.getOpType() != null)
                     .findFirst()
                     .map(dataField -> OP_TYPE.byName(dataField.getOpType().value()));
         } else {
@@ -228,7 +227,7 @@ public class ModelUtils {
     public static DataType getDataType(final List<Field<?>> fields,
                                        final String fieldName) {
         return fields.stream()
-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
+                .filter(fld -> Objects.equals(fieldName,fld.getName()))
                 .map(Field::getDataType)
                 .findFirst()
                 .orElseThrow(() -> new KiePMMLInternalException(String.format("Failed to find DataType for " +
@@ -244,7 +243,7 @@ public class ModelUtils {
      */
     public static DATA_TYPE getDATA_TYPE(final List<Field<?>> fields, String fieldName) {
         Optional<DATA_TYPE> toReturn = fields.stream()
-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
+                .filter(fld -> Objects.equals(fieldName,fld.getName()))
                 .findFirst()
                 .map(dataField -> DATA_TYPE.byName(dataField.getDataType().value()));
         return toReturn.orElseThrow(() -> new KiePMMLInternalException(String.format("Failed to find DATA_TYPE for " +
@@ -328,7 +327,7 @@ public class ModelUtils {
      */
     public static org.kie.pmml.api.models.MiningField convertToKieMiningField(final MiningField toConvert,
                                                                               final Field<?> field) {
-        final String name = toConvert.getName() != null ? toConvert.getName().getValue() : null;
+        final String name = toConvert.getName() != null ?toConvert.getName() : null;
         final FIELD_USAGE_TYPE fieldUsageType = toConvert.getUsageType() != null ?
                 FIELD_USAGE_TYPE.byName(toConvert.getUsageType().value()) : null;
         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
@@ -405,13 +404,13 @@ public class ModelUtils {
      */
     public static org.kie.pmml.api.models.OutputField convertToKieOutputField(final OutputField toConvert,
                                                                               final Field<?> field) {
-        final String name = toConvert.getName() != null ? toConvert.getName().getValue() : null;
+        final String name = toConvert.getName() != null ?toConvert.getName() : null;
         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
         final DATA_TYPE dataFieldDataType = field != null ? DATA_TYPE.byName(field.getDataType().value()) :
                 null;
         final DATA_TYPE dataType = toConvert.getDataType() != null ?
                 DATA_TYPE.byName(toConvert.getDataType().value()) : dataFieldDataType;
-        final String targetField = toConvert.getTargetField() != null ? toConvert.getTargetField().getValue() : null;
+        final String targetField = toConvert.getTargetField() != null ?toConvert.getTargetField() : null;
         final RESULT_FEATURE resultFeature = toConvert.getResultFeature() != null ?
                 RESULT_FEATURE.byName(toConvert.getResultFeature().value()) : null;
         final List<String> allowedValues = field instanceof DataField ?
@@ -456,8 +455,7 @@ public class ModelUtils {
                 toConvert.getRescaleConstant().doubleValue() : null;
         final Double rescaleFactor = toConvert.getRescaleFactor() != null ? toConvert.getRescaleFactor().doubleValue() : null;
         return new TargetField(targetValues,
-                               opType,
-                               toConvert.getField().getValue(),
+                               opType,toConvert.getField(),
                                castInteger,
                                min,
                                max,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java
index 29e0f7b7d0..606759ffdc 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/mocks/TestModel.java
@@ -122,4 +122,14 @@ public class TestModel extends Model {
     public VisitorAction accept(Visitor visitor) {
         return null;
     }
+
+    @Override
+    public MiningFunction requireMiningFunction() {
+        return null;
+    }
+
+    @Override
+    public MiningSchema requireMiningSchema() {
+        return null;
+    }
 }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java
index 9c855e91bc..dd1de2f0d4 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/testutils/PMMLModelTestUtils.java
@@ -28,6 +28,7 @@ import org.dmg.pmml.Apply;
 import org.dmg.pmml.Array;
 import org.dmg.pmml.CompareFunction;
 import org.dmg.pmml.ComparisonMeasure;
+import org.dmg.pmml.ComplexScoreDistribution;
 import org.dmg.pmml.CompoundPredicate;
 import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataDictionary;
@@ -40,7 +41,6 @@ import org.dmg.pmml.DiscretizeBin;
 import org.dmg.pmml.Euclidean;
 import org.dmg.pmml.Field;
 import org.dmg.pmml.FieldColumnPair;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.InlineTable;
 import org.dmg.pmml.Interval;
@@ -86,8 +86,8 @@ import org.dmg.pmml.regression.NumericPredictor;
 import org.dmg.pmml.regression.PredictorTerm;
 import org.dmg.pmml.regression.RegressionModel;
 import org.dmg.pmml.regression.RegressionTable;
-import org.jpmml.model.inlinetable.InputCell;
-import org.jpmml.model.inlinetable.OutputCell;
+import org.jpmml.model.cells.InputCell;
+import org.jpmml.model.cells.OutputCell;
 import org.kie.pmml.api.enums.DATA_TYPE;
 import org.kie.pmml.api.enums.Named;
 import org.kie.pmml.api.enums.RESULT_FEATURE;
@@ -191,7 +191,7 @@ public class PMMLModelTestUtils {
         miningSchema.addMiningFields(predictedMiningField);
         Output output = new Output();
         OutputField outputField = new OutputField();
-        outputField.setName(FieldName.create("OUTPUT_" + lastDataField.getName().getValue()));
+        outputField.setName("OUTPUT_" +lastDataField.getName());
         outputField.setDataType(lastDataField.getDataType());
         outputField.setOpType(getRandomOpType());
         toReturn.setModelName(RandomStringUtils.random(6, true, false));
@@ -219,7 +219,7 @@ public class PMMLModelTestUtils {
         miningSchema.addMiningFields(predictedMiningField);
         Output output = new Output();
         OutputField outputField = new OutputField();
-        outputField.setName(FieldName.create("OUTPUT_" + lastDataField.getName().getValue()));
+        outputField.setName("OUTPUT_" +lastDataField.getName());
         outputField.setDataType(lastDataField.getDataType());
         outputField.setOpType(getRandomOpType());
         toReturn.setModelName(RandomStringUtils.random(6, true, false));
@@ -279,7 +279,7 @@ public class PMMLModelTestUtils {
 
     public static CategoricalPredictor getCategoricalPredictor(String name, double value, double coefficient) {
         CategoricalPredictor toReturn = new CategoricalPredictor();
-        toReturn.setField(FieldName.create(name));
+        toReturn.setField(name);
         toReturn.setValue(value);
         toReturn.setCoefficient(coefficient);
         return toReturn;
@@ -287,7 +287,7 @@ public class PMMLModelTestUtils {
 
     public static NumericPredictor getNumericPredictor(String name, int exponent, double coefficient) {
         NumericPredictor toReturn = new NumericPredictor();
-        toReturn.setField(FieldName.create(name));
+        toReturn.setField(name);
         toReturn.setExponent(exponent);
         toReturn.setCoefficient(coefficient);
         return toReturn;
@@ -295,7 +295,7 @@ public class PMMLModelTestUtils {
 
     public static PredictorTerm getPredictorTerm(String name, double coefficient, List<String> fieldRefNames) {
         PredictorTerm toReturn = new PredictorTerm();
-        toReturn.setName(FieldName.create(name));
+        toReturn.setName(name);
         toReturn.setCoefficient(coefficient);
         toReturn.addFieldRefs(fieldRefNames.stream().map(PMMLModelTestUtils::getFieldRef).toArray(FieldRef[]::new));
         return toReturn;
@@ -320,7 +320,7 @@ public class PMMLModelTestUtils {
 
     public static DataField getDataField(String fieldName, OpType opType) {
         DataField toReturn = new DataField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         toReturn.setOpType(opType);
         return toReturn;
     }
@@ -333,14 +333,14 @@ public class PMMLModelTestUtils {
 
     public static MiningField getMiningField(String fieldName, MiningField.UsageType usageType) {
         MiningField toReturn = getRandomMiningField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         toReturn.setUsageType(usageType);
         return toReturn;
     }
 
     public static Target getTarget(String fieldTarget, OpType opType) {
         Target toReturn = new Target();
-        toReturn.setField(FieldName.create(fieldTarget));
+        toReturn.setField(fieldTarget);
         toReturn.setOpType(opType);
         return toReturn;
     }
@@ -359,7 +359,7 @@ public class PMMLModelTestUtils {
 
     public static DerivedField getDerivedField(String fieldName) {
         DerivedField toReturn = new DerivedField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         toReturn.setDataType(getRandomDataType());
         toReturn.setOpType(getRandomOpType());
         Constant expression = new Constant(5);
@@ -383,7 +383,7 @@ public class PMMLModelTestUtils {
 
     public static DataField getRandomDataField() {
         DataField toReturn = new DataField();
-        toReturn.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setName(RandomStringUtils.random(6, true, false));
         toReturn.setDataType(getRandomDataType());
         toReturn.setOpType(getRandomOpType());
         IntStream.range(0, 3).forEach(i -> {
@@ -410,7 +410,7 @@ public class PMMLModelTestUtils {
 
     public static MiningField getRandomMiningField() {
         Random random = new Random();
-        MiningField toReturn = new MiningField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        MiningField toReturn = new MiningField(RandomStringUtils.random(6, true, false));
         toReturn.setInvalidValueTreatment(getRandomInvalidValueTreatmentMethod());
         toReturn.setMissingValueTreatment(getRandomMissingValueTreatmentMethod());
         toReturn.setOutlierTreatment(getRandomOutlierTreatmentMethod());
@@ -433,13 +433,13 @@ public class PMMLModelTestUtils {
     }
 
     public static OutputField getRandomOutputField() {
-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
+         String fieldName =RandomStringUtils.random(6, true, false);
         OutputField toReturn = new OutputField();
         toReturn.setName(fieldName);
         toReturn.setOpType(getRandomOpType());
         toReturn.setDataType(getRandomDataType());
         toReturn.setValue(getRandomValue(toReturn.getDataType()));
-        fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
+        fieldName =RandomStringUtils.random(6, true, false);
         toReturn.setTargetField(fieldName);
         toReturn.setResultFeature(getRandomResultFeature());
         toReturn.setExpression(getRandomConstant());
@@ -449,7 +449,7 @@ public class PMMLModelTestUtils {
     public static Target getRandomTarget() {
         Random random = new Random();
         Target toReturn = new Target();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setOpType(getRandomOpType());
         toReturn.setMax(random.nextInt(234));
         toReturn.setMin(random.nextInt(23));
@@ -473,7 +473,7 @@ public class PMMLModelTestUtils {
 
     public static FieldColumnPair getRandomFieldColumnPair() {
         FieldColumnPair toReturn = new FieldColumnPair();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setColumn(RandomStringUtils.random(6, true, false));
         return toReturn;
     }
@@ -490,7 +490,7 @@ public class PMMLModelTestUtils {
         Random random = new Random();
         ClusteringField toReturn = new ClusteringField();
         toReturn.setCenterField(getRandomClusteringFieldCenterField());
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setCompareFunction(getRandomCompareFunction());
         toReturn.setFieldWeight(random.nextDouble());
         toReturn.setComparisons(getRandomComparisons());
@@ -528,7 +528,7 @@ public class PMMLModelTestUtils {
         Discretize toReturn = new Discretize();
         toReturn.setDataType(getRandomDataType());
         toReturn.setDefaultValue(RandomStringUtils.random(6, true, false));
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setMapMissingTo(RandomStringUtils.random(6, true, false));
         IntStream.range(0, 3).forEach(i -> toReturn.addDiscretizeBins(getRandomDiscretizeBin()));
         return toReturn;
@@ -536,7 +536,7 @@ public class PMMLModelTestUtils {
 
     public static FieldRef getRandomFieldRef() {
         FieldRef toReturn = new FieldRef();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setMapMissingTo(RandomStringUtils.random(6, true, false));
         return toReturn;
     }
@@ -562,7 +562,7 @@ public class PMMLModelTestUtils {
         double mapMissingTo = random.nextInt(100) / 10;
         NormContinuous toReturn = new NormContinuous();
         IntStream.range(0, 3).forEach(i -> toReturn.addLinearNorms(getRandomLinearNorm()));
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setOutliers(getRandomOutlierTreatmentMethod());
         toReturn.setMapMissingTo(mapMissingTo);
         return toReturn;
@@ -570,7 +570,7 @@ public class PMMLModelTestUtils {
 
     public static NormDiscrete getRandomNormDiscrete() {
         NormDiscrete toReturn = new NormDiscrete();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setValue(getRandomObject(DataType.INTEGER));
         toReturn.setMapMissingTo((Number) getRandomObject(DataType.INTEGER));
         toReturn.setMethod(getRandomMethod());
@@ -580,14 +580,14 @@ public class PMMLModelTestUtils {
     public static TextIndex getRandomTextIndex() {
         Random random = new Random();
         TextIndex toReturn = new TextIndex();
-        toReturn.setField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setField(RandomStringUtils.random(6, true, false));
         toReturn.setExpression(getRandomFieldRef());
         toReturn.setLocalTermWeights(getRandomLocalTermWeights());
         toReturn.setWordSeparatorCharacterRE(RandomStringUtils.random(1, true, false));
         toReturn.setTokenize(true);
         toReturn.setCaseSensitive(false);
         toReturn.setMaxLevenshteinDistance(random.nextInt(10));
-        toReturn.setTextField(FieldName.create(RandomStringUtils.random(6, true, false)));
+        toReturn.setTextField(RandomStringUtils.random(6, true, false));
         IntStream.range(0, 3).forEach(i -> toReturn.addTextIndexNormalizations(getRandomTextIndexNormalization()));
         return toReturn;
     }
@@ -600,7 +600,7 @@ public class PMMLModelTestUtils {
     }
 
     public static ParameterField getParameterField(String fieldName) {
-        ParameterField toReturn = new ParameterField(FieldName.create(fieldName));
+        ParameterField toReturn = new ParameterField(fieldName);
         toReturn.setDataType(getRandomDataType());
         toReturn.setOpType(getRandomOpType());
         toReturn.setDisplayName("Display-" + fieldName);
@@ -608,7 +608,7 @@ public class PMMLModelTestUtils {
     }
 
     public static ParameterField getParameterField(String fieldName, DataType dataType) {
-        ParameterField toReturn = new ParameterField(FieldName.create(fieldName));
+        ParameterField toReturn = new ParameterField(fieldName);
         toReturn.setDataType(dataType);
         return toReturn;
     }
@@ -635,7 +635,7 @@ public class PMMLModelTestUtils {
     public static SimplePredicate getSimplePredicate(final String predicateName,
                                                      final Object value,
                                                      final SimplePredicate.Operator operator) {
-        FieldName fieldName = FieldName.create(predicateName);
+         String fieldName =predicateName;
         SimplePredicate toReturn = new SimplePredicate();
         toReturn.setField(fieldName);
         toReturn.setOperator(operator);
@@ -654,7 +654,7 @@ public class PMMLModelTestUtils {
                                                            final Array.Type arrayType,
                                                            final List<String> values,
                                                            final SimpleSetPredicate.BooleanOperator booleanOperator) {
-        FieldName fieldName = FieldName.create(predicateName);
+         String fieldName =predicateName;
         SimpleSetPredicate toReturn = new SimpleSetPredicate();
         toReturn.setField(fieldName);
         toReturn.setBooleanOperator(booleanOperator);
@@ -671,7 +671,7 @@ public class PMMLModelTestUtils {
     }
 
     public static FieldRef getFieldRef(final String fieldName) {
-        return new FieldRef(FieldName.create(fieldName));
+        return new FieldRef(fieldName);
     }
 
     public static Object getRandomObject(DataType dataType) {
@@ -873,7 +873,7 @@ public class PMMLModelTestUtils {
 
     public static ScoreDistribution getRandomPMMLScoreDistribution(Double probability) {
         Random random = new Random();
-        ScoreDistribution toReturn = new ScoreDistribution();
+        ScoreDistribution toReturn = new ComplexScoreDistribution();
         toReturn.setValue(RandomStringUtils.random(6, true, false));
         toReturn.setRecordCount(random.nextInt(100));
         toReturn.setConfidence((double) random.nextInt(1) / 100);
@@ -925,7 +925,7 @@ public class PMMLModelTestUtils {
     }
 
     public static SimplePredicate getRandomSimplePredicate() {
-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
+         String fieldName =RandomStringUtils.random(6, true, false);
         SimplePredicate toReturn = new SimplePredicate();
         toReturn.setField(fieldName);
         toReturn.setOperator(getRandomSimplePredicateOperator());
@@ -945,7 +945,7 @@ public class PMMLModelTestUtils {
     }
 
     public static SimpleSetPredicate getRandomSimpleSetPredicate() {
-        FieldName fieldName = FieldName.create(RandomStringUtils.random(6, true, false));
+         String fieldName =RandomStringUtils.random(6, true, false);
         SimpleSetPredicate toReturn = new SimpleSetPredicate();
         toReturn.setField(fieldName);
         toReturn.setBooleanOperator(getRandomSimpleSetPredicateOperator());
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java
index 8dd030ef3d..28334005b7 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/test/java/org/kie/pmml/compiler/api/utils/ModelUtilsTest.java
@@ -34,7 +34,6 @@ import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DerivedField;
 import org.dmg.pmml.Field;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningSchema;
 import org.dmg.pmml.Model;
@@ -45,8 +44,8 @@ import org.dmg.pmml.Row;
 import org.dmg.pmml.Target;
 import org.dmg.pmml.Targets;
 import org.dmg.pmml.regression.RegressionModel;
-import org.jpmml.model.inlinetable.InputCell;
-import org.jpmml.model.inlinetable.OutputCell;
+import org.jpmml.model.cells.InputCell;
+import org.jpmml.model.cells.OutputCell;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.api.enums.DATA_TYPE;
 import org.kie.pmml.api.enums.FIELD_USAGE_TYPE;
@@ -196,10 +195,10 @@ public class ModelUtilsTest {
         retrieved.forEach(kiePMMLNameOpType -> {
             assertThat(miningSchema.getMiningFields()
                                .stream()
-                               .anyMatch(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))).isTrue();
+                               .anyMatch(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))).isTrue();
             Optional<DataField> optionalDataField = dataDictionary.getDataFields()
                     .stream()
-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
+                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
                     .findFirst();
             assertThat(optionalDataField).isPresent();
             DataField dataField = optionalDataField.get();
@@ -228,7 +227,7 @@ public class ModelUtilsTest {
         retrieved.forEach(kiePMMLNameOpType -> {
             Optional<MiningField> optionalMiningField = miningSchema.getMiningFields()
                     .stream()
-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
+                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
                     .findFirst();
             assertThat(optionalMiningField).isPresent();
             MiningField miningField = optionalMiningField.get();
@@ -261,7 +260,7 @@ public class ModelUtilsTest {
         retrieved.forEach(kiePMMLNameOpType -> {
             Optional<MiningField> optionalMiningField = miningSchema.getMiningFields()
                     .stream()
-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName().getValue()))
+                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getName()))
                     .findFirst();
             assertThat(optionalMiningField).isPresent();
             MiningField miningField = optionalMiningField.get();
@@ -294,7 +293,7 @@ public class ModelUtilsTest {
         retrieved.forEach(kiePMMLNameOpType -> {
             Optional<Target> optionalTarget = targets.getTargets()
                     .stream()
-                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getField().getValue()))
+                    .filter(fld -> kiePMMLNameOpType.getName().equals(fld.getField()))
                     .findFirst();
             assertThat(optionalTarget).isPresent();
             Target target = optionalTarget.get();
@@ -311,7 +310,7 @@ public class ModelUtilsTest {
         IntStream.range(0, 3).forEach(i -> {
             final DataField dataField = getRandomDataField();
             dataDictionary.addDataFields(dataField);
-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
+            final MiningField miningField = getMiningField(dataField.getName(),
                                                            MiningField.UsageType.PREDICTED);
             miningSchema.addMiningFields(miningField);
         });
@@ -341,7 +340,7 @@ public class ModelUtilsTest {
         IntStream.range(0, 3).forEach(i -> {
             final DataField dataField = getRandomDataField();
             dataDictionary.addDataFields(dataField);
-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
+            final MiningField miningField = getMiningField(dataField.getName(),
                                                            MiningField.UsageType.ACTIVE);
             miningSchema.addMiningFields(miningField);
         });
@@ -360,10 +359,10 @@ public class ModelUtilsTest {
         IntStream.range(0, 3).forEach(i -> {
             final DataField dataField = getRandomDataField();
             dataDictionary.addDataFields(dataField);
-            final MiningField miningField = getMiningField(dataField.getName().getValue(),
+            final MiningField miningField = getMiningField(dataField.getName(),
                                                            MiningField.UsageType.ACTIVE);
             miningSchema.addMiningFields(miningField);
-            final Target targetField = getTarget(dataField.getName().getValue(), null);
+            final Target targetField = getTarget(dataField.getName(), null);
             targets.addTargets(targetField);
         });
         model.setMiningSchema(miningSchema);
@@ -386,8 +385,7 @@ public class ModelUtilsTest {
         dataDictionary.getDataFields().forEach(dataField -> {
             OP_TYPE retrieved =
                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
-                                                                         model,
-                                                                                     dataField.getName().getValue());
+                                                                         model,dataField.getName());
             assertThat(retrieved).isNotNull();
             OP_TYPE expected = OP_TYPE.byName(dataField.getOpType().value());
             assertThat(retrieved).isEqualTo(expected);
@@ -402,7 +400,7 @@ public class ModelUtilsTest {
             IntStream.range(0, 3).forEach(i -> {
                 String fieldName = "field" + i;
                 final DataField dataField = getRandomDataField();
-                dataField.setName(FieldName.create(fieldName));
+                dataField.setName(fieldName);
                 dataDictionary.addDataFields(dataField);
             });
             org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary), model,
@@ -426,8 +424,7 @@ public class ModelUtilsTest {
         miningSchema.getMiningFields().forEach(miningField -> {
             OP_TYPE retrieved =
                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
-                                                                         model,
-                                                                                     miningField.getName().getValue());
+                                                                         model,miningField.getName());
             assertThat(retrieved).isNotNull();
             OP_TYPE expected = OP_TYPE.byName(miningField.getOpType().value());
             assertThat(retrieved).isEqualTo(expected);
@@ -443,7 +440,7 @@ public class ModelUtilsTest {
             IntStream.range(0, 3).forEach(i -> {
                 String fieldName = "field" + i;
                 final DataField dataField = getRandomDataField();
-                dataField.setName(FieldName.create(fieldName));
+                dataField.setName(fieldName);
                 dataDictionary.addDataFields(dataField);
                 final MiningField miningField = getRandomMiningField();
                 miningField.setName(dataField.getName());
@@ -477,8 +474,7 @@ public class ModelUtilsTest {
         targets.getTargets().forEach(target -> {
             OP_TYPE retrieved =
                     org.kie.pmml.compiler.api.utils.ModelUtils.getOpType(getFieldsFromDataDictionary(dataDictionary),
-                                                                         model,
-                                                                                     target.getField().getValue());
+                                                                         model,target.getField());
             assertThat(retrieved).isNotNull();
             OP_TYPE expected = OP_TYPE.byName(target.getOpType().value());
             assertThat(retrieved).isEqualTo(expected);
@@ -495,7 +491,7 @@ public class ModelUtilsTest {
             IntStream.range(0, 3).forEach(i -> {
                 String fieldName = "field" + i;
                 final DataField dataField = getRandomDataField();
-                dataField.setName(FieldName.create(fieldName));
+                dataField.setName(fieldName);
                 dataDictionary.addDataFields(dataField);
                 final MiningField miningField = getRandomMiningField();
                 miningField.setName(dataField.getName());
@@ -528,8 +524,7 @@ public class ModelUtilsTest {
         fields.clear();
         fields.addAll(getFieldsFromDataDictionary(dataDictionary));
         dataDictionary.getDataFields().forEach(dataField -> {
-            Optional<OP_TYPE> retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromFields(fields,
-                                                                                                         dataField.getName().getValue());
+            Optional<OP_TYPE> retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromFields(fields,dataField.getName());
             assertThat(retrieved).isNotNull();
             assertThat(retrieved).isPresent();
             OP_TYPE expected = OP_TYPE.byName(dataField.getOpType().value());
@@ -552,8 +547,7 @@ public class ModelUtilsTest {
         });
         miningSchema.getMiningFields().forEach(miningField -> {
             Optional<OP_TYPE> retrieved =
-                    org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromMiningFields(miningSchema,
-                                                                                         miningField.getName().getValue());
+                    org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromMiningFields(miningSchema,miningField.getName());
             assertThat(retrieved).isNotNull();
             assertThat(retrieved).isPresent();
             OP_TYPE expected = OP_TYPE.byName(miningField.getOpType().value());
@@ -575,8 +569,7 @@ public class ModelUtilsTest {
             targets.addTargets(target);
         });
         targets.getTargets().forEach(target -> {
-            Optional<OP_TYPE> retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromTargets(targets,
-                                                                                                          target.getField().getValue());
+            Optional<OP_TYPE> retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getOpTypeFromTargets(targets,target.getField());
             assertThat(retrieved).isNotNull();
             assertThat(retrieved).isPresent();
             OP_TYPE expected = OP_TYPE.byName(target.getOpType().value());
@@ -595,7 +588,7 @@ public class ModelUtilsTest {
                 .stream()
                 .map(dataField -> {
                     DerivedField toReturn = new DerivedField();
-                    toReturn.setName(FieldName.create("DER_" + dataField.getName().getValue()));
+                    toReturn.setName("DER_" +dataField.getName());
                     DataType dataType = getRandomDataType();
                     while (dataType.equals(dataField.getDataType())) {
                         dataType = getRandomDataType();
@@ -612,14 +605,14 @@ public class ModelUtilsTest {
                 .map(Field.class::cast)
                 .forEach(fields::add);
         dataDictionary.getDataFields().forEach(dataField -> {
-            String fieldName = dataField.getName().getValue();
+            String fieldName =dataField.getName();
             DataType retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getDataType(fields, fieldName);
             assertThat(retrieved).isNotNull();
             DataType expected = dataField.getDataType();
             assertThat(retrieved).isEqualTo(expected);
         });
         derivedFields.forEach(derivedField -> {
-            String fieldName = derivedField.getName().getValue();
+            String fieldName =derivedField.getName();
             DataType retrieved = org.kie.pmml.compiler.api.utils.ModelUtils.getDataType(fields, fieldName);
             assertThat(retrieved).isNotNull();
             DataType expected = derivedField.getDataType();
@@ -636,7 +629,7 @@ public class ModelUtilsTest {
         });
         dataDictionary.getDataFields().forEach(dataField -> {
             DATA_TYPE retrieved =
-                    org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary), dataField.getName().getValue());
+                    org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary),dataField.getName());
             assertThat(retrieved).isNotNull();
             DATA_TYPE expected = DATA_TYPE.byName(dataField.getDataType().value());
             assertThat(retrieved).isEqualTo(expected);
@@ -650,7 +643,7 @@ public class ModelUtilsTest {
             IntStream.range(0, 3).forEach(i -> {
                 String fieldName = "field" + i;
                 final DataField dataField = getRandomDataField();
-                dataField.setName(FieldName.create(fieldName));
+                dataField.setName(fieldName);
                 dataDictionary.addDataFields(dataField);
             });
             org.kie.pmml.compiler.api.utils.ModelUtils.getDATA_TYPE(getFieldsFromDataDictionary(dataDictionary),
@@ -716,12 +709,12 @@ public class ModelUtilsTest {
         org.kie.pmml.api.models.OutputField retrieved =
                 org.kie.pmml.compiler.api.utils.ModelUtils.convertToKieOutputField(toConvert, null);
         assertThat(retrieved).isNotNull();
-        assertThat(retrieved.getName()).isEqualTo(toConvert.getName().getValue());
+        assertThat(retrieved.getName()).isEqualTo(toConvert.getName());
         OP_TYPE expectedOpType = OP_TYPE.byName(toConvert.getOpType().value());
         assertThat(retrieved.getOpType()).isEqualTo(expectedOpType);
         DATA_TYPE expectedDataType = DATA_TYPE.byName(toConvert.getDataType().value());
         assertThat(retrieved.getDataType()).isEqualTo(expectedDataType);
-        assertThat(retrieved.getTargetField()).isEqualTo(toConvert.getTargetField().getValue());
+        assertThat(retrieved.getTargetField()).isEqualTo(toConvert.getTargetField());
         RESULT_FEATURE expectedResultFeature = RESULT_FEATURE.byName(toConvert.getResultFeature().value());
         assertThat(retrieved.getResultFeature()).isEqualTo(expectedResultFeature);
         toConvert.setOpType(null);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java
index b0a57eebda..4aee65cbc7 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactory.java
@@ -81,7 +81,7 @@ public class KiePMMLDerivedFieldFactory {
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
         final Expression dataTypeExpression = getExpressionForDataType(derivedField.getDataType());
         final Expression opTypeExpression = getExpressionForOpType(derivedField.getOpType());
-        builder.setArgument(0, new StringLiteralExpr(derivedField.getName().getValue()));
+        builder.setArgument(0, new StringLiteralExpr(derivedField.getName()));
         builder.setArgument(2, dataTypeExpression);
         builder.setArgument(3, opTypeExpression);
         builder.setArgument(4, new NameExpr(nestedVariableName));
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java
index f740a025ab..276205279d 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactory.java
@@ -85,7 +85,7 @@ public class KiePMMLDiscretizeFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE,
                                                                       DISCRETIZE, toReturn)))
                 .asObjectCreationExpr();
-        final Expression nameExpr = new StringLiteralExpr(discretize.getField().getValue());
+        final Expression nameExpr = new StringLiteralExpr(discretize.getField());
         final Expression mapMissingToExpr = getExpressionForObject(discretize.getMapMissingTo());
         final Expression defaultValueExpr = getExpressionForObject(discretize.getDefaultValue());
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java
index 1a6854dc37..d0c9299e4f 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactory.java
@@ -67,7 +67,7 @@ public class KiePMMLFieldColumnPairFactory {
         final ObjectCreationExpr objectCreationExpr = variableDeclarator.getInitializer()
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, FIELDCOLUMNPAIR, toReturn)))
         .asObjectCreationExpr();
-        objectCreationExpr.getArguments().set(0, new StringLiteralExpr(fieldColumnPair.getField().getValue()));
+        objectCreationExpr.getArguments().set(0, new StringLiteralExpr(fieldColumnPair.getField()));
         objectCreationExpr.getArguments().set(2, new StringLiteralExpr(fieldColumnPair.getColumn()));
         return toReturn;
     }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java
index 8404131f4d..2fe5206fe1 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactory.java
@@ -70,7 +70,7 @@ public class KiePMMLFieldRefFactory {
                                                                       FIELD_REF, toReturn)))
                 .asObjectCreationExpr();
 
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(fieldRef.getField().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(fieldRef.getField());
         final Expression mapMissingToExpr = getExpressionForObject(fieldRef.getMapMissingTo());
         objectCreationExpr.getArguments().set(0, nameExpr);
         objectCreationExpr.getArguments().set(2, mapMissingToExpr);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java
index 5a1026b9be..409f799bb4 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactory.java
@@ -85,7 +85,7 @@ public class KiePMMLMiningFieldFactory {
                                                                       MININGFIELD, toReturn)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(miningField.getName().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(miningField.getName());
         Expression fieldUsageTypeExpr;
         if (miningField.getUsageType() != null) {
             final FIELD_USAGE_TYPE fieldUsageType = FIELD_USAGE_TYPE.byName(miningField.getUsageType().value());
@@ -100,8 +100,8 @@ public class KiePMMLMiningFieldFactory {
         } else {
             opTypeExpr = new NullLiteralExpr();
         }
-        final List<Field<?>> mappedFields = getMappedFields(fields, miningField.getName().getValue());
-        final DataType dataType = getDataType(mappedFields, miningField.getName().getValue());
+        final List<Field<?>> mappedFields = getMappedFields(fields,miningField.getName());
+        final DataType dataType = getDataType(mappedFields,miningField.getName());
         final DATA_TYPE data_TYPE = DATA_TYPE.byName(dataType.value());
         Expression dataTypeExpr = new NameExpr(DATA_TYPE.class.getName() + "." + data_TYPE.name());
         Expression missingValueTreatmentMethodExpr;
@@ -169,7 +169,7 @@ public class KiePMMLMiningFieldFactory {
     private static List<Field<?>> getMappedFields(final List<Field<?>> fields,
                                                   final String fieldName) {
         return fields.stream()
-                .filter(fld -> Objects.equals(fieldName, fld.getName().getValue()))
+                .filter(fld -> Objects.equals(fieldName,fld.getName()))
                 .collect(Collectors.toList());
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java
index 41b5b046af..d3b6513707 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLModelFactoryUtils.java
@@ -611,7 +611,7 @@ public class KiePMMLModelFactoryUtils {
         BlockStmt body = new BlockStmt();
         NodeList<Expression> arguments = new NodeList<>();
         for (org.dmg.pmml.MiningField miningField : miningFields) {
-            String miningFieldVariableName = getSanitizedVariableName(miningField.getName().getValue()).toLowerCase();
+            String miningFieldVariableName = getSanitizedVariableName(miningField.getName()).toLowerCase();
             BlockStmt toAdd = getMiningFieldVariableDeclaration(miningFieldVariableName, miningField, fields);
             toAdd.getStatements().forEach(body::addStatement);
             arguments.add(new NameExpr(miningFieldVariableName));
@@ -631,7 +631,7 @@ public class KiePMMLModelFactoryUtils {
         BlockStmt body = new BlockStmt();
         NodeList<Expression> arguments = new NodeList<>();
         for (org.dmg.pmml.OutputField outputField : outputFields) {
-            String outputFieldVariableName = getSanitizedVariableName(outputField.getName().getValue()).toLowerCase();
+            String outputFieldVariableName = getSanitizedVariableName(outputField.getName()).toLowerCase();
             BlockStmt toAdd = getOutputFieldVariableDeclaration(outputFieldVariableName, outputField);
             toAdd.getStatements().forEach(body::addStatement);
             arguments.add(new NameExpr(outputFieldVariableName));
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java
index 41b6d2292b..fe96b29fae 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactory.java
@@ -77,7 +77,7 @@ public class KiePMMLNormContinuousFactory {
                                                                       NORM_CONTINUOUS, toReturn)))
                 .asObjectCreationExpr();
 
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(normContinuous.getField().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(normContinuous.getField());
         final OUTLIER_TREATMENT_METHOD outlierTreatmentMethod =
                 OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value());
         final NameExpr outlierTreatmentMethodExpr =
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java
index a3dfadc05b..ce6dfdf09b 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactory.java
@@ -71,7 +71,7 @@ public class KiePMMLNormDiscreteFactory {
                                                                       NORM_DISCRETE, toReturn)))
                 .asObjectCreationExpr();
 
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(normDiscrete.getField().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(normDiscrete.getField());
 
         final Expression mapMissingToExpr = getExpressionForObject(normDiscrete.getMapMissingTo());
         objectCreationExpr.getArguments().set(0, nameExpr);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java
index 03ac64ec84..5dc5a651fc 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLOutputFieldFactory.java
@@ -78,10 +78,10 @@ public class KiePMMLOutputFieldFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, OUTPUTFIELD, toReturn)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(outputField.getName().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(outputField.getName());
         final RESULT_FEATURE resultFeature = RESULT_FEATURE.byName(outputField.getResultFeature().value());
         final NameExpr resultFeatureExpr = new NameExpr(RESULT_FEATURE.class.getName() + "." + resultFeature.name());
-        final Expression targetFieldExpr = outputField.getTargetField() != null ? getExpressionForObject(outputField.getTargetField().getValue()) : new NullLiteralExpr();
+        final Expression targetFieldExpr = outputField.getTargetField() != null ? getExpressionForObject(outputField.getTargetField()) : new NullLiteralExpr();
         final Expression valueExpr = outputField.getValue() != null ? getExpressionForObject(outputField.getValue()) : new NullLiteralExpr();
         final Expression dataTypeExpression = getExpressionForDataType(outputField.getDataType());
         final Expression rankExpr = outputField.getRank() != null ? getExpressionForObject(outputField.getRank()) : new NullLiteralExpr();
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java
index 364a781216..0c40c78ee6 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactory.java
@@ -70,7 +70,7 @@ public class KiePMMLParameterFieldFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, PARAMETER_FIELD, toReturn)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        builder.setArgument(0, new StringLiteralExpr(parameterField.getName().getValue()));
+        builder.setArgument(0, new StringLiteralExpr(parameterField.getName()));
         final Expression dataTypeExpression = getExpressionForDataType(parameterField.getDataType());
         final Expression opTypeExpression = getExpressionForOpType(parameterField.getOpType());
         getChainedMethodCallExprFrom("withDataType", initializer).setArgument(0, dataTypeExpression);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java
index acbd5765a4..61cbf6b8b2 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactory.java
@@ -82,9 +82,9 @@ public class KiePMMLSimplePredicateFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, SIMPLE_PREDICATE, simplePredicateBody)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        builder.setArgument(0, new StringLiteralExpr(simplePredicate.getField().getValue()));
+        builder.setArgument(0, new StringLiteralExpr(simplePredicate.getField()));
         builder.setArgument(2, operatorExpr);
-        DataType dataType = getDataType(fields, simplePredicate.getField().getValue());
+        DataType dataType = getDataType(fields,simplePredicate.getField());
         Object actualValue = DATA_TYPE.byName(dataType.value()).getActualValue(simplePredicate.getValue());
         getChainedMethodCallExprFrom("withValue", initializer).setArgument(0, getExpressionForObject(actualValue));
         simplePredicateBody.getStatements().forEach(toReturn::addStatement);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java
index 078b865fb1..5cb84d6694 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactory.java
@@ -87,7 +87,7 @@ public class KiePMMLSimpleSetPredicateFactory {
                 .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_INITIALIZER_TEMPLATE, SIMPLESET_PREDICATE, simpleSetPredicateBody)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        builder.setArgument(0, new StringLiteralExpr(simpleSetPredicate.getField().getValue()));
+        builder.setArgument(0, new StringLiteralExpr(simpleSetPredicate.getField()));
         builder.setArgument(2, arrayTypeExpr);
         builder.setArgument(3, inNotInExpr);
         getChainedMethodCallExprFrom("asList", initializer).setArguments(arguments);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java
index 1f8247c345..c94064c6da 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactory.java
@@ -98,7 +98,7 @@ public class KiePMMLTextIndexFactory {
                 TEXTINDEX, toReturn)))
                 .asMethodCallExpr();
         final MethodCallExpr builder = getChainedMethodCallExprFrom("builder", initializer);
-        final StringLiteralExpr nameExpr = new StringLiteralExpr(textIndex.getTextField().getValue());
+        final StringLiteralExpr nameExpr = new StringLiteralExpr(textIndex.getTextField());
         final NameExpr expressionExpr = new NameExpr(expressionVariableName);
         builder.setArgument(0, nameExpr);
         builder.setArgument(2, expressionExpr);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java
index 5d2d2d8d57..cdafde8db9 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDerivedFieldInstanceFactory.java
@@ -49,10 +49,9 @@ public class KiePMMLDerivedFieldInstanceFactory {
 
     static KiePMMLDerivedField getKiePMMLDerivedField(final DerivedField derivedField,
                                                       final List<Field<?>> fields) {
-        DataType dataType = derivedField.getDataType() != null ? derivedField.getDataType() : getDataType(fields,
-                                                                                                          derivedField.getName().getValue());
+        DataType dataType = derivedField.getDataType() != null ? derivedField.getDataType() : getDataType(fields,derivedField.getName());
         OP_TYPE opType = derivedField.getOpType() != null ? OP_TYPE.byName(derivedField.getOpType().value()) : null;
-        return KiePMMLDerivedField.builder(derivedField.getName().getValue(),
+        return KiePMMLDerivedField.builder(derivedField.getName(),
                                            getKiePMMLExtensions(derivedField.getExtensions()),
                                            DATA_TYPE.byName(dataType.value()),
                                            opType,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java
index 5ee6792fcb..9d6de34f7f 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLDiscretizeInstanceFactory.java
@@ -43,7 +43,7 @@ public class KiePMMLDiscretizeInstanceFactory {
         String defaultValue = discretize.getDefaultValue() != null ? discretize.getDefaultValue().toString() : null;
         DATA_TYPE dataType = discretize.getDataType() != null ? DATA_TYPE.byName(discretize.getDataType().value()) :
                 null;
-        return new KiePMMLDiscretize(discretize.getField().getValue(),
+        return new KiePMMLDiscretize(discretize.getField(),
                                      getKiePMMLExtensions(discretize.getExtensions()),
                                      discretizeBins,
                                      mapMissingTo,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java
index a659b870fa..7741a23b4a 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldColumnPairInstanceFactory.java
@@ -38,7 +38,7 @@ public class KiePMMLFieldColumnPairInstanceFactory {
     }
 
     static KiePMMLFieldColumnPair getKiePMMLFieldColumnPair(final FieldColumnPair fieldColumnPair) {
-        return new KiePMMLFieldColumnPair(fieldColumnPair.getField().getValue(),
+        return new KiePMMLFieldColumnPair(fieldColumnPair.getField(),
                                           getKiePMMLExtensions(fieldColumnPair.getExtensions()),
                                           fieldColumnPair.getColumn());
     }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java
index a1cd31b3c5..eea09d4075 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLFieldRefInstanceFactory.java
@@ -29,7 +29,7 @@ public class KiePMMLFieldRefInstanceFactory {
     }
 
     static KiePMMLFieldRef getKiePMMLFieldRef(final FieldRef fieldRef) {
-        return new KiePMMLFieldRef(fieldRef.getField().getValue(),
+        return new KiePMMLFieldRef(fieldRef.getField(),
                                    KiePMMLExtensionInstanceFactory.getKiePMMLExtensions(fieldRef.getExtensions()),
                                    fieldRef.getMapMissingTo());
     }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java
index 1958cda8b4..dc67da9eca 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLMiningFieldInstanceFactory.java
@@ -42,7 +42,7 @@ public class KiePMMLMiningFieldInstanceFactory {
     }
 
     public static KiePMMLMiningField getKiePMMLMiningField(final MiningField toConvert, final Field<?> field) {
-        String name = toConvert.getName() != null ? toConvert.getName().getValue() : "" + toConvert.hashCode();
+        String name = toConvert.getName() != null ?toConvert.getName() : "" + toConvert.hashCode();
         final FIELD_USAGE_TYPE fieldUsageType = toConvert.getUsageType() != null ?
                 FIELD_USAGE_TYPE.byName(toConvert.getUsageType().value()) : null;
         final OP_TYPE opType = toConvert.getOpType() != null ? OP_TYPE.byName(toConvert.getOpType().value()) : null;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java
index a393a96644..cbcaf48c94 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormContinuousInstanceFactory.java
@@ -40,7 +40,7 @@ public class KiePMMLNormContinuousInstanceFactory {
         final List<KiePMMLLinearNorm> linearNorms = normContinuous.hasLinearNorms() ?
                 getKiePMMLLinearNorms(normContinuous.getLinearNorms()) : Collections.emptyList();
         final OUTLIER_TREATMENT_METHOD outlierTreatmentMethod = normContinuous.getOutliers() != null ? OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value()) : null;
-        return new KiePMMLNormContinuous(normContinuous.getField().getValue(), getKiePMMLExtensions(normContinuous.getExtensions()), linearNorms, outlierTreatmentMethod, normContinuous.getMapMissingTo());
+        return new KiePMMLNormContinuous(normContinuous.getField(), getKiePMMLExtensions(normContinuous.getExtensions()), linearNorms, outlierTreatmentMethod, normContinuous.getMapMissingTo());
     }
 
 }
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java
index 875056d14f..80c5f58f6c 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLNormDiscreteInstanceFactory.java
@@ -35,7 +35,7 @@ public class KiePMMLNormDiscreteInstanceFactory {
 
     static KiePMMLNormDiscrete getKiePMMLNormDiscrete(final NormDiscrete normDiscrete) {
         List<KiePMMLExtension> extensions = getKiePMMLExtensions(normDiscrete.getExtensions());
-        return new KiePMMLNormDiscrete(normDiscrete.getField().getValue(),
+        return new KiePMMLNormDiscrete(normDiscrete.getField(),
                                        extensions,
                                        normDiscrete.getValue().toString(),
                                        normDiscrete.getMapMissingTo());
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java
index adf65610e8..7e85bfe54b 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLOutputFieldInstanceFactory.java
@@ -35,8 +35,8 @@ public class KiePMMLOutputFieldInstanceFactory {
     }
 
     public static KiePMMLOutputField getKiePMMLOutputField(final OutputField outputField) {
-        String name = outputField.getName() != null ? outputField.getName().getValue() : "" + outputField.hashCode();
-        final String targetField = outputField.getTargetField() != null ? outputField.getTargetField().getValue() :
+        String name = outputField.getName() != null ?outputField.getName() : "" + outputField.hashCode();
+        final String targetField = outputField.getTargetField() != null ?outputField.getTargetField() :
                 null;
         final RESULT_FEATURE resultFeature = outputField.getResultFeature() != null ?
                 RESULT_FEATURE.byName(outputField.getResultFeature().value()) : null;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java
index 71e65adf8e..4a5527eeac 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLParameterFieldInstanceFactory.java
@@ -44,7 +44,7 @@ public class KiePMMLParameterFieldInstanceFactory {
         DATA_TYPE dataType = parameterField.getDataType() != null ?
                 DATA_TYPE.byName(parameterField.getDataType().value()) : null;
         OP_TYPE opType = parameterField.getOpType() != null ? OP_TYPE.byName(parameterField.getOpType().value()) : null;
-        return KiePMMLParameterField.builder(parameterField.getName().getValue(),
+        return KiePMMLParameterField.builder(parameterField.getName(),
                                              Collections.emptyList())
                 .withDataType(dataType)
                 .withOpType(opType)
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java
index 60d10d26e3..94e7f67abb 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimplePredicateInstanceFactory.java
@@ -41,9 +41,9 @@ public class KiePMMLSimplePredicateInstanceFactory {
     static KiePMMLSimplePredicate getKiePMMLSimplePredicate(final SimplePredicate simplePredicate,
                                                             final List<Field<?>> fields) {
         final List<KiePMMLExtension> kiePMMLExtensions = getKiePMMLExtensions(simplePredicate.getExtensions());
-        DataType dataType = getDataType(fields, simplePredicate.getField().getValue());
+        DataType dataType = getDataType(fields,simplePredicate.getField());
         Object value = DATA_TYPE.byName(dataType.value()).getActualValue(simplePredicate.getValue());
-        return KiePMMLSimplePredicate.builder(simplePredicate.getField().getValue(),
+        return KiePMMLSimplePredicate.builder(simplePredicate.getField(),
                                               kiePMMLExtensions,
                                               OPERATOR.byName(simplePredicate.getOperator().value()))
                 .withValue(value)
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java
index 70871ada4f..cfeeb80dde 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLSimpleSetPredicateInstanceFactory.java
@@ -34,7 +34,7 @@ public class KiePMMLSimpleSetPredicateInstanceFactory {
     }
 
     static KiePMMLSimpleSetPredicate getKiePMMLSimpleSetPredicate(final SimpleSetPredicate simpleSetPredicate) {
-        return KiePMMLSimpleSetPredicate.builder(simpleSetPredicate.getField().getValue(),
+        return KiePMMLSimpleSetPredicate.builder(simpleSetPredicate.getField(),
                                                  getKiePMMLExtensions(simpleSetPredicate.getExtensions()),
                                                  ARRAY_TYPE.byName(simpleSetPredicate.getArray().getType().value()),
                                                  IN_NOTIN.byName(simpleSetPredicate.getBooleanOperator().value()))
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java
index 40ae1e73c9..088b09c975 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTargetInstanceFactory.java
@@ -42,7 +42,7 @@ public class KiePMMLTargetInstanceFactory {
                 .map(KiePMMLTargetInstanceFactory::getKieTargetValue)
                 .collect(Collectors.toList()) : Collections.emptyList();
         final OP_TYPE opType = target.getOpType() != null ? OP_TYPE.byName(target.getOpType().value()) : null;
-        final String field = target.getField() != null ? target.getField().getValue() : null;
+        final String field = target.getField() != null ?target.getField() : null;
         final CAST_INTEGER castInteger = target.getCastInteger() != null ?
                 CAST_INTEGER.byName(target.getCastInteger().value()) : null;
         TargetField targetField = new TargetField(targetValues,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java
index a2efd17595..9e133499b7 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLTextIndexInstanceFactory.java
@@ -42,7 +42,7 @@ public class KiePMMLTextIndexInstanceFactory {
                 COUNT_HITS.byName(textIndex.getCountHits().value()) : null;
         final String wordSeparatorCharacterRE = textIndex.getWordSeparatorCharacterRE() != null ?
                 StringEscapeUtils.escapeJava(textIndex.getWordSeparatorCharacterRE()) : null;
-        return KiePMMLTextIndex.builder(textIndex.getTextField().getValue(),
+        return KiePMMLTextIndex.builder(textIndex.getTextField(),
                                         getKiePMMLExtensions(textIndex.getExtensions()),
                                         getKiePMMLExpression(textIndex.getExpression()))
                 .withTextIndexNormalizations(getKiePMMLTextIndexNormalizations(textIndex.getTextIndexNormalizations()))
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java
index 7bee48918d..0bca6aa64f 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtil.java
@@ -21,11 +21,10 @@ import java.util.List;
 import java.util.Optional;
 import java.util.stream.Collectors;
 
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MathContext;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningFunction;
@@ -166,7 +165,7 @@ public class KiePMMLUtil {
         String cleanedName = model.getModelName().replaceAll("[^A-Za-z0-9]", "");
         String fieldName = String.format(TARGETFIELD_TEMPLATE, cleanedName);
         DataField toReturn = new DataField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         toReturn.setOpType(targetOpType);
         toReturn.setDataType(targetDataType);
         return Optional.of(toReturn);
@@ -338,7 +337,7 @@ public class KiePMMLUtil {
                                 .filter(targetField -> outputField.getTargetField().equals(targetField.getName()))
                                 .findFirst()
                                 .orElseThrow(() -> new KiePMMLException("Failed to find a target field for OutputField "
-                                                                                + outputField.getName().getValue()));
+                                                                                +outputField.getName()));
                     }
                     if (referencedField == null && (outputField.getResultFeature() == null || outputField.getResultFeature().equals(ResultFeature.PREDICTED_VALUE))) { // default predictedValue
                         referencedField = targetFields.stream()
@@ -351,7 +350,7 @@ public class KiePMMLUtil {
                         return;
                     }
                     if (referencedField != null) {
-                        FieldName targetFieldName = referencedField.getName();
+                         String targetFieldName = referencedField.getName();
                         DataField dataField = dataFields.stream()
                                 .filter(df -> df.getName().equals(targetFieldName))
                                 .findFirst()
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java
index 3d9f631222..52db2a9ae3 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLApplyFactoryTest.java
@@ -25,7 +25,6 @@ import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.Apply;
 import org.dmg.pmml.Constant;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.InvalidValueTreatmentMethod;
 import org.junit.jupiter.api.Test;
@@ -89,9 +88,9 @@ public class KiePMMLApplyFactoryTest {
         InvalidValueTreatmentMethod invalidValueTreatmentMethod = InvalidValueTreatmentMethod.AS_MISSING;
         apply.setInvalidValueTreatment(invalidValueTreatmentMethod);
         FieldRef fieldRef1 = new FieldRef();
-        fieldRef1.setField(FieldName.create(PARAM_1));
+        fieldRef1.setField(PARAM_1);
         FieldRef fieldRef2 = new FieldRef();
-        fieldRef2.setField(FieldName.create(PARAM_2));
+        fieldRef2.setField(PARAM_2);
         apply.addExpressions(fieldRef1, fieldRef2);
         BlockStmt retrieved =
                 org.kie.pmml.compiler.commons.codegenfactories.KiePMMLApplyFactory.getApplyVariableDeclaration(variableName, apply);
@@ -117,9 +116,9 @@ public class KiePMMLApplyFactoryTest {
         InvalidValueTreatmentMethod nestedInvalidValueTreatmentMethod = InvalidValueTreatmentMethod.AS_MISSING;
         nestedApply.setInvalidValueTreatment(nestedInvalidValueTreatmentMethod);
         FieldRef fieldRef1 = new FieldRef();
-        fieldRef1.setField(FieldName.create(PARAM_1));
+        fieldRef1.setField(PARAM_1);
         FieldRef fieldRef2 = new FieldRef();
-        fieldRef2.setField(FieldName.create(PARAM_2));
+        fieldRef2.setField(PARAM_2);
         nestedApply.addExpressions(fieldRef1, fieldRef2);
         Apply apply = new Apply();
         apply.setFunction(function);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java
index 81541acf23..1f65911c7a 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDefineFunctionFactoryTest.java
@@ -27,7 +27,6 @@ import org.dmg.pmml.Apply;
 import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DefineFunction;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.OpType;
 import org.dmg.pmml.ParameterField;
@@ -55,18 +54,18 @@ public class KiePMMLDefineFunctionFactoryTest {
 
     @Test
     void getDefineFunctionVariableDeclaration() throws IOException {
-        ParameterField parameterField1 = new ParameterField(FieldName.create(PARAM_1));
+        ParameterField parameterField1 = new ParameterField(PARAM_1);
         parameterField1.setDataType(DataType.DOUBLE);
         parameterField1.setOpType(OpType.CONTINUOUS);
         parameterField1.setDisplayName("displayName1");
-        ParameterField parameterField2 = new ParameterField(FieldName.create(PARAM_2));
+        ParameterField parameterField2 = new ParameterField(PARAM_2);
         parameterField2.setDataType(DataType.DOUBLE);
         parameterField2.setOpType(OpType.CONTINUOUS);
         parameterField2.setDisplayName("displayName2");
         Constant constant = new Constant();
         constant.setValue(value1);
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         Apply apply = new Apply();
         apply.setFunction("/");
         apply.addExpressions(constant, fieldRef);
@@ -85,17 +84,14 @@ public class KiePMMLDefineFunctionFactoryTest {
         BlockStmt retrieved = KiePMMLDefineFunctionFactory.getDefineFunctionVariableDeclaration(defineFunction);
         String text = getFileContent(TEST_01_SOURCE);
         Statement expected = JavaParserUtils
-                .parseBlock(String.format(text,
-                                          parameterField1.getName().getValue(),
+                .parseBlock(String.format(text,parameterField1.getName(),
                                           dataType1,
                                           opType1,
-                                          parameterField1.getDisplayName(),
-                                          parameterField2.getName().getValue(),
+                                          parameterField1.getDisplayName(),parameterField2.getName(),
                                           dataType2,
                                           opType2,
                                           parameterField2.getDisplayName(),
-                                          constant.getValue(),
-                                          fieldRef.getField().getValue(),
+                                          constant.getValue(),fieldRef.getField(),
                                           apply.getFunction(),
                                           apply.getInvalidValueTreatment().value(),
                                           dataType3,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java
index 9c0deb97cc..5c0de1d0d0 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDerivedFieldFactoryTest.java
@@ -27,7 +27,6 @@ import org.dmg.pmml.Apply;
 import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DerivedField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.OpType;
 import org.junit.jupiter.api.Test;
@@ -59,7 +58,7 @@ public class KiePMMLDerivedFieldFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         DerivedField derivedField = new DerivedField();
-        derivedField.setName(FieldName.create(PARAM_1));
+        derivedField.setName(PARAM_1);
         derivedField.setDataType(DataType.DOUBLE);
         derivedField.setOpType(OpType.CONTINUOUS);
         derivedField.setExpression(constant);
@@ -70,8 +69,7 @@ public class KiePMMLDerivedFieldFactoryTest {
         String text = getFileContent(TEST_01_SOURCE);
         Statement expected = JavaParserUtils
                 .parseBlock(String.format(text, constant.getValue(),
-                                          variableName,
-                                          derivedField.getName().getValue(),
+                                          variableName,derivedField.getName(),
                                           dataType,
                                           opType));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
@@ -85,9 +83,9 @@ public class KiePMMLDerivedFieldFactoryTest {
     void getDerivedFieldVariableDeclarationWithFieldRef() throws IOException {
         final String variableName = "variableName";
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         DerivedField derivedField = new DerivedField();
-        derivedField.setName(FieldName.create(PARAM_1));
+        derivedField.setName(PARAM_1);
         derivedField.setDataType(DataType.DOUBLE);
         derivedField.setOpType(OpType.CONTINUOUS);
         derivedField.setExpression(fieldRef);
@@ -97,9 +95,8 @@ public class KiePMMLDerivedFieldFactoryTest {
                 org.kie.pmml.compiler.commons.codegenfactories.KiePMMLDerivedFieldFactory.getDerivedFieldVariableDeclaration(variableName, derivedField);
         String text = getFileContent(TEST_02_SOURCE);
         Statement expected = JavaParserUtils
-                .parseBlock(String.format(text, fieldRef.getField().getValue(),
-                                          variableName,
-                                          derivedField.getName().getValue(),
+                .parseBlock(String.format(text,fieldRef.getField(),
+                                          variableName,derivedField.getName(),
                                           dataType,
                                           opType));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
@@ -115,12 +112,12 @@ public class KiePMMLDerivedFieldFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         Apply apply = new Apply();
         apply.setFunction("/");
         apply.addExpressions(constant, fieldRef);
         DerivedField derivedField = new DerivedField();
-        derivedField.setName(FieldName.create(PARAM_1));
+        derivedField.setName(PARAM_1);
         derivedField.setDataType(DataType.DOUBLE);
         derivedField.setOpType(OpType.CONTINUOUS);
         derivedField.setExpression(apply);
@@ -130,12 +127,10 @@ public class KiePMMLDerivedFieldFactoryTest {
         String text = getFileContent(TEST_03_SOURCE);
         Statement expected = JavaParserUtils
                 .parseBlock(String.format(text,
-                                          constant.getValue(),
-                                          fieldRef.getField().getValue(),
+                                          constant.getValue(),fieldRef.getField(),
                                           apply.getFunction(),
                                           apply.getInvalidValueTreatment().value(),
-                                          variableName,
-                                          derivedField.getName().getValue(),
+                                          variableName,derivedField.getName(),
                                           dataType,
                                           opType));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java
index 7d6783f932..8323b93d5c 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLDiscretizeFactoryTest.java
@@ -26,7 +26,6 @@ import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.Discretize;
 import org.dmg.pmml.DiscretizeBin;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.Interval;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -64,7 +63,7 @@ public class KiePMMLDiscretizeFactoryTest {
     void getDiscretizeVariableDeclaration() throws IOException {
         String variableName = "variableName";
         Discretize discretize = new Discretize();
-        discretize.setField(FieldName.create(NAME));
+        discretize.setField(NAME);
         discretize.setDataType(dataType);
         discretize.setMapMissingTo(MAP_MISSING_TO);
         discretize.setDefaultValue(DEFAULTVALUE);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java
index 9be27ab139..7db1e1472e 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldColumnPairFactoryTest.java
@@ -24,7 +24,6 @@ import java.util.List;
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.FieldColumnPair;
-import org.dmg.pmml.FieldName;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.commons.model.expressions.KiePMMLFieldColumnPair;
 import org.kie.pmml.compiler.commons.utils.JavaParserUtils;
@@ -43,7 +42,7 @@ public class KiePMMLFieldColumnPairFactoryTest {
         String fieldName = "fieldName";
         String column = "column";
         FieldColumnPair fieldColumnPair = new FieldColumnPair();
-        fieldColumnPair.setField(FieldName.create(fieldName));
+        fieldColumnPair.setField(fieldName);
         fieldColumnPair.setColumn(column);
 
         BlockStmt retrieved = KiePMMLFieldColumnPairFactory.getFieldColumnPairVariableDeclaration(variableName,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java
index 74a0a47a19..b25133c0f9 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLFieldRefFactoryTest.java
@@ -23,7 +23,6 @@ import java.util.List;
 
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.commons.model.expressions.KiePMMLFieldRef;
@@ -43,7 +42,7 @@ public class KiePMMLFieldRefFactoryTest {
         String fieldName = "fieldName";
         String mapMissingTo = "mapMissingTo";
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create(fieldName));
+        fieldRef.setField(fieldName);
         fieldRef.setMapMissingTo(mapMissingTo);
         BlockStmt retrieved = KiePMMLFieldRefFactory.getFieldRefVariableDeclaration(variableName, fieldRef);
         String text = getFileContent(TEST_01_SOURCE);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java
index 7363100b0c..66457e4833 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLInlineTableFactoryTest.java
@@ -55,7 +55,7 @@ public class KiePMMLInlineTableFactoryTest {
         DerivedField mapValued = pmmlModel.getTransformationDictionary()
                 .getDerivedFields()
                 .stream()
-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
+                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
         INLINETABLE = ((MapValues) mapValued.getExpression()).getInlineTable();
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java
index bd93f31de7..b71bd94743 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLLocalTransformationsFactoryTest.java
@@ -27,7 +27,6 @@ import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DerivedField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.LocalTransformations;
 import org.dmg.pmml.OpType;
 import org.junit.jupiter.api.Test;
@@ -78,7 +77,7 @@ public class KiePMMLLocalTransformationsFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         DerivedField toReturn = new DerivedField();
-        toReturn.setName(FieldName.create(PARAM_2 + counter));
+        toReturn.setName(PARAM_2 + counter);
         toReturn.setDataType(DataType.DOUBLE);
         toReturn.setOpType(OpType.CONTINUOUS);
         toReturn.setExpression(constant);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java
index aba744b193..4607c85989 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMapValuesFactoryTest.java
@@ -56,7 +56,7 @@ public class KiePMMLMapValuesFactoryTest {
         DerivedField mapValued = pmmlModel.getTransformationDictionary()
                 .getDerivedFields()
                 .stream()
-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
+                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
         MAPVALUES = ((MapValues) mapValued.getExpression());
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java
index dfed066bf4..543bd74ff0 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLMiningFieldFactoryTest.java
@@ -57,8 +57,7 @@ public class KiePMMLMiningFieldFactoryTest {
         String dataTypeString =
                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
         String text = getFileContent(TEST_01_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
-                                                                      miningField.getName().getValue(),
+        Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,miningField.getName(),
                                                                       dataTypeString));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
         List<Class<?>> imports = Arrays.asList(Arrays.class, Collections.class, KiePMMLInterval.class,
@@ -79,8 +78,7 @@ public class KiePMMLMiningFieldFactoryTest {
         String dataTypeString =
                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
         String text = getFileContent(TEST_02_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
-                                                                      miningField.getName().getValue(),
+        Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,miningField.getName(),
                                                                       dataTypeString,
                                                                       dataField.getValues().get(0).getValue(),
                                                                       dataField.getValues().get(1).getValue(),
@@ -102,8 +100,7 @@ public class KiePMMLMiningFieldFactoryTest {
         String dataTypeString =
                 DATA_TYPE.class.getName() + "." + DATA_TYPE.byName(dataField.getDataType().value()).name();
         String text = getFileContent(TEST_03_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,
-                                                                      miningField.getName().getValue(),
+        Statement expected = JavaParserUtils.parseBlock(String.format(text, VARIABLE_NAME,miningField.getName(),
                                                                       dataTypeString,
                                                                       dataField.getValues().get(0).getValue(),
                                                                       dataField.getValues().get(1).getValue(),
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java
index 8c2652e561..1c6cd52d74 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormContinuousFactoryTest.java
@@ -55,8 +55,7 @@ public class KiePMMLNormContinuousFactoryTest {
         String outlierString =
                 OUTLIER_TREATMENT_METHOD.class.getName() + "." + OUTLIER_TREATMENT_METHOD.byName(normContinuous.getOutliers().value()).name();
         String text = getFileContent(TEST_01_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
-                                                                      normContinuous.getField().getValue(),
+        Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,normContinuous.getField(),
                                                                       linearNorms.get(0).getOrig(),
                                                                       linearNorms.get(0).getNorm(),
                                                                       linearNorms.get(1).getOrig(),
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java
index f86b124884..e76bdd00a1 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLNormDiscreteFactoryTest.java
@@ -23,7 +23,6 @@ import java.util.List;
 
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.NormDiscrete;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.commons.model.expressions.KiePMMLNormDiscrete;
@@ -45,7 +44,7 @@ public class KiePMMLNormDiscreteFactoryTest {
         double mapMissingTo = 45.32;
 
         NormDiscrete normDiscrete = new NormDiscrete();
-        normDiscrete.setField(FieldName.create(fieldName));
+        normDiscrete.setField(fieldName);
         normDiscrete.setValue(fieldValue);
         normDiscrete.setMapMissingTo(mapMissingTo);
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java
index c123f9d16e..df4a6f50cc 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLParameterFieldFactoryTest.java
@@ -24,7 +24,6 @@ import java.util.List;
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.OpType;
 import org.dmg.pmml.ParameterField;
 import org.junit.jupiter.api.Test;
@@ -44,7 +43,7 @@ public class KiePMMLParameterFieldFactoryTest {
     @Test
     void getParameterFieldVariableDeclaration() throws IOException {
         String variableName = "variableName";
-        ParameterField parameterField = new ParameterField(FieldName.create(variableName));
+        ParameterField parameterField = new ParameterField(variableName);
         parameterField.setDataType(DataType.DOUBLE);
         parameterField.setOpType(OpType.CONTINUOUS);
         parameterField.setDisplayName("displayName");
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java
index 2ebfa7b462..86e72a5cc2 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLRowFactoryTest.java
@@ -56,14 +56,14 @@ public class KiePMMLRowFactoryTest {
         DerivedField mapValued = pmmlModel.getTransformationDictionary()
                 .getDerivedFields()
                 .stream()
-                .filter(derivedField -> MAPVALUED.equals(derivedField.getName().getValue()))
+                .filter(derivedField -> MAPVALUED.equals(derivedField.getName()))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
         MAPVALUED_ROW = ((MapValues) mapValued.getExpression()).getInlineTable().getRows().get(0);
         DerivedField dataEncoded = pmmlModel.getTransformationDictionary()
                 .getDerivedFields()
                 .stream()
-                .filter(derivedField -> DATAENCODED.equals(derivedField.getName().getValue()))
+                .filter(derivedField -> DATAENCODED.equals(derivedField.getName()))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Missing derived field " + MAPVALUED));
         DATAENCODED_ROW = ((MapValues) dataEncoded.getExpression()).getInlineTable().getRows().get(0);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java
index cbb71e2707..2ccf1a9b91 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimplePredicateFactoryTest.java
@@ -26,7 +26,6 @@ import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.SimplePredicate;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.api.enums.OPERATOR;
@@ -46,7 +45,7 @@ public class KiePMMLSimplePredicateFactoryTest {
     void getSimplePredicateVariableDeclaration() throws IOException {
         String variableName = "variableName";
         final SimplePredicate simplePredicate = new SimplePredicate();
-        simplePredicate.setField(FieldName.create("CUSTOM_FIELD"));
+        simplePredicate.setField("CUSTOM_FIELD");
         simplePredicate.setValue("235.435");
         simplePredicate.setOperator(SimplePredicate.Operator.EQUAL);
         String operatorString = OPERATOR.class.getName() + "." + OPERATOR.byName(simplePredicate.getOperator().value());
@@ -58,8 +57,7 @@ public class KiePMMLSimplePredicateFactoryTest {
 
         BlockStmt retrieved = KiePMMLSimplePredicateFactory.getSimplePredicateVariableDeclaration(variableName, simplePredicate, getFieldsFromDataDictionary(dataDictionary));
         String text = getFileContent(TEST_01_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
-                                                                      simplePredicate.getField().getValue(),
+        Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,simplePredicate.getField(),
                                                                       operatorString,
                                                                       simplePredicate.getValue()));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java
index 70ab189ceb..3ec3f1ef8f 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLSimpleSetPredicateFactoryTest.java
@@ -28,7 +28,6 @@ import org.dmg.pmml.Array;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.SimpleSetPredicate;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.api.enums.ARRAY_TYPE;
@@ -71,8 +70,7 @@ public class KiePMMLSimpleSetPredicateFactoryTest {
         BlockStmt retrieved = KiePMMLSimpleSetPredicateFactory.getSimpleSetPredicateVariableDeclaration(variableName,
                                                                                                         simpleSetPredicate);
         String text = getFileContent(TEST_01_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
-                                                                      simpleSetPredicate.getField().getValue(),
+        Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,simpleSetPredicate.getField(),
                                                                       arrayTypeString,
                                                                       booleanOperatorString,
                                                                       valuesString));
@@ -85,7 +83,7 @@ public class KiePMMLSimpleSetPredicateFactoryTest {
                                                            final SimpleSetPredicate.BooleanOperator inNotIn) {
         Array array = getArray(arrayType, values);
         SimpleSetPredicate toReturn = new SimpleSetPredicate();
-        toReturn.setField(FieldName.create(SIMPLE_SET_PREDICATE_NAME));
+        toReturn.setField(SIMPLE_SET_PREDICATE_NAME);
         toReturn.setBooleanOperator(inNotIn);
         toReturn.setArray(array);
         return toReturn;
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java
index 2e0b815573..a806d34045 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTextIndexFactoryTest.java
@@ -69,8 +69,7 @@ public class KiePMMLTextIndexFactoryTest {
         BlockStmt retrieved = KiePMMLTextIndexFactory.getTextIndexVariableDeclaration(variableName,
                                                                                       TEXTINDEX);
         String text = getFileContent(TEST_01_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,
-                                                                      TEXTINDEX.getTextField().getValue()));
+        Statement expected = JavaParserUtils.parseBlock(String.format(text, variableName,TEXTINDEX.getTextField()));
         assertThat(JavaParserUtils.equalsNode(expected, retrieved)).isTrue();
         List<Class<?>> imports = Arrays.asList(Arrays.class, Collections.class, Collectors.class,
                                                KiePMMLFieldRef.class, KiePMMLInlineTable.class,
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java
index 8cb7786184..e1b152a939 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/codegenfactories/KiePMMLTransformationDictionaryFactoryTest.java
@@ -29,7 +29,6 @@ import org.dmg.pmml.Constant;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DefineFunction;
 import org.dmg.pmml.DerivedField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.OpType;
 import org.dmg.pmml.ParameterField;
@@ -86,18 +85,18 @@ public class KiePMMLTransformationDictionaryFactoryTest {
     }
 
     private DefineFunction getDefineFunction(int counter) {
-        ParameterField parameterField1 = new ParameterField(FieldName.create(PARAM_1 + counter));
+        ParameterField parameterField1 = new ParameterField(PARAM_1 + counter);
         parameterField1.setDataType(DataType.DOUBLE);
         parameterField1.setOpType(OpType.CONTINUOUS);
         parameterField1.setDisplayName("displayName1" + counter);
-        ParameterField parameterField2 = new ParameterField(FieldName.create(PARAM_2 + counter));
+        ParameterField parameterField2 = new ParameterField(PARAM_2 + counter);
         parameterField2.setDataType(DataType.DOUBLE);
         parameterField2.setOpType(OpType.CONTINUOUS);
         parameterField2.setDisplayName("displayName2" + counter);
         Constant constant = new Constant();
         constant.setValue(value1);
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF" + counter));
+        fieldRef.setField("FIELD_REF" + counter);
         Apply apply = new Apply();
         apply.setFunction("/");
         apply.addExpressions(constant, fieldRef);
@@ -120,7 +119,7 @@ public class KiePMMLTransformationDictionaryFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         DerivedField toReturn = new DerivedField();
-        toReturn.setName(FieldName.create(PARAM_2 + counter));
+        toReturn.setName(PARAM_2 + counter);
         toReturn.setDataType(DataType.DOUBLE);
         toReturn.setOpType(OpType.CONTINUOUS);
         toReturn.setExpression(constant);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java
index 39a0971352..3a36790356 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/InstanceFactoriesTestCommon.java
@@ -109,7 +109,7 @@ public class InstanceFactoriesTestCommon {
         assertThat(toVerifyList).hasSameSizeAs(sourcesParameterFields);
         sourcesParameterFields.forEach(paramSource -> {
             Optional<KiePMMLParameterField> parameterToVerify =
-                    toVerifyList.stream().filter(param -> param.getName().equals(paramSource.getName().getValue()))
+                    toVerifyList.stream().filter(param -> param.getName().equals(paramSource.getName()))
                             .findFirst();
             assertThat(parameterToVerify).isPresent();
             commonVerifyKiePMMLParameterField(parameterToVerify.get(), paramSource);
@@ -119,24 +119,24 @@ public class InstanceFactoriesTestCommon {
     static void commonVerifyKiePMMLDerivedField(KiePMMLDerivedField toVerify,
                                                 DerivedField source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getName());
         DATA_TYPE expectedDataType = DATA_TYPE.byName(source.getDataType().value());
         assertThat(toVerify.getDataType()).isEqualTo(expectedDataType);
         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
-        String expectedDisplayName = "Display-" + source.getName().getValue();
+        String expectedDisplayName = "Display-" +source.getName();
         assertThat(toVerify.getDisplayName()).isEqualTo(expectedDisplayName);
         commonVerifyKiePMMLExpression(toVerify.getKiePMMLExpression(), source.getExpression());
     }
 
     static void commonVerifyKiePMMLParameterField(KiePMMLParameterField toVerify, ParameterField source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getName());
         DATA_TYPE expectedDataType = DATA_TYPE.byName(source.getDataType().value());
         assertThat(toVerify.getDataType()).isEqualTo(expectedDataType);
         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
-        String expectedDisplayName = "Display-" + source.getName().getValue();
+        String expectedDisplayName = "Display-" +source.getName();
         assertThat(toVerify.getDisplayName()).isEqualTo(expectedDisplayName);
     }
 
@@ -181,20 +181,20 @@ public class InstanceFactoriesTestCommon {
                                                    DataField dataField) {
         assertThat(toVerify).isNotNull();
         Object value = DATA_TYPE.byName(dataField.getDataType().value()).getActualValue(source.getValue());
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getValue()).isEqualTo(value);
         assertThat(toVerify.getOperator().getName()).isEqualTo(source.getOperator().value());
     }
 
     static void commonVerifyKiePMMLSimplePredicate(KiePMMLSimplePredicate toVerify, SimplePredicate source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getOperator().getName()).isEqualTo(source.getOperator().value());
     }
 
     static void commonVerifyKiePMMLSimpleSetPredicate(KiePMMLSimpleSetPredicate toVerify, SimpleSetPredicate source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         Array array = source.getArray();
         assertThat(toVerify.getArrayType().getName()).isEqualTo(array.getType().value());
         assertThat(toVerify.getInNotIn().getName()).isEqualTo(source.getBooleanOperator().value());
@@ -273,7 +273,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLDiscretize(KiePMMLDiscretize toVerify, Discretize source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
         assertThat(toVerify.getDefaultValue()).isEqualTo(source.getDefaultValue());
         assertThat(toVerify.getDataType().getName()).isEqualTo(source.getDataType().value());
@@ -283,7 +283,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLFieldRef(KiePMMLFieldRef toVerify, FieldRef source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
     }
 
@@ -311,7 +311,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLNormDiscrete(KiePMMLNormDiscrete toVerify, NormDiscrete source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getMapMissingTo()).isEqualTo(source.getMapMissingTo());
         assertThat(toVerify.getValue()).isEqualTo(source.getValue().toString());
     }
@@ -347,7 +347,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLFieldColumnPair(KiePMMLFieldColumnPair toVerify, FieldColumnPair source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getField());
         assertThat(toVerify.getColumn()).isEqualTo(source.getColumn());
     }
 
@@ -366,7 +366,7 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLMiningField(KiePMMLMiningField toVerify, MiningField source, DataField dataField) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getName());
         assertThat(toVerify.getOpType().getName()).isEqualTo(source.getOpType().value());
         assertThat(toVerify.getFieldUsageType().getName()).isEqualTo(source.getUsageType().value());
         assertThat(toVerify.getInvalidValueTreatmentMethod().getName()).isEqualTo(source.getInvalidValueTreatment().value());
@@ -380,10 +380,10 @@ public class InstanceFactoriesTestCommon {
 
     static void commonVerifyKiePMMLOutputField(KiePMMLOutputField toVerify, OutputField source) {
         assertThat(toVerify).isNotNull();
-        assertThat(toVerify.getName()).isEqualTo(source.getName().getValue());
+        assertThat(toVerify.getName()).isEqualTo(source.getName());
         assertThat(toVerify.getValue()).isEqualTo(source.getValue());
         assertThat(toVerify.getDataType().getName()).isEqualTo(source.getDataType().value());
-        assertThat(toVerify.getTargetField().get()).isEqualTo(source.getTargetField().getValue());
+        assertThat(toVerify.getTargetField().get()).isEqualTo(source.getTargetField());
         assertThat(toVerify.getResultFeature().getName()).isEqualTo(source.getResultFeature().value());
         assertThat(toVerify.getRank()).isEqualTo(source.getRank());
         assertThat(toVerify.getValue()).isEqualTo(source.getValue());
@@ -395,7 +395,7 @@ public class InstanceFactoriesTestCommon {
         assertThat(source.getTargetValues()).hasSameSizeAs(toVerify.getTargetValues());
         OP_TYPE expectedOpType = OP_TYPE.byName(source.getOpType().value());
         assertThat(toVerify.getOpType()).isEqualTo(expectedOpType);
-        assertThat(toVerify.getField()).isEqualTo(source.getField().getValue());
+        assertThat(toVerify.getField()).isEqualTo(source.getField());
         CAST_INTEGER expectedCastInteger = CAST_INTEGER.byName(source.getCastInteger().value());
         assertThat(toVerify.getCastInteger()).isEqualTo(expectedCastInteger);
         assertThat(toVerify.getMin()).isCloseTo(source.getMin().doubleValue(), Offset.offset(0.0));
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java
index 7769f9d331..d6008be920 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLLocalTransformationsInstanceFactoryTest.java
@@ -44,7 +44,7 @@ public class KiePMMLLocalTransformationsInstanceFactoryTest {
         assertThat(derivedFieldsToVerify).hasSameSizeAs(derivedFields);
         derivedFields.forEach(derivedFieldSource -> {
             Optional<KiePMMLDerivedField> derivedFieldToVerify =
-                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName().getValue()))
+                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName()))
                             .findFirst();
             assertThat(derivedFieldToVerify).isPresent();
             commonVerifyKiePMMLDerivedField(derivedFieldToVerify.get(), derivedFieldSource);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java
index 4082c4c622..bd9737cf9a 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/factories/KiePMMLTransformationDictionaryInstanceFactoryTest.java
@@ -47,7 +47,7 @@ public class KiePMMLTransformationDictionaryInstanceFactoryTest {
         assertThat(derivedFieldsToVerify).hasSameSizeAs(derivedFields);
         derivedFields.forEach(derivedFieldSource -> {
             Optional<KiePMMLDerivedField> derivedFieldToVerify =
-                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName().getValue()))
+                    derivedFieldsToVerify.stream().filter(param -> param.getName().equals(derivedFieldSource.getName()))
                             .findFirst();
             assertThat(derivedFieldToVerify).isPresent();
             commonVerifyKiePMMLDerivedField(derivedFieldToVerify.get(), derivedFieldSource);
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java
index d27ff4c447..aab94e8f8c 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/KiePMMLUtilTest.java
@@ -30,12 +30,11 @@ import java.util.Random;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBException;
 
 import org.apache.commons.lang3.RandomStringUtils;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MathContext;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningFunction;
@@ -140,7 +139,7 @@ public class KiePMMLUtilTest {
         assertThat(optionalDataField).isPresent();
         DataField retrieved = optionalDataField.get();
         String expected = String.format(TARGETFIELD_TEMPLATE, "golfing");
-        assertThat(retrieved.getName().getValue()).isEqualTo(expected);
+        assertThat(retrieved.getName()).isEqualTo(expected);
     }
 
     @Test
@@ -188,23 +187,23 @@ public class KiePMMLUtilTest {
     @Test
     void getTargetMiningField() {
         final DataField dataField = new DataField();
-        dataField.setName(FieldName.create("FIELD_NAME"));
+        dataField.setName("FIELD_NAME");
         final MiningField retrieved = KiePMMLUtil.getTargetMiningField(dataField);
-        assertThat(retrieved.getName().getValue()).isEqualTo(dataField.getName().getValue());
+        assertThat(retrieved.getName()).isEqualTo(dataField.getName());
         assertThat(retrieved.getUsageType()).isEqualTo(MiningField.UsageType.TARGET);
     }
 
     @Test
     void correctTargetFields() {
-        final MiningField miningField = new MiningField(FieldName.create("FIELD_NAME"));
+        final MiningField miningField = new MiningField("FIELD_NAME");
         final Targets targets = new Targets();
         final Target namedTarget = new Target();
         String targetName = "TARGET_NAME";
-        namedTarget.setField(FieldName.create(targetName));
+        namedTarget.setField(targetName);
         final Target unnamedTarget = new Target();
         targets.addTargets(namedTarget, unnamedTarget);
         KiePMMLUtil.correctTargetFields(miningField, targets);
-        assertThat(namedTarget.getField().getValue()).isEqualTo(targetName);
+        assertThat(namedTarget.getField()).isEqualTo(targetName);
         assertThat(unnamedTarget.getField()).isEqualTo(miningField.getName());
     }
 
@@ -290,7 +289,7 @@ public class KiePMMLUtilTest {
         List<DataField> dataFields = fieldNames.stream()
                 .map(fieldName -> {
                     DataField toReturn = new DataField();
-                    toReturn.setName(FieldName.create(fieldName));
+                    toReturn.setName(fieldName);
                     DataType dataType = DataType.values()[random.nextInt(DataType.values().length)];
                     toReturn.setDataType(dataType);
                     return toReturn;
@@ -300,40 +299,40 @@ public class KiePMMLUtilTest {
                 .mapToObj(dataFields::get)
                 .map(dataField -> {
                     MiningField toReturn = new MiningField();
-                    toReturn.setName(FieldName.create(dataField.getName().getValue()));
+                    toReturn.setName(dataField.getName());
                     toReturn.setUsageType(MiningField.UsageType.ACTIVE);
                     return toReturn;
                 })
                 .collect(Collectors.toList());
         DataField lastDataField = dataFields.get(dataFields.size() - 1);
         MiningField targetMiningField = new MiningField();
-        targetMiningField.setName(FieldName.create(lastDataField.getName().getValue()));
+        targetMiningField.setName(lastDataField.getName());
         targetMiningField.setUsageType(MiningField.UsageType.TARGET);
         miningFields.add(targetMiningField);
         // Following OutputFields should be populated based on "ResultFeature.PROBABILITY"
         List<OutputField> outputFields = IntStream.range(0, 3)
                 .mapToObj(i -> {
                     OutputField toReturn = new OutputField();
-                    toReturn.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+                    toReturn.setName(RandomStringUtils.random(6, true, false));
                     toReturn.setResultFeature(ResultFeature.PROBABILITY);
                     return toReturn;
                 })
                 .collect(Collectors.toList());
         // Following OutputField should be populated based on "ResultFeature.PREDICTED_VALUE"
         OutputField targetOutputField = new OutputField();
-        targetOutputField.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+        targetOutputField.setName(RandomStringUtils.random(6, true, false));
         targetOutputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
         outputFields.add(targetOutputField);
         // Following OutputField should be populated based on "TargetField" property
         OutputField targetingOutputField = new OutputField();
-        targetingOutputField.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
-        targetingOutputField.setTargetField(FieldName.create(targetMiningField.getName().getValue()));
+        targetingOutputField.setName(RandomStringUtils.random(6, true, false));
+        targetingOutputField.setTargetField(targetMiningField.getName());
         outputFields.add(targetingOutputField);
         outputFields.forEach(outputField -> assertThat(outputField.getDataType()).isNull());
         IntStream.range(0, 2)
                 .forEach(i -> {
                     OutputField toAdd = new OutputField();
-                    toAdd.setName(FieldName.create(RandomStringUtils.random(6, true, false)));
+                    toAdd.setName(RandomStringUtils.random(6, true, false));
                     DataType dataType = DataType.values()[random.nextInt(DataType.values().length)];
                     toAdd.setDataType(dataType);
                     outputFields.add(toAdd);
@@ -368,7 +367,7 @@ public class KiePMMLUtilTest {
         assertThat(retrieved).isNotNull();
         assertThat(retrieved).hasSize(1);
         MiningField targetField = retrieved.get(0);
-        assertThat(targetField.getName().getValue()).isEqualTo("car_location");
+        assertThat(targetField.getName()).isEqualTo("car_location");
         assertThat(targetField.getUsageType().value()).isEqualTo("target");
     }
 
@@ -381,7 +380,7 @@ public class KiePMMLUtilTest {
         assertThat(retrieved).isNotNull();
         assertThat(retrieved).hasSize(1);
         MiningField targetField = retrieved.get(0);
-        assertThat(targetField.getName().getValue()).isEqualTo("car_location");
+        assertThat(targetField.getName()).isEqualTo("car_location");
         assertThat(targetField.getUsageType().value()).isEqualTo("target");
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java
index 626fd4316e..7470fe4047 100644
--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java
+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-core/src/test/java/org/kie/pmml/compiler/testingutils/TestingModel.java
@@ -104,5 +104,15 @@ public class TestingModel extends Model {
         return modelName;
     }
 
+    @Override
+    public MiningFunction requireMiningFunction() {
+        return null;
+    }
+
+    @Override
+    public MiningSchema requireMiningSchema() {
+        return null;
+    }
+
 
 }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java
index 7b7ca55b9e..e760d10cfb 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/main/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactory.java
@@ -170,7 +170,7 @@ public class KiePMMLClusteringModelFactory {
         boolean isCenterField =
                 clusteringField.getCenterField() == null || clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
         KiePMMLCompareFunction kiePMMLCompareFunction = clusteringField.getCompareFunction() != null ? compareFunctionFrom(clusteringField.getCompareFunction()) : null;
-        return new KiePMMLClusteringField(clusteringField.getField().getValue(), fieldWeight, isCenterField,
+        return new KiePMMLClusteringField(clusteringField.getField(), fieldWeight, isCenterField,
                                           kiePMMLCompareFunction, null);
     }
 
@@ -250,7 +250,7 @@ public class KiePMMLClusteringModelFactory {
                 clusteringField.getCenterField() == null || clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
 
         NodeList<Expression> arguments = new NodeList<>();
-        arguments.add(literalExprFrom(clusteringField.getField().getValue()));
+        arguments.add(literalExprFrom(clusteringField.getField()));
         arguments.add(new DoubleLiteralExpr(fieldWeight));
         arguments.add(new BooleanLiteralExpr(isCenterField));
         arguments.add(clusteringField.getCompareFunction() == null ? new NullLiteralExpr() :
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java
index 5fbfa7f31d..8f102e47c4 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-clustering/kie-pmml-models-clustering-compiler/src/test/java/org/kie/pmml/models/clustering/compiler/factories/KiePMMLClusteringModelFactoryTest.java
@@ -35,7 +35,6 @@ import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.Euclidean;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningFunction;
 import org.dmg.pmml.MiningSchema;
@@ -105,7 +104,7 @@ public class KiePMMLClusteringModelFactoryTest {
         IntStream.range(0, 3).forEach(i -> {
             ClusteringField clusteringField = getRandomClusteringField();
             clusteringFields.add(clusteringField);
-            fieldNames.add(clusteringField.getField().getValue());
+            fieldNames.add(clusteringField.getField());
             clusters.add(getRandomCluster());
         });
 
@@ -190,7 +189,7 @@ public class KiePMMLClusteringModelFactoryTest {
     void getKiePMMLClusteringField() {
         ClusteringField clusteringField = new ClusteringField();
         final Random random = new Random();
-        clusteringField.setField(FieldName.create("TEXT"));
+        clusteringField.setField("TEXT");
         clusteringField.setFieldWeight(random.nextDouble());
         clusteringField.setCenterField(getRandomEnum(ClusteringField.CenterField.values()));
         clusteringField.setCompareFunction(getRandomEnum(CompareFunction.values()));
@@ -253,7 +252,7 @@ public class KiePMMLClusteringModelFactoryTest {
 
         String expectedCompareFunction =
                 KiePMMLCompareFunction.class.getCanonicalName() + "." + comparisonMeasure.getCompareFunction().name();
-        String expectedTargetField = targetMiningField.getName().getValue();
+        String expectedTargetField =targetMiningField.getName();
 
         KiePMMLClusteringModelFactory.setStaticGetter(compilationDTO,
                 modelTemplate);
@@ -282,7 +281,7 @@ public class KiePMMLClusteringModelFactoryTest {
                                                       ClusteringField clusteringField) {
         assertThat(retrieved).isNotNull();
         boolean isCenterField = clusteringField.getCenterField() == ClusteringField.CenterField.TRUE;
-        assertThat(retrieved.getField()).isEqualTo(clusteringField.getField().getValue());
+        assertThat(retrieved.getField()).isEqualTo(clusteringField.getField());
         assertThat(retrieved.getFieldWeight()).isEqualTo(clusteringField.getFieldWeight());
         assertThat(retrieved.getCenterField()).isEqualTo(isCenterField);
         assertThat(retrieved.getCompareFunction()).isPresent();
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java
index 06274037a0..4719245241 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactory.java
@@ -63,8 +63,8 @@ public class KiePMMLDataDictionaryASTFactory {
      * @param field
      */
     public KiePMMLDroolsType declareType(Field field) {
-        String generatedType = getGeneratedClassName(field.getName().getValue());
-        String fieldName = field.getName().getValue();
+        String generatedType = getGeneratedClassName(field.getName());
+        String fieldName =field.getName();
         String fieldType = field.getDataType().value();
         fieldTypeMap.put(fieldName, new KiePMMLOriginalTypeGeneratedType(fieldType, generatedType));
         return new KiePMMLDroolsType(generatedType, DATA_TYPE.byName(fieldType).getMappedClass().getSimpleName());
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java
index e66d696e1c..f267248495 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactory.java
@@ -60,8 +60,8 @@ public class KiePMMLDerivedFieldASTFactory {
      * @param derivedField
      */
     public KiePMMLDroolsType declareType(DerivedField derivedField) {
-        String generatedType = getSanitizedClassName(derivedField.getName().getValue().toUpperCase());
-        String fieldName = derivedField.getName().getValue();
+        String generatedType = getSanitizedClassName(derivedField.getName().toUpperCase());
+        String fieldName =derivedField.getName();
         String fieldType = derivedField.getDataType().value();
         fieldTypeMap.put(fieldName, new KiePMMLOriginalTypeGeneratedType(fieldType, generatedType));
         return new KiePMMLDroolsType(generatedType, DATA_TYPE.byName(fieldType).getMappedClass().getSimpleName());
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java
index 45091cb9c4..0ca5223391 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactory.java
@@ -55,7 +55,7 @@ public class KiePMMLSimplePredicateASTFactory extends KiePMMLAbstractPredicateAS
             final KiePMMLReasonCodeAndValue reasonCodeAndValue,
             final boolean isLastCharacteristic) {
         logger.trace("declareRuleFromSimplePredicateSurrogate {} {} {} {}", agendaActivationGroup, toAccumulate, statusToSet, isLastCharacteristic);
-        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
+        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
         String surrogateCurrentRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN, predicateASTFactoryData.getCurrentRule(), fieldName);
         final List<KiePMMLFieldOperatorValue> constraints = Collections.singletonList(KiePMMLASTFactoryUtils.getConstraintEntryFromSimplePredicates(fieldName, BOOLEAN_OPERATOR.SURROGATE, Collections.singletonList((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap()));
         // Create "TRUE" matcher
@@ -79,7 +79,7 @@ public class KiePMMLSimplePredicateASTFactory extends KiePMMLAbstractPredicateAS
             final Object result,
             boolean isFinalLeaf) {
         logger.trace("declareRuleFromSimplePredicateSurrogate {} {} {}", agendaActivationGroup, result, isFinalLeaf);
-        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
+        String fieldName = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
         String surrogateCurrentRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN, predicateASTFactoryData.getCurrentRule(), fieldName);
         final List<KiePMMLFieldOperatorValue> constraints = Collections.singletonList(KiePMMLASTFactoryUtils.getConstraintEntryFromSimplePredicates(fieldName, BOOLEAN_OPERATOR.SURROGATE, Collections.singletonList((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap()));
         String statusToSet = isFinalLeaf ? DONE : predicateASTFactoryData.getCurrentRule();
@@ -215,7 +215,7 @@ public class KiePMMLSimplePredicateASTFactory extends KiePMMLAbstractPredicateAS
     protected KiePMMLDroolsRule.Builder getBuilderForSimplePredicate(final String statusToSet) {
         logger.trace("getBuilderForSimplePredicate {}", statusToSet);
         String statusConstraint = StringUtils.isEmpty(predicateASTFactoryData.getParentPath()) ? KiePMMLAbstractModelASTFactory.STATUS_NULL : String.format(STATUS_PATTERN, predicateASTFactoryData.getParentPath());
-        String key = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField().getValue()).getGeneratedType();
+        String key = predicateASTFactoryData.getFieldTypeMap().get(((SimplePredicate) predicateASTFactoryData.getPredicate()).getField()).getGeneratedType();
         OPERATOR operator = OPERATOR.byName(((SimplePredicate) predicateASTFactoryData.getPredicate()).getOperator().value());
         Object value = KiePMMLASTFactoryUtils.getCorrectlyFormattedObject(((SimplePredicate) predicateASTFactoryData.getPredicate()), predicateASTFactoryData.getFieldTypeMap());
         List<KiePMMLFieldOperatorValue> andConstraints = Collections.singletonList(new KiePMMLFieldOperatorValue(key, BOOLEAN_OPERATOR.AND, Collections.singletonList(new KiePMMLOperatorValue(operator, value)), null));
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java
index 3cd8657705..6f7028f782 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimpleSetPredicateASTFactory.java
@@ -72,11 +72,11 @@ public class KiePMMLSimpleSetPredicateASTFactory extends KiePMMLAbstractPredicat
         logger.trace("declareRuleFromSimpleSetPredicate {}", statusToSet);
         String statusConstraint = StringUtils.isEmpty(predicateASTFactoryData.getParentPath()) ? STATUS_NULL : String.format(STATUS_PATTERN, predicateASTFactoryData.getParentPath());
         SimpleSetPredicate simpleSetPredicate = (SimpleSetPredicate) predicateASTFactoryData.getPredicate();
-        String key = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField().getValue()).getGeneratedType();
+        String key = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField()).getGeneratedType();
         String stringValue = (String) simpleSetPredicate.getArray().getValue();
         String[] valuesArray = stringValue.split(" ");
         List<Object> value = Arrays.stream(valuesArray).map(rawValue -> {
-            String originalType = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField().getValue()).getOriginalType();
+            String originalType = predicateASTFactoryData.getFieldTypeMap().get(simpleSetPredicate.getField()).getOriginalType();
             switch (originalType) {
                 case "string":
                     return "\"" + rawValue + "\"";
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java
index 491df26632..35b5ffa32e 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java
@@ -55,7 +55,7 @@ public class KiePMMLASTFactoryUtils {
         }
         final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()
                 .map(child -> (SimplePredicate) child)
-                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));
+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField()).getGeneratedType()));
         final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();
         populateKiePMMLFieldOperatorValueListWithSimplePredicates(toReturn, compoundPredicate.getBooleanOperator(), predicatesByField, fieldTypeMap);
         final List<CompoundPredicate> compoundPredicates = compoundPredicate.getPredicates().stream()
@@ -113,7 +113,7 @@ public class KiePMMLASTFactoryUtils {
                 .filter(predicate -> predicate instanceof SimplePredicate)
                 .map(predicate -> {
                     SimplePredicate simplePredicate = (SimplePredicate) predicate;
-                    String fieldName = fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType();
+                    String fieldName = fieldTypeMap.get(simplePredicate.getField()).getGeneratedType();
                     OPERATOR operator = OPERATOR.byName(simplePredicate.getOperator().value());
                     Object value = getCorrectlyFormattedObject(simplePredicate, fieldTypeMap);
                     return new KiePMMLFieldOperatorValue(fieldName, null, Collections.singletonList(new KiePMMLOperatorValue(operator, value)), null);
@@ -121,7 +121,7 @@ public class KiePMMLASTFactoryUtils {
     }
 
     public static Object getCorrectlyFormattedObject(final SimplePredicate simplePredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {
-        DATA_TYPE dataType = DATA_TYPE.byName(fieldTypeMap.get(simplePredicate.getField().getValue()).getOriginalType());
+        DATA_TYPE dataType = DATA_TYPE.byName(fieldTypeMap.get(simplePredicate.getField()).getOriginalType());
         return getCorrectlyFormattedResult(simplePredicate.getValue(), dataType);
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java
index 7f39b545f3..874ffd5b6b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLCompoundPredicateASTFactoryTest.java
@@ -170,7 +170,7 @@ public class KiePMMLCompoundPredicateASTFactoryTest {
                         .findFirst();
                 if (fieldName.isPresent()) {
                     SimplePredicate mappedPredicate = predicates.stream()
-                            .filter(pred -> fieldName.get().equals(pred.getField().getValue()))
+                            .filter(pred -> fieldName.get().equals(pred.getField()))
                             .findFirst()
                             .orElse(null);
                     assertThat(mappedPredicate).isNotNull();
@@ -235,7 +235,7 @@ public class KiePMMLCompoundPredicateASTFactoryTest {
                         .findFirst();
                 if (fieldName.isPresent()) {
                     SimplePredicate mappedPredicate = predicates.stream()
-                            .filter(pred -> fieldName.get().equals(pred.getField().getValue())).findFirst().orElse(null);
+                            .filter(pred -> fieldName.get().equals(pred.getField())).findFirst().orElse(null);
                     assertThat(mappedPredicate).isNotNull();
                     assertThat(retrieved.getStatusConstraint()).isNull();
                     assertThat(retrieved.getActivationGroup()).isEqualTo(agendaActivationGroup);
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java
index 7425a8e4d1..5b4d3250df 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDataDictionaryASTFactoryTest.java
@@ -40,7 +40,7 @@ public class KiePMMLDataDictionaryASTFactoryTest {
     @Test
     void declareTypes() {
         List<DataField> dataFields = Arrays.asList(getTypeDataField(), getDottedTypeDataField(), getTypeDataField(), getDottedTypeDataField());
-        DataDictionary dataDictionary = new DataDictionary(dataFields);
+        DataDictionary dataDictionary = new DataDictionary().addDataFields(dataFields.toArray(new org.dmg.pmml.DataField[0]));
         final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();
         List<KiePMMLDroolsType> retrieved = KiePMMLDataDictionaryASTFactory.factory(fieldTypeMap).declareTypes(getFieldsFromDataDictionary(dataDictionary));
         assertThat(retrieved).isNotNull();
@@ -58,12 +58,12 @@ public class KiePMMLDataDictionaryASTFactoryTest {
     }
 
     private void commonVerifyTypeDeclarationDescr(DataField dataField, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final KiePMMLDroolsType kiePMMLDroolsType) {
-        String expectedGeneratedType = getSanitizedClassName(dataField.getName().getValue());
+        String expectedGeneratedType = getSanitizedClassName(dataField.getName());
         String expectedMappedOriginalType = DATA_TYPE.byName(dataField.getDataType().value()).getMappedClass().getSimpleName();
         assertThat(kiePMMLDroolsType.getName()).startsWith(expectedGeneratedType);
         assertThat(kiePMMLDroolsType.getType()).isEqualTo(expectedMappedOriginalType);
-        assertThat(fieldTypeMap).containsKey(dataField.getName().getValue());
-        KiePMMLOriginalTypeGeneratedType kiePMMLOriginalTypeGeneratedType = fieldTypeMap.get(dataField.getName().getValue());
+        assertThat(fieldTypeMap).containsKey(dataField.getName());
+        KiePMMLOriginalTypeGeneratedType kiePMMLOriginalTypeGeneratedType = fieldTypeMap.get(dataField.getName());
         assertThat(kiePMMLOriginalTypeGeneratedType.getOriginalType()).isEqualTo(dataField.getDataType().value());
         assertThat(kiePMMLOriginalTypeGeneratedType.getGeneratedType()).startsWith(expectedGeneratedType);
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java
index cb32a1c418..9694394d76 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLDerivedFieldASTFactoryTest.java
@@ -25,7 +25,6 @@ import java.util.stream.IntStream;
 
 import org.dmg.pmml.DataType;
 import org.dmg.pmml.DerivedField;
-import org.dmg.pmml.FieldName;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.kie.pmml.api.enums.DATA_TYPE;
@@ -67,7 +66,7 @@ public class KiePMMLDerivedFieldASTFactoryTest {
     }
 
     private void commonValidateKiePMMLDroolsType(KiePMMLDroolsType toValidate, DerivedField derivedField) {
-        String derivedFieldName = derivedField.getName().getValue();
+        String derivedFieldName =derivedField.getName();
         String expectedName = getSanitizedClassName(derivedFieldName.toUpperCase());
         assertThat(toValidate.getName()).isEqualTo(expectedName);
         String expectedType = DATA_TYPE.byName(derivedField.getDataType().value()).getMappedClass().getSimpleName();
@@ -80,7 +79,7 @@ public class KiePMMLDerivedFieldASTFactoryTest {
 
     private DerivedField getDerivedField(String fieldName) {
         DerivedField toReturn = new DerivedField();
-        toReturn.setName(FieldName.create(fieldName));
+        toReturn.setName(fieldName);
         final DATA_TYPE[] values = DATA_TYPE.values();
         int rndInt = new Random().nextInt(values.length - 1);
         DATA_TYPE dataType = values[rndInt];
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java
index eda072a71e..08fbb62ee3 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/ast/factories/KiePMMLSimplePredicateASTFactoryTest.java
@@ -65,7 +65,7 @@ public class KiePMMLSimplePredicateASTFactoryTest {
         assertThat(retrieved).isNotNull();
         String baseExpectedRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN,
                 currentRule,
-                fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType());
+                fieldTypeMap.get(simplePredicate.getField()).getGeneratedType());
         String expectedRule = baseExpectedRule + "_TRUE";
         assertThat(retrieved.getName()).isEqualTo(expectedRule);
         assertThat(retrieved.getStatusToSet()).isEqualTo(DONE);
@@ -133,7 +133,7 @@ public class KiePMMLSimplePredicateASTFactoryTest {
         assertThat(retrieved).isNotNull();
         String baseExpectedRule = String.format(KiePMMLAbstractModelASTFactory.SURROGATE_RULENAME_PATTERN,
                 currentRule,
-                fieldTypeMap.get(simplePredicate.getField().getValue()).getGeneratedType());
+                fieldTypeMap.get(simplePredicate.getField()).getGeneratedType());
         String expectedRule = baseExpectedRule + "_TRUE";
         assertThat(retrieved.getName()).isEqualTo(expectedRule);
         assertThat(retrieved.getStatusToSet()).isEqualTo(currentRule);
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java
index 1c5c90e631..1d3192f47b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrRhsFactoryTest.java
@@ -20,7 +20,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.StringJoiner;
 
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.OutputField;
 import org.dmg.pmml.ResultFeature;
 import org.drools.drl.ast.dsl.DescrFactory;
@@ -164,7 +163,7 @@ public class KiePMMLDescrRhsFactoryTest {
         String outputFieldName = "OUTPUTFIELDNAME";
         Object result = "RESULT";
         OutputField outputField = new OutputField();
-        outputField.setName(FieldName.create(outputFieldName));
+        outputField.setName(outputFieldName);
         outputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
         List<OutputField> outputFields = Collections.singletonList(outputField);
         KiePMMLDroolsRule.Builder builder = KiePMMLDroolsRule.builder(ruleName, statusToSet, outputFields);
@@ -209,7 +208,7 @@ public class KiePMMLDescrRhsFactoryTest {
         String outputFieldName = "OUTPUTFIELDNAME";
         Object result = "RESULT";
         OutputField outputField = new OutputField();
-        outputField.setName(FieldName.create(outputFieldName));
+        outputField.setName(outputFieldName);
         outputField.setResultFeature(ResultFeature.PREDICTED_VALUE);
         List<OutputField> outputFields = Collections.singletonList(outputField);
         StringJoiner joiner = new StringJoiner("");
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java
index 5d2096f1d8..4461cfb39e 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/provider/DroolsModelProviderTest.java
@@ -181,7 +181,7 @@ public class DroolsModelProviderTest {
     private void commonVerifyTypesList(Field<?> toVerify, final List<KiePMMLDroolsType> types) {
         assertThat(types.stream()
                            .anyMatch(type -> {
-                               String expectedName = getSanitizedClassName(toVerify.getName().getValue());
+                               String expectedName = getSanitizedClassName(toVerify.getName());
                                if (!type.getName().startsWith(expectedName)) {
                                    return false;
                                }
@@ -206,13 +206,13 @@ public class DroolsModelProviderTest {
                                           final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {
         assertThat(fieldTypeMap.entrySet().stream()
                            .anyMatch(entry -> {
-                               if (!entry.getKey().equals(toVerify.getName().getValue())) {
+                               if (!entry.getKey().equals(toVerify.getName())) {
                                    return false;
                                }
                                KiePMMLOriginalTypeGeneratedType value = entry.getValue();
                                assertThat(value.getOriginalType()).isEqualTo(toVerify.getDataType().value());
                                String expectedGeneratedType =
-                                       getSanitizedClassName(toVerify.getName().getValue());
+                                       getSanitizedClassName(toVerify.getName());
                                assertThat(value.getGeneratedType()).startsWith(expectedGeneratedType);
                                return true;
                            })).isTrue();
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java
index e0c824f1d3..ddfa79ee1b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java
@@ -195,7 +195,7 @@ public class KiePMMLASTFactoryUtilsTest {
                             kiePMMLFieldOperatorValue.getKiePMMLOperatorValues().get(0);
                     SimplePredicate simplePredicate = nestedPredicates.stream()
                             .map(predicate -> (SimplePredicate) predicate)
-                            .filter(predicate -> predicate.getField().getValue().equals(getOriginalPredicateName(kiePMMLFieldOperatorValue.getName())))
+                            .filter(predicate -> predicate.getField().equals(getOriginalPredicateName(kiePMMLFieldOperatorValue.getName())))
                             .findFirst()
                             .orElseThrow(() -> new RuntimeException("Failed to find SimplePredicate for " + kiePMMLFieldOperatorValue.getName()));
                     commonVerifyKiePMMLOperatorValue(kiePMMLOperatorValue, simplePredicate);
@@ -208,7 +208,7 @@ public class KiePMMLASTFactoryUtilsTest {
 
     private void commonPopulateKiePMMLFieldOperatorValueListWithSimplePredicates(CompoundPredicate.BooleanOperator compoundBooleanOperator, BOOLEAN_OPERATOR booleanOperator) {
         final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()
-                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));
+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField()).getGeneratedType()));
         final List<KiePMMLFieldOperatorValue> toPopulate = new ArrayList<>();
         KiePMMLASTFactoryUtils.populateKiePMMLFieldOperatorValueListWithSimplePredicates(toPopulate,
                                                                                          compoundBooleanOperator,
@@ -258,7 +258,7 @@ public class KiePMMLASTFactoryUtilsTest {
     private SimplePredicate getSimplePredicate(String generatedType) {
         String predicateName = getOriginalPredicateName(generatedType);
         return simplePredicates.stream()
-                .filter(simplePredicate -> simplePredicate.getField().getValue().equals(predicateName))
+                .filter(simplePredicate -> simplePredicate.getField().equals(predicateName))
                 .findFirst()
                 .orElseThrow(() -> new RuntimeException("Failed to find SimplePredicate for " + predicateName));
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java
index 3e160ea62a..488c28cc07 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTTestUtils.java
@@ -22,7 +22,6 @@ import java.util.Map;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.LocalTransformations;
 import org.dmg.pmml.OpType;
 import org.dmg.pmml.OutputField;
@@ -67,7 +66,7 @@ public class KiePMMLASTTestUtils {
         DataField toReturn = new DataField();
         toReturn.setOpType(OpType.CONTINUOUS);
         toReturn.setDataType(DataType.DATE);
-        toReturn.setName(FieldName.create("dataField"));
+        toReturn.setName("dataField");
         return toReturn;
     }
 
@@ -75,7 +74,7 @@ public class KiePMMLASTTestUtils {
         DataField toReturn = new DataField();
         toReturn.setOpType(OpType.CONTINUOUS);
         toReturn.setDataType(DataType.BOOLEAN);
-        toReturn.setName(FieldName.create("dotted.field"));
+        toReturn.setName("dotted.field");
         return toReturn;
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java
index 28fdafd02a..d9955b6c0e 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtilsTest.java
@@ -42,7 +42,6 @@ import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
 import org.dmg.pmml.DataType;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningFunction;
 import org.dmg.pmml.MiningSchema;
@@ -84,7 +83,7 @@ public class KiePMMLDroolsModelFactoryUtilsTest {
     void getKiePMMLModelCompilationUnit() {
         DataDictionary dataDictionary = new DataDictionary();
         String targetFieldString = "target.field";
-        FieldName targetFieldName = FieldName.create(targetFieldString);
+         String targetFieldName =targetFieldString;
         dataDictionary.addDataFields(new DataField(targetFieldName, OpType.CONTINUOUS, DataType.DOUBLE));
         String modelName = "ModelName";
         TreeModel model = new TreeModel();
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java
index 16d50cd211..af24a2d2f8 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelCharacteristicASTFactoryTest.java
@@ -368,7 +368,7 @@ public class KiePMMLScorecardModelCharacteristicASTFactoryTest {
         DATA_TYPE dataType = dataDictionary.getDataFields().stream().filter(dataField -> dataField.getName().equals(simplePredicate.getField()))
                 .map(dataField -> DATA_TYPE.byName(dataField.getDataType().value()))
                 .findFirst()
-                .orElseThrow(() -> new RuntimeException("Failed to find DataField for " + simplePredicate.getField().getValue()));
+                .orElseThrow(() -> new RuntimeException("Failed to find DataField for " +simplePredicate.getField()));
         return getCorrectlyFormattedResult(simplePredicate.getValue(), dataType);
     }
 
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java
index 22d3cb65c1..d48aff5c66 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/factories/KiePMMLTreeModelFactoryTest.java
@@ -98,7 +98,7 @@ public class KiePMMLTreeModelFactoryTest {
         assertThat(retrieved).isNotNull();
         List<DataField> dataFields = dataDictionary.getDataFields();
         assertThat(fieldTypeMap).hasSameSizeAs(dataFields);
-        dataFields.forEach(dataField -> assertThat(fieldTypeMap).containsKey(dataField.getName().getValue()));
+        dataFields.forEach(dataField -> assertThat(fieldTypeMap).containsKey(dataField.getName()));
     }
 
     @Test
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java
index 01fd1ef0c7..393c4f4343 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/AbstractKiePMMLFactoryTest.java
@@ -20,7 +20,7 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.List;
 
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DerivedField;
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java
index a01f6ba83f..2316de9503 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactoryTest.java
@@ -22,7 +22,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBException;
 
 import com.github.javaparser.ast.CompilationUnit;
 import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java
index cc2616fdef..f4ecab705b 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactoryTest.java
@@ -22,7 +22,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBException;
 
 import com.github.javaparser.ast.CompilationUnit;
 import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java
index 87c89db11f..bbd01cae21 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/test/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentationFactoryTest.java
@@ -21,7 +21,7 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
-import javax.xml.bind.JAXBException;
+import jakarta.xml.bind.JAXBException;
 
 import org.dmg.pmml.mining.MiningModel;
 import org.junit.jupiter.api.BeforeAll;
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java
index d843728fb0..7de61d608c 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProvider.java
@@ -191,7 +191,7 @@ public class RegressionModelImplementationProvider implements ModelImplementatio
         if (targetFields.size() != 1) {
             throw new KiePMMLException("Expected one target field, retrieved " + targetFields.size());
         }
-        if (toValidate.getTargetField() != null && !(Objects.equals(toValidate.getTargetField().getValue(),
+        if (toValidate.getTargetField() != null && !(Objects.equals(toValidate.getTargetField(),
                                                                     targetFields.get(0).getName()))) {
             throw new KiePMMLException(String.format("Not-matching target fields: %s %s", toValidate.getTargetField()
                     , targetFields.get(0).getName()));
@@ -206,7 +206,7 @@ public class RegressionModelImplementationProvider implements ModelImplementatio
         return fields.stream()
                 .filter(DataField.class::isInstance)
                 .map(DataField.class::cast)
-                .filter(dataField -> Objects.equals(dataField.getName().getValue(), categoricalFieldName)).mapToDouble(dataField -> dataField.getValues().size())
+                .filter(dataField -> Objects.equals(dataField.getName(), categoricalFieldName)).mapToDouble(dataField -> dataField.getValues().size())
                 .findFirst().orElse(0) == 2;
     }
 
@@ -214,7 +214,7 @@ public class RegressionModelImplementationProvider implements ModelImplementatio
         List<KiePMMLNameOpType> targetFields = getTargetFields(fields, toValidate);
         final List<String> categoricalFields = fields.stream()
                 .filter(dataField -> OpType.CATEGORICAL.equals(dataField.getOpType()))
-                .map(dataField -> dataField.getName().getValue())
+                .map(dataField ->dataField.getName())
                 .collect(Collectors.toList());
         final List<KiePMMLNameOpType> categoricalNameTypes =
                 targetFields.stream().filter(targetField -> categoricalFields.contains(targetField.getName())).collect(Collectors.toList());
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java
index fcffd3bb09..2721ba7383 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactory.java
@@ -203,7 +203,7 @@ public class KiePMMLRegressionTableFactory {
      */
     static Map<String, SerializableFunction<Double, Double>> getNumericPredictorsMap(final List<NumericPredictor> numericPredictors) {
         return numericPredictors.stream()
-                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getName().getValue(),
+                .collect(Collectors.toMap(numericPredictor ->numericPredictor.getField(),
                                           KiePMMLRegressionTableFactory::getNumericPredictorEntry));
     }
 
@@ -232,7 +232,7 @@ public class KiePMMLRegressionTableFactory {
      */
     static Map<String, SerializableFunction<String, Double>> getCategoricalPredictorsMap(final List<CategoricalPredictor> categoricalPredictors) {
         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor ->categoricalPredictor.getField()));
         return groupedCollectors.entrySet().stream()
                 .map(entry -> {
                     Map<String, Double> groupedCategoricalPredictorMap =
@@ -273,7 +273,7 @@ public class KiePMMLRegressionTableFactory {
         return predictorTerms.stream()
                 .map(predictorTerm -> {
                     int arity = predictorsArity.addAndGet(1);
-                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName().getValue() :
+                    String variableName = predictorTerm.getName() != null ?predictorTerm.getName() :
                             "predictorTermFunction" + arity;
                     return new AbstractMap.SimpleEntry<>(variableName,
                                                          getPredictorTermSerializableFunction(predictorTerm));
@@ -292,7 +292,7 @@ public class KiePMMLRegressionTableFactory {
         return resultMap -> {
             final AtomicReference<Double> result = new AtomicReference<>(1.0);
             final List<String> fieldRefs = predictorTerm.getFieldRefs().stream()
-                    .map(fieldRef -> fieldRef.getField().getValue())
+                    .map(fieldRef ->fieldRef.getField())
                     .collect(Collectors.toList());
             for (Map.Entry<String, Object> entry : resultMap.entrySet()) {
                 if (fieldRefs.contains(entry.getKey())) {
@@ -440,7 +440,7 @@ public class KiePMMLRegressionTableFactory {
      */
     static Map<String, Expression> getNumericPredictorsExpressions(final List<NumericPredictor> numericPredictors) {
         return numericPredictors.stream()
-                .collect(Collectors.toMap(numericPredictor -> numericPredictor.getName().getValue(),
+                .collect(Collectors.toMap(numericPredictor ->numericPredictor.getField(),
                                           KiePMMLRegressionTableFactory::getNumericPredictorExpression));
     }
 
@@ -489,7 +489,7 @@ public class KiePMMLRegressionTableFactory {
      */
     static Map<String, Expression> getCategoricalPredictorsExpressions(final List<CategoricalPredictor> categoricalPredictors, final BlockStmt body, final String variableName) {
         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor ->categoricalPredictor.getField()));
         final String categoricalPredictorMapNameBase = getSanitizedVariableName(String.format("%sMap", variableName));
         final AtomicInteger counter = new AtomicInteger();
         return groupedCollectors.entrySet().stream()
@@ -578,7 +578,7 @@ public class KiePMMLRegressionTableFactory {
         return predictorTerms.stream()
                 .map(predictorTerm -> {
                     int arity = predictorsArity.addAndGet(1);
-                    String variableName = predictorTerm.getName() != null ? predictorTerm.getName().getValue() :
+                    String variableName = predictorTerm.getName() != null ?predictorTerm.getName() :
                             "predictorTermFunction" + arity;
                     return new AbstractMap.SimpleEntry<>(variableName,
                                                          getPredictorTermFunction(predictorTerm));
@@ -627,7 +627,7 @@ public class KiePMMLRegressionTableFactory {
                     .orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_VARIABLE_IN_BODY,
                                                                                   "fieldRefs", body)));
             final List<Expression> nodeList = predictorTerm.getFieldRefs().stream()
-                    .map(fieldRef -> new StringLiteralExpr(fieldRef.getField().getValue()))
+                    .map(fieldRef -> new StringLiteralExpr(fieldRef.getField()))
                     .collect(Collectors.toList());
             NodeList<Expression> expressions = NodeList.nodeList(nodeList);
             MethodCallExpr methodCallExpr = new MethodCallExpr(new NameExpr("Arrays"), "asList", expressions);
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java
index 3e609be3e3..58707e6f2f 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/AbstractKiePMMLRegressionTableRegressionFactoryTest.java
@@ -64,8 +64,7 @@ public abstract class AbstractKiePMMLRegressionTableRegressionFactoryTest {
             IntStream.range(0, 2).forEach(j -> categoricalPredictors.add(getCategoricalPredictor("CatPred-" + i, 27.12, 3.46)));
             numericPredictors.add(getNumericPredictor("NumPred-" + i, 2, 13.11));
             predictorTerms.add(getPredictorTerm("PredTerm-" + i, 32.29,
-                                                Arrays.asList(categoricalPredictors.get(0).getName().getValue(),
-                                                              numericPredictors.get(0).getName().getValue())));
+                                                Arrays.asList(categoricalPredictors.get(0).getField(),numericPredictors.get(0).getField())));
         });
         return PMMLModelTestUtils.getRegressionTable(categoricalPredictors, numericPredictors, predictorTerms, intercept, targetCategory);
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java
index 20c679fb09..f49fff8e01 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLClassificationTableFactoryTest.java
@@ -28,7 +28,6 @@ import com.github.javaparser.ast.expr.Expression;
 import com.github.javaparser.ast.expr.MethodReferenceExpr;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningSchema;
 import org.dmg.pmml.OpType;
@@ -88,7 +87,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -129,7 +128,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
         boolean isBinary = regressionModel.getRegressionTables().size() == 2;
         assertThat(retrieved.isBinary()).isEqualTo(isBinary);
         assertThat(retrieved.isBinary()).isEqualTo(isBinary);
-        assertThat(retrieved.getTargetField()).isEqualTo(targetMiningField.getName().getValue());
+        assertThat(retrieved.getTargetField()).isEqualTo(targetMiningField.getName());
     }
 
     @Test
@@ -142,7 +141,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -193,7 +192,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -279,7 +278,7 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -371,10 +370,10 @@ public class KiePMMLClassificationTableFactoryTest extends AbstractKiePMMLRegres
 
     private OutputField getOutputField(String name, ResultFeature resultFeature, String targetField) {
         OutputField toReturn = new OutputField();
-        toReturn.setName(FieldName.create(name));
+        toReturn.setName(name);
         toReturn.setResultFeature(resultFeature);
         if (targetField != null) {
-            toReturn.setTargetField(FieldName.create(targetField));
+            toReturn.setTargetField(targetField);
         }
         return toReturn;
     }
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java
index c5ef91a5eb..2bd3a8a9dc 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java
@@ -164,7 +164,7 @@ public class KiePMMLRegressionModelFactoryTest {
         assertThat(retrieved).isNotNull();
         assertThat(retrieved.getName()).isEqualTo(regressionModel.getModelName());
         assertThat(retrieved.getMiningFunction()).isEqualTo(MINING_FUNCTION.byName(regressionModel.getMiningFunction().value()));
-        assertThat(retrieved.getTargetField()).isEqualTo(miningFields.get(0).getName().getValue());
+        assertThat(retrieved.getTargetField()).isEqualTo(miningFields.get(0).getName());
         final AbstractKiePMMLTable regressionTable = retrieved.getRegressionTable();
         assertThat(regressionTable).isNotNull();
         assertThat(regressionTable).isInstanceOf(KiePMMLClassificationTable.class);
@@ -225,7 +225,7 @@ public class KiePMMLRegressionModelFactoryTest {
         Map<Integer, Expression> superInvocationExpressionsMap = new HashMap<>();
         superInvocationExpressionsMap.put(0, new NameExpr(String.format("\"%s\"", regressionModel.getModelName())));
         Map<String, Expression> assignExpressionMap = new HashMap<>();
-        assignExpressionMap.put("targetField", new StringLiteralExpr(targetMiningField.getName().getValue()));
+        assignExpressionMap.put("targetField", new StringLiteralExpr(targetMiningField.getName()));
         assignExpressionMap.put("miningFunction",
                 new NameExpr(miningFunction.getClass().getName() + "." + miningFunction.name()));
         assignExpressionMap.put("pmmlMODEL",
@@ -258,17 +258,17 @@ public class KiePMMLRegressionModelFactoryTest {
         final Map<String, SerializableFunction<Double, Double>> numericFunctionMap =
                 regressionTable.getNumericFunctionMap();
         for (NumericPredictor numericPredictor : originalRegressionTable.getNumericPredictors()) {
-            assertThat(numericFunctionMap).containsKey(numericPredictor.getName().getValue());
+            assertThat(numericFunctionMap).containsKey(numericPredictor.getField());
         }
         final Map<String, SerializableFunction<String, Double>> categoricalFunctionMap =
                 regressionTable.getCategoricalFunctionMap();
         for (CategoricalPredictor categoricalPredictor : originalRegressionTable.getCategoricalPredictors()) {
-        	assertThat(categoricalFunctionMap).containsKey(categoricalPredictor.getName().getValue());
+        	assertThat(categoricalFunctionMap).containsKey(categoricalPredictor.getField());
         }
         final Map<String, SerializableFunction<Map<String, Object>, Double>> predictorTermsFunctionMap =
                 regressionTable.getPredictorTermsFunctionMap();
         for (PredictorTerm predictorTerm : originalRegressionTable.getPredictorTerms()) {
-        	assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName().getValue());
+        	assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName());
         }
     }
 }
\ No newline at end of file
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java
index ba88fb6bd1..2ef89a689d 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableFactoryTest.java
@@ -41,7 +41,6 @@ import com.github.javaparser.ast.stmt.ExpressionStmt;
 import org.assertj.core.data.Offset;
 import org.dmg.pmml.DataDictionary;
 import org.dmg.pmml.DataField;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.MiningField;
 import org.dmg.pmml.MiningSchema;
 import org.dmg.pmml.OpType;
@@ -111,7 +110,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -154,7 +153,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -192,7 +191,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -231,7 +230,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -316,7 +315,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         Map<String, SerializableFunction<String, Double>> retrieved =
                 KiePMMLRegressionTableFactory.getCategoricalPredictorsMap(categoricalPredictors);
         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor ->categoricalPredictor.getField()));
         assertThat(retrieved).hasSameSizeAs(groupedCollectors);
         groupedCollectors.keySet().forEach(predictName -> assertThat(retrieved).containsKey(predictName));
     }
@@ -355,7 +354,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         assertThat(retrieved).hasSameSizeAs(predictorTerms);
         IntStream.range(0, predictorTerms.size()).forEach(index -> {
             PredictorTerm predictorTerm = predictorTerms.get(index);
-            assertThat(retrieved).containsKey(predictorTerm.getName().getValue());
+            assertThat(retrieved).containsKey(predictorTerm.getName());
         });
     }
 
@@ -392,7 +391,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         regressionModel.setModelName(getGeneratedClassName("RegressionModel"));
         String targetField = "targetField";
         DataField dataField = new DataField();
-        dataField.setName(FieldName.create(targetField));
+        dataField.setName(targetField);
         dataField.setOpType(OpType.CATEGORICAL);
         DataDictionary dataDictionary = new DataDictionary();
         dataDictionary.addDataFields(dataField);
@@ -531,7 +530,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
                         "variableName");
         assertThat(retrieved).hasSize(3);
         final Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor ->categoricalPredictor.getField()));
 
         groupedCollectors.values().forEach(categoricalPredictors12 -> commonEvaluateCategoryPredictors(body,
                 categoricalPredictors12, "variableName"));
@@ -586,7 +585,7 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
         assertThat(retrieved).hasSameSizeAs(predictorTerms);
         IntStream.range(0, predictorTerms.size()).forEach(index -> {
             PredictorTerm predictorTerm = predictorTerms.get(index);
-            assertThat(retrieved).containsKey(predictorTerm.getName().getValue());
+            assertThat(retrieved).containsKey(predictorTerm.getName());
         });
     }
 
@@ -607,17 +606,17 @@ public class KiePMMLRegressionTableFactoryTest extends AbstractKiePMMLRegression
     private void commonEvaluateRegressionTable(KiePMMLRegressionTable retrieved, RegressionTable source) {
         Map<String, SerializableFunction<Double, Double>> numericFunctionMap = retrieved.getNumericFunctionMap();
         assertThat(numericFunctionMap).hasSameSizeAs(source.getNumericPredictors());
-        source.getNumericPredictors().forEach(numericPredictor -> assertThat(numericFunctionMap).containsKey(numericPredictor.getName().getValue()));
+        source.getNumericPredictors().forEach(numericPredictor -> assertThat(numericFunctionMap).containsKey(numericPredictor.getField()));
         Map<String, SerializableFunction<String, Double>> categoricalFunctionMap =
                 retrieved.getCategoricalFunctionMap();
         Map<String, List<CategoricalPredictor>> groupedCollectors = categoricalPredictors.stream()
-                .collect(groupingBy(categoricalPredictor -> categoricalPredictor.getField().getValue()));
+                .collect(groupingBy(categoricalPredictor ->categoricalPredictor.getField()));
         assertThat(categoricalFunctionMap).hasSameSizeAs(groupedCollectors);
         groupedCollectors.keySet().forEach(categorical -> assertThat(categoricalFunctionMap).containsKey(categorical));
         Map<String, SerializableFunction<Map<String, Object>, Double>> predictorTermsFunctionMap =
                 retrieved.getPredictorTermsFunctionMap();
         assertThat(predictorTermsFunctionMap).hasSameSizeAs(source.getPredictorTerms());
-        source.getPredictorTerms().forEach(predictorTerm -> assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName().getValue()));
+        source.getPredictorTerms().forEach(predictorTerm -> assertThat(predictorTermsFunctionMap).containsKey(predictorTerm.getName()));
     }
 
     private void commonEvaluateCategoryPredictors(final BlockStmt toVerify,
diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java
index f39bd5ffe9..e9f3daa345 100644
--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java
+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-scorecard/kie-pmml-models-scorecard-compiler/src/test/java/org/kie/pmml/models/scorecard/compiler/factories/KiePMMLComplexPartialScoreFactoryTest.java
@@ -24,7 +24,6 @@ import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.Statement;
 import org.dmg.pmml.Apply;
 import org.dmg.pmml.Constant;
-import org.dmg.pmml.FieldName;
 import org.dmg.pmml.FieldRef;
 import org.dmg.pmml.scorecard.ComplexPartialScore;
 import org.junit.jupiter.api.Test;
@@ -69,14 +68,14 @@ public class KiePMMLComplexPartialScoreFactoryTest {
     void getComplexPartialScoreVariableDeclarationWithFieldRef() throws IOException {
         final String variableName = "variableName";
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         ComplexPartialScore complexPartialScore = new ComplexPartialScore();
         complexPartialScore.setExpression(fieldRef);
         BlockStmt retrieved =
                 KiePMMLComplexPartialScoreFactory.getComplexPartialScoreVariableDeclaration(variableName,
                         complexPartialScore);
         String text = getFileContent(TEST_02_SOURCE);
-        Statement expected = JavaParserUtils.parseBlock(String.format(text, fieldRef.getField().getValue(),
+        Statement expected = JavaParserUtils.parseBlock(String.format(text,fieldRef.getField(),
                 variableName));
         assertThat(retrieved).isEqualTo(expected);
         List<Class<?>> imports = Arrays.asList(KiePMMLFieldRef.class,
@@ -91,7 +90,7 @@ public class KiePMMLComplexPartialScoreFactoryTest {
         Constant constant = new Constant();
         constant.setValue(value1);
         FieldRef fieldRef = new FieldRef();
-        fieldRef.setField(FieldName.create("FIELD_REF"));
+        fieldRef.setField("FIELD_REF");
         Apply apply = new Apply();
         apply.setFunction("/");
         apply.addExpressions(constant, fieldRef);
@@ -102,8 +101,7 @@ public class KiePMMLComplexPartialScoreFactoryTest {
                         complexPartialScore);
         String text = getFileContent(TEST_03_SOURCE);
         Statement expected = JavaParserUtils.parseBlock(String.format(text,
-                constant.getValue(),
-                fieldRef.getField().getValue(),
+                constant.getValue(),fieldRef.getField(),
                 apply.getFunction(),
                 apply.getInvalidValueTreatment().value(),
                 variableName));
diff --git a/kie-test-util/src/main/java/org/kie/test/util/db/PersistenceUtil.java b/kie-test-util/src/main/java/org/kie/test/util/db/PersistenceUtil.java
index ed1536f056..b939672ad0 100644
--- a/kie-test-util/src/main/java/org/kie/test/util/db/PersistenceUtil.java
+++ b/kie-test-util/src/main/java/org/kie/test/util/db/PersistenceUtil.java
@@ -22,8 +22,8 @@ import java.util.HashMap;
 import java.util.Map;
 import java.util.Properties;
 
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 
 import org.h2.tools.DeleteDbFiles;
 import org.h2.tools.Server;
diff --git a/kie-test-util/src/main/java/org/kie/test/util/db/internal/PoolingDataSourceFactory.java b/kie-test-util/src/main/java/org/kie/test/util/db/internal/PoolingDataSourceFactory.java
index eee5f49aed..26d202d2f7 100644
--- a/kie-test-util/src/main/java/org/kie/test/util/db/internal/PoolingDataSourceFactory.java
+++ b/kie-test-util/src/main/java/org/kie/test/util/db/internal/PoolingDataSourceFactory.java
@@ -26,9 +26,9 @@ import javax.sql.ConnectionEventListener;
 import javax.sql.DataSource;
 import javax.sql.XAConnection;
 import javax.sql.XADataSource;
-import javax.transaction.TransactionManager;
-import javax.transaction.TransactionSynchronizationRegistry;
-import javax.transaction.xa.XAResource;
+import jakarta.transaction.TransactionManager;
+import jakarta.transaction.TransactionSynchronizationRegistry;
+import jakarta.transaction.xa.XAResource;
 
 import com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule;
 import com.arjuna.ats.jta.recovery.XAResourceRecoveryHelper;
diff --git a/kie-test-util/src/main/java/org/kie/test/util/db/internal/PoolingDataSourceWrapperImpl.java b/kie-test-util/src/main/java/org/kie/test/util/db/internal/PoolingDataSourceWrapperImpl.java
index 1a396881d8..3e2b39fd96 100755
--- a/kie-test-util/src/main/java/org/kie/test/util/db/internal/PoolingDataSourceWrapperImpl.java
+++ b/kie-test-util/src/main/java/org/kie/test/util/db/internal/PoolingDataSourceWrapperImpl.java
@@ -27,8 +27,8 @@ import java.util.logging.Logger;
 import javax.naming.InitialContext;
 import javax.naming.NamingException;
 import javax.sql.XADataSource;
-import javax.transaction.TransactionManager;
-import javax.transaction.TransactionSynchronizationRegistry;
+import jakarta.transaction.TransactionManager;
+import jakarta.transaction.TransactionSynchronizationRegistry;
 
 import com.arjuna.ats.jta.common.jtaPropertyManager;
 import org.apache.tomcat.dbcp.dbcp2.managed.BasicManagedDataSource;
