TestCase "Not Node assert/retract test case"

import org.drools.core.test.model.Person;

Setup
    ObjectTypeNode:
        otnLeft1, Person;
    LeftInputAdapterNode:
        lian1, otnLeft1;
    ObjectTypeNode:
        otnRight1, Person;
    ObjectTypeNode:
        otnRight2, Person;
    Binding:
         p1, 0, Person, age;
    NotNode:
        not1, lian1, otnRight1;
        age, !=, p1;
    JoinNode:
        join2, not1, otnRight2;
        age, !=, p1;
    Facts:
        new Person('darth', 35), new Person('bobba', 35),
        new Person('yoda', 35), new Person('luke', 35),
        new Person('dave', 35), new Person('bob', 36),
        new Person('obi', 36), new Person('han', 37);

Test "assert retract test"
    /**
     * check single left assertion and retraction
     */
    assert:
        otnLeft1, [h0];
    not1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0]];
    retract:
        otnLeft1, [h0];
    not1:
        leftMemory, [];
    join2:
        leftMemory, [];

    /**
     * check single right assertion and retraction
     */
    assert:
        otnRight1, [h1];
    not1:
        rightMemory, [h1];
    join2:
        leftMemory, [];
    retract:
        otnRight1, [h1];
    not1:
        rightMemory, [];

    /**
     *  check single left then right assertion, where age == age (does not match not)
     */
    assert:
        otnLeft1, [h0];
    not1:
        leftMemory, [[h0]];
        rightMemory, [];
    join2:
        leftMemory, [[h0]];
    assert:
        otnRight1, [h1];
    not1:
        leftMemory, [[h0]];
        rightMemory, [h1];
    join2:
        leftMemory, [[h0]];
    retract:
        otnRight1, [h1];
        otnRight1, [];
    join2:
        leftMemory, [[h0]];
    retract:
        otnLeft1, [h0];
    not1:
        leftMemory, [];
        rightMemory, [];
    join2:
        leftMemory, [];

    /**
     *  check single left then right assertion, where age != age (matches not)
     */
    assert:
        otnLeft1, [h0];
    not1:
        leftMemory, [[h0]];  // h0 is here, it'll disapear soon....
        rightMemory, [];
    join2:
        leftMemory, [[h0]];
    assert:
        otnRight1, [h5];
    not1:
        leftMemory, [];     // h0 disappears as h5 blocks it, and removes it from memory
        rightMemory, [h5];
    join2:
        leftMemory, [];
    retract:
        otnRight1, [h5];
    not1:
        leftMemory, [[h0]];     // h0 is put back in, as h5 no longer blocks
        rightMemory, [];
    join2:
        leftMemory, [[h0]];
    retract:
        otnLeft1, [h0];
    not1:
        leftMemory, [];
        rightMemory, [];
    join2:
        leftMemory, [];


    /**
     *  check single right then left assertion, where age != age (matches not)
     */
    assert:
        otnRight1, [h5];
    not1:
        leftMemory, [];
        rightMemory, [h5];
    join2:
        leftMemory, [];
    assert:
        otnLeft1, [h0];
    not1:
        leftMemory, []; // although it's inserted, you can't see it in the memory as h5 blocks it
        rightMemory, [h5];
    join2:
        leftMemory, [];
    retract:
        otnRight1, [h5];
    not1:
        leftMemory, [[h0]]; // h5 no longer blocks, so put back in
        rightMemory, [];
    join2:
        leftMemory, [[h0]];
    retract:
        otnLeft1, [h0];
    not1:
        leftMemory, [];
        rightMemory, [];
    join2:
        leftMemory, [];

    /**
     *  check single right then left assertion, where age == age (does not match not)
     */
    assert:
        otnRight1, [h1];
    not1:
        leftMemory, [];
        rightMemory, [h1];
    join2:
        leftMemory, [];
    assert:
        otnLeft1, [h0];
    not1:
        leftMemory, [[h0]];
        rightMemory, [h1];
    join2:
        leftMemory, [[h0]];
    retract:
        otnRight1, [h1];
    not1:
        leftMemory, [[h0]];
        rightMemory, [];
    join2:
        leftMemory, [[h0]];
    retract:
        otnLeft1, [h0];
    not1:
        leftMemory, [];
        rightMemory, [];
    join2:
        leftMemory, [];

    // here


    /**
     * assert two left and two right, with iterative retract and assert, age != age (not matches)
     */
    assert:
        otnLeft1, [h0, h1];
    not1:
        leftMemory, [[h0], [h1]];
        rightMemory, [];
    join2:
        leftMemory, [[h0], [h1]];
    assert:
        otnRight1, [h5];
    not1:
        leftMemory, [];            //h0 and h1 are blocked, by h5, so removed
        rightMemory, [h5];
    join2:
        leftMemory, [];
    assert:
        otnRight1, [h6];
    not1:
        leftMemory, [];            //h0 and h1 are still blocked
        rightMemory, [h5, h6];
    join2:
        leftMemory, [];
    retract:
        otnRight1, [h5];           // retract h5, the facts should still be blocked now by h6
    not1:
        leftMemory, [];            //h0 and h1 are still blocked
        rightMemory, [h6];
    join2:
        leftMemory, [];
    retract:
        otnRight1, [h6];          // now there are no blockers
    not1:
        leftMemory, [[h0], [h1]]; // both facts go back in
        rightMemory, [];
    join2:
        leftMemory, [[h0], [h1]];          // both facts propagate
