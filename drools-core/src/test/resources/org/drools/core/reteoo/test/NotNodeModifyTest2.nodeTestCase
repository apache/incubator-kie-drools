/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

TestCase "Not Node modify"

import org.drools.core.test.model.Cheese;
import org.drools.core.test.model.Person;

Setup
    NotNode:
        not, mock(Person), mock(Cheese);
    LeftTupleSink:
        sink, not;
    Facts:
        new Person('darth', 35, "brie"),  // h0
        new Person('bobba', 35, "stilton"),  // h1
        new Cheese('stilton', 10); // h2

/**        
 *  check single left, then right assertion, then modify right and still match
 */ 
Test "Not node modify right, still matches"    
    assert:
        not, [[h0]];
    not:
        leftMemory, [[h0]];
        rightMemory, [];
    sink:
        verify, assertLeft, count, 1;
    assert:
        not, [h2];
    not:
        leftMemory, [];
        rightMemory, [h2];
    sink:
        verify, assertLeft, count, 1;
        verify, retractLeft, count, 1;
    modify:
        not, [h2];
    not:
        leftMemory, [];
        rightMemory, [h2];
    sink:
        verify, assertLeft, count, 1;
        verify, retractLeft, count, 1;
        verify, modifyLeft, count, 0; // not node does not propagate a modify from the right

Test "not node test 1 left and modify"	     
    assert:
        not, [[h0]];
    not:
        leftMemory, [[h0]];
        rightMemory, [];
    sink:
        verify, assertLeft, count, 1;
        verify, assertLeft, tuple0, isTuple( [h0] );
        verify, modifyLeft, count, 0;
    modify:
        not, [[h0]];
    sink:
        verify, assertLeft, count, 1; // still 1
        verify, modifyLeft, count, 1; // modify was propagated
        verify, modifyLeft, tuple0, isTuple( [h0] );

