<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

    <title>Pricing Rule Decision Table Example</title>

    <para>The Pricing Rule decision table demonstrates the use of a 
    decision table in a spreadsheet, in Excel's XLS format, in calculating
    the retail cost of an insurance policy. The purpose of the provide set
    of rules is to calculate a base price and a discount for a
    car driver applying for a specific policy. The driver's age, history and
    the policy type all contribute to what the basic premium is, and an
    additional chunk of rules deals with refining this with a discount
    percentage.</para>

    <programlisting><emphasis role="bold">Name:</emphasis> Example Policy Pricing
<emphasis role="bold">Main class:</emphasis> org.drools.examples.decisiontable.PricingRuleDTExample
<emphasis role="bold">Module:</emphasis> drools-examples
<emphasis role="bold">Type:</emphasis> Java application
<emphasis role="bold">Rules file:</emphasis> ExamplePolicyPricing.xls
<emphasis role="bold">Objective:</emphasis> demonstrate spreadsheet-based decision tables.</programlisting>

    <section>
      <title>Executing the example</title>

      <para>Open the file <filename>PricingRuleDTExample.java</filename> and 
      execute it as a Java application. It should produce the following
      output in the Console window:</para>

      <programlisting>Cheapest possible
BASE PRICE IS: 120
DISCOUNT IS: 20     </programlisting>

      <para>The code to execute the example follows the usual pattern.
      The rules are loaded, the facts inserted and a Stateless Session is
      created. What is different is how the rules are added.</para>

      <programlisting language="java">DecisionTableConfiguration dtableconfiguration =
    KnowledgeBuilderFactory.newDecisionTableConfiguration();
        dtableconfiguration.setInputType( DecisionTableInputType.XLS );

        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();

        Resource xlsRes = ResourceFactory.newClassPathResource( "ExamplePolicyPricing.xls",
                                                                getClass() );
        kbuilder.add( xlsRes,
                      ResourceType.DTABLE,
                      dtableconfiguration );
</programlisting>

      <para>Note the use of the <code>DecisionTableConfiguration</code> object.
      Its input type is set to <code>DecisionTableInputType.XLS</code>.
      If you use the BRMS, all this is of course taken care of for you.</para>

      <para>There are two fact types used in this example, <code>Driver</code>
      and <code>Policy</code>. Both are used with their default values. The
      <code>Driver</code> is 30 years old, has had no prior claims and
      currently has a risk profile of <code>LOW</code>. The <code>Policy</code>
      being applied for is <code>COMPREHENSIVE</code>, and it has not yet been
      approved.</para>
    </section>
    
    <section>
      <title>The decision table</title>

      <para>In this decision table, each row is a rule, and each column is
      a condition or an action.</para>

      <figure>
        <title>Decision table configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata width="100%"
                     fileref="images/Chapter-Examples/PricingExample/DT_Config.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Referring to the spreadsheet show above, we have the
      <code>RuleSet</code> declaration, which provides the package name.
      There are also other optional items you can have here, such as
      <code>Variables</code> for global variables, and <code>Imports</code>
      for importing classes. In this case, the namespace of the rules is
      the same as the fact classes we are using, so we can omit it.</para>

      <para>Moving further down, we can see the <code>RuleTable</code>
      declaration. The name after this (Pricing bracket) is used as the
      prefix for all the generated rules. Below that, we have
      "CONDITION or ACTION", indicating the purpose of the column, i.e.,
      whether it forms part of the condition or the consequence of the rule
      that will be generated.</para>

      <para>You can see that there is a driver, his data spanned across three
      cells, which means that the template expressions below it apply to that
      fact. We observe the driver's age range (which uses <code>$1</code> and
      <code>$2</code> with comma-separated values), 
      <code>locationRiskProfile</code>, and <code>priorClaims</code> in the
      respective columns. In the action columns, we are set the policy
      base price and log a message.</para>

      <figure>
        <title>Base price calculation</title>

        <mediaobject>
          <imageobject>
            <imagedata width="100%"
                     fileref="images/Chapter-Examples/PricingExample/DT_Table1.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>In the preceding spreadsheet section, there are broad category
      brackets, indicated by the comment in the leftmost column. As we know
      the details of our drivers and their policies, we can tell (with a bit
      of thought) that they should match row number 18, as they have no
      prior accidents, and are 30 years old. This gives us a base price
      of 120.</para>

      <figure>
        <title>Discount calculation</title>

        <mediaobject>
          <imageobject>
            <imagedata width="100%"
                     fileref="images/Chapter-Examples/PricingExample/DT_Table2.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above section contains the conditions for the discount we
      might grant our driver. The discount results from the <code>Age</code>
      bracket, the number of prior claims, and the policy type. In our case,
      the driver is 30, with no prior claims, and is applying for a
      <code>COMPREHENSIVE</code> policy, which means we can give a discount
      of 20%. Note that this is actually a separate table, but in the same
      worksheet, so that different templates apply.</para>

      <para>It is important to note that decision tables generate rules.
      This means they aren't simply top-down logic, but more a means to
      capture data resulting in rules. This is a subtle difference that
      confuses some people. The evaluation of the rules is not necessarily
      in the given order, since all the normal mechanics of the rule engine
      still apply.</para>
    </section>
  </section>  
