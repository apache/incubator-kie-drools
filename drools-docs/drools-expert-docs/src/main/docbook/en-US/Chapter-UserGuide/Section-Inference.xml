<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Inference</title>

  <section>
    <title>Bus Pass Example</title>

    <para>Inference has a bad name these days, as something not relevant to
    business use cases and just too complicated to be useful. It is true that
    contrived and complicated examples occur with inference, but that should
    not detract from the fact that simple and useful ones exist too. But more
    than this, correct use of inference can support more agile and less error
    prone business rules, which are easier to maintain.</para>

    <para>So what is inference? Something is inferred when we gain knowledge
    of something from using previous knowledge. For example, given a Person
    fact with an age field and a rule that provides age policy control, we can
    infer whether a Person is an adult or a child and act on this.</para>

    <programlisting>rule "Infer Adult"
when
  $p : Person( age &gt;= 18 )
then
  insert( new IsAdult( $p ) )
end</programlisting>

    <para>due to the preceding rule, every Person who is 18 or over will have an
    instance of IsAdult inserted for them. This fact is special in that it is known
    as a relation. We can use this inferred relation in any rule:</para>

    <programlisting>$p : Person()
IsAdult( person == $p )</programlisting>

    <para>So now we know what inference is, and have a basic example, how does
    this facilitate good rule design and maintenance?</para>

    <para>Let's take a government department that are responsible for issuing
    ID cards when children become adults, henceforth referred to as ID
    department. They might have a decision table that includes logic like
    this, which says when an adult living in London is 18 or over, issue the
    card:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Quick_Start/monolithic.png"/>
      </imageobject>
    </mediaobject>

    <para>However the ID department does not set the policy on who an adult
    is. That's done at a central government level. If the central government
    were to change that age to 21, this would initiate a change management process.
    Someone would have to liaise with the ID department and make sure their systems
    are updated, in time for the law going live.</para>

    <para>This change management process and communication between departments
    is not ideal for an agile environment, and change becomes costly and error
    prone. Also the card department is managing more information than it needs
    to be aware of with its "monolithic" approach to rules management which is
    "leaking" information better placed elsewhere. By this I mean that it
    doesn't care what explicit "age &gt;= 18" information determines whether
    someone is an adult, only that they are an adult.</para>

    <para>In contrast to this, let's pursue an approach where we split (de-couple)
    the authoring responsibilities, so that both the central government and the ID
    department maintain their own rules.</para>

    <para>It's the central government's job to determine who is an adult.
    If they change the law they just update their central repository with the
    new rules, which others use:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Quick_Start/InferIsAdult.png"/>
      </imageobject>
    </mediaobject>

    <para>The IsAdult fact, as discussed previously, is inferred from the
    policy rules. It encapsulates the seemingly arbitrary piece of logic "age
    &gt;= 18" and provides semantic abstractions for its meaning. Now if
    anyone uses the above rules, they no longer need to be aware of explicit
    information that determines whether someone is an adult or not. They can
    just use the inferred fact:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Quick_Start/IssueIdCard.png"/>
      </imageobject>
    </mediaobject>

    <para>While the example is very minimal and trivial it illustrates some
    important points. We started with a monolithic and leaky approach to our
    knowledge engineering. We created a single decision table that had all
    possible information in it and that leaks information from central government
    that the ID department did not care about and did not want to
    manage.</para>

    <para>We first de-coupled the knowledge process so each department was
    responsible for only what it needed to know. We then encapsulated this
    leaky knowledge using an inferred fact IsAdult. The use of the term
    IsAdult also gave a semantic abstraction to the previously arbitrary logic
    "age &gt;= 18".</para>

    <para>So a general rule of thumb when doing your knowledge engineering
    is:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Bad</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Monolithic</para>
          </listitem>

          <listitem>
            <para>Leaky</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Good</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>De-couple knowledge responsibilities</para>
          </listitem>

          <listitem>
            <para>Encapsulate knowledge</para>
          </listitem>

          <listitem>
            <para>Provide semantic abstractions for those
            encapsulations</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
</section>
