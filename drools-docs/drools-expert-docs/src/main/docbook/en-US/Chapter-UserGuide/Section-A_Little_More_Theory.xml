<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Execution Control</title>

  <section>
    <title>Agenda</title>

    <para>The Agenda is a <emphasis>Rete</emphasis> feature. During actions on
    the <code>WorkingMemory</code>, rules may become fully matched and
    eligible for execution; a single Working Memory Action can result in
    multiple eligible rules. When a rule is fully matched an Activation is
    created, referencing the rule and the matched facts, and placed onto the
    Agenda. The Agenda controls the execution order of these Activations using
    a Conflict Resolution strategy.</para>

    <para>The engine cycles repeatedly through two phases:</para>

    <orderedlist>
      <listitem>
        <para>Working Memory Actions. This is where most of the work takes
        place, either in the Consequence (the RHS itself) or the main Java
        application process. Once the Consequence has finished or the main
        Java application process calls <code>fireAllRules()</code> the engine
        switches to the Agenda Evaluation phase.</para>
      </listitem>

      <listitem>
        <para>Agenda Evaluation. This attempts to select a rule to fire. If no
        rule is found it exits, otherwise it fires the found rule, switching
        the phase back to Working Memory Actions.</para>
      </listitem>
    </orderedlist>

    <figure>
      <title>Two Phase Execution</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Rule_Engine/Two_Phase.png"
                     format="PNG" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The process repeats until the agenda is clear, in which case control
    returns to the calling application. When Working Memory Actions are taking
    place, no rules are being fired.</para>

    <figure>
      <title>Agenda</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-User_Guide/Agenda.png" format=""/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Conflict Resolution</title>

      <para>Conflict resolution is required when there are multiple rules on
      the agenda. (The basics to this are covered in chapter "Quick Start".)
      As firing a rule may have side effects on the working memory, the rule
      engine needs to know in what order the rules should fire (for instance,
      firing ruleA may cause ruleB to be removed from the agenda).</para>

      <para>The default conflict resolution strategies employed by Drools are:
      Salience and LIFO (last in, first out).</para>

      <para>The most visible one is <emphasis>salience</emphasis> (or
      priority), in which case a user can specify that a certain rule has a
      higher priority (by giving it a higher number) than other rules. In that
      case, the rule with higher salience will be preferred. LIFO priorities
      are based on the assigned Working Memory Action counter value, with all
      rules created during the same action receiving the same value. The
      execution order of a set of firings with the same priority value is
      arbitrary.</para>

      <para>As a general rule, it is a good idea not to count on rules firing
      in any particular order, and to author the rules without worrying about
      a "flow". However when a flow is needed a number of possibilities exist,
      including but not limited to: agenda groups, rule flow groups,
      activation groups, control/semaphore facts. These are discussed in later
      sections.</para>

      <para>Drools 4.0 supported custom conflict resolution strategies; while
      this capability still exists in Drools it has not yet been exposed to
      the end user via knowledge-api in Drools 5.0.</para>
    </section>

    <section>
      <title>AgendaGroup</title>

      <figure>
        <title>AgendaGroup</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-User_Guide/AgendaGroup.png"
                       format=""/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Agenda groups are a way to partition rules (activations, actually)
      on the agenda. At any one time, only one group has "focus" which means
      that activations for rules in that group only will take effect. You can
      also have rules with "auto focus" which means that the focus is taken
      for its agenda group when that rule's conditions are true.</para>

      <para>Agenda groups are known as "modules" in CLIPS terminology. While
      it best to design rules that do not need control flow, this is not
      always possible. Agenda groups provide a handy way to create a "flow"
      between grouped rules. You can switch the group which has focus either
      from within the rule engine, or via the API. If your rules have a clear
      need for multiple "phases" or "sequences" of processing, consider using
      agenda-groups for this purpose.</para>

      <para>Each time <code>setFocus()</code> is called it pushes that Agenda
      Group onto a stack. When the focus group is empty it is popped from the
      stack and the focus group that is now on top evaluates. An Agenda Group
      can appear in multiple locations on the stack. The default Agenda Group
      is "MAIN", with all rules which do not specify an Agenda Group being in
      this group. It is also always the first group on the stack, given focus
      initially, by default.</para>

      <programlisting language="java">ksession.getAgenda().getAgendaGroup( "Group A" ).setFocus();</programlisting>
    </section>

    <section>
      <title>ActivationGroup</title>

      <figure>
        <title>ActivationGroup</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-User_Guide/ActivationGroup.png"
                       format=""/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>An activation group is a set of rules bound together by the same
      "activation-group" rule attribute. In this group only one rule can fire,
      and after that rule has fired all the other rules are cancelled from the
      agenda. The <code>clear()</code> method can be called at any time, which
      cancels all of the activations before one has had a chance to
      fire.</para>

      <programlisting language="java">ksession.getAgenda().getActivationGroup( "Group B" ).clear();</programlisting>
    </section>

    <section>
      <title>RuleFlowGroup</title>

      <figure>
        <title>RuleFlowGroup</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-User_Guide/RuleFlowGroup.png"
                       format=""/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A rule flow group is a group of rules associated by the
      "ruleflow-group" rule attribute. These rules can only fire when the
      group is activate. The group itself can only become active when the
      elaboration of the ruleflow diagram reaches the node representing the
      group. Here too, the <code>clear()</code> method can be called at any
      time to cancels all activations still remaining on the Agenda.</para>

      <programlisting language="java">ksession.getAgenda().getRuleFlowGroup( "Group C" ).clear();</programlisting>
    </section>
  </section>

  <section>
    <title>Methods versus Rules</title>

    <para>People often confuse methods and rules, and new rule users often
    ask, "How do I call a rule?" After the last section, you are now feeling
    like a rule expert and the answer to that is obvious, but let's summarize
    the differences nonetheless.</para>

    <programlisting language="java">public void helloWorld(Person person) {
    if ( person.getName().equals( "Chuck" ) ) {
        System.out.println( "Hello Chuck" );
    }
}</programlisting>

    <itemizedlist>
      <listitem>
        <para>Methods are called directly.</para>
      </listitem>

      <listitem>
        <para>Specific instances are passed.</para>
      </listitem>

      <listitem>
        <para>One call results in a single execution.</para>
      </listitem>
    </itemizedlist>

    <programlisting>rule "Hello World"
    when
        Person( name == "Chuck" )
    then
        System.out.println( "Hello Chuck" );
        end</programlisting>

    <itemizedlist>
      <listitem>
        <para>Rules execute by matching against any data as long it is
        inserted into the engine.</para>
      </listitem>

      <listitem>
        <para>Rules can never be called directly.</para>
      </listitem>

      <listitem>
        <para>Specific instances cannot be passed to a rule.</para>
      </listitem>

      <listitem>
        <para>Depending on the matches, a rule may fire once or several times,
        or not at all.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Cross Products</title>

    <para>Earlier the term "cross product" was mentioned, which is the result
    of a join. Imagine for a moment that the data from the fire alarm example
    were used in combination with the following rule where there ar no field
    constraints:</para>

    <programlisting>rule
when
    $room : Room()
    $sprinkler : Sprinkler()
then
    System.out.println( "room:" + $room.getName() +
                        " sprinkler:" + $sprinkler.getRoom().getName() );
end</programlisting>

    <para>In SQL terms this would be like doing <code>select * from Room,
    Sprinkler</code> and every row in the Room table would be joined with
    every row in the Sprinkler table resulting in the following output:</para>

    <programlisting>room:office sprinkler:office
room:office sprinkler:kitchen
room:office sprinkler:livingroom
room:office sprinkler:bedroom
room:kitchen sprinkler:office
room:kitchen sprinkler:kitchen
room:kitchen sprinkler:livingroom
room:kitchen sprinkler:bedroom
room:livingroom sprinkler:office
room:livingroom sprinkler:kitchen
room:livingroom sprinkler:livingroom
room:livingroom sprinkler:bedroom
room:bedroom sprinkler:office
room:bedroom sprinkler:kitchen
room:bedroom sprinkler:livingroom
room:bedroom sprinkler:bedroom</programlisting>

    <para>These cross products can obviously become huge, and they may very
    well contain spurious data. The size of cross products is often the source
    of performance problems for new rule authors. From this it can be seen
    that it's always desirable to constrain the cross products, which is done
    with the variable constraint.</para>

    <programlisting>rule
when
    $room : Room()
    $sprinkler : Sprinkler( room == $room )
then
    System.out.println( "room:" + $room.getName() +
                        " sprinkler:" + $sprinkler.getRoom().getName() );
end</programlisting>

    <para>This results in just four rows of data, with the correct Sprinkler
    for each Room. In SQL (actually HQL) the corresponding query would be
    <code>select * from Room, Sprinkler where Room ==
    Sprinkler.room</code>.</para>

    <programlisting>room:office sprinkler:office
room:kitchen sprinkler:kitchen
room:livingroom sprinkler:livingroom
room:bedroom sprinkler:bedroom</programlisting>
  </section>

  <section>
    <title>Activations, Agenda and Conflict Sets.</title>

    <para>So far the data and the matching process has been simple and small.
    To mix things up a bit a new example will be explored that handles
    cashflow calculations over date periods. The state of the engine will be
    illustratively shown at key stages to help get a better understanding of
    what is actually going on under the hood. Three classes will be used, as
    shown below.</para>

    <programlisting language="java">public class CashFlow {
    private Date   date;
    private double amount;
    private int    type;
    long           accountNo;
    // getter and setter methods here
}

public class Account {
    private long   accountNo;
    private double balance;
    // getter and setter methods here
}

public AccountPeriod {
    private Date start;
    private Date end;
    // getter and setter methods here
}</programlisting>

    <para>By now you already know how to create Knowledge Bases and how to
    instantiate facts to populate the <code>StatefulKnowledgeSession</code>,
    so tables will be used to show the state of the inserted data, as it makes
    things clearer for illustration purposes. The tables below show that a
    single fact was inserted for the <code>Account</code>. Also inserted are a
    series of debits and credits as <code>CashFlow</code> objects for that
    account, extending over two quarters.</para>

    <figure>
      <title>CashFlows and Account</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_Start/tables1.png"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Two rules can be used to determine the debit and credit for that
    quarter and update the Account balance. The two rules below constrain the
    cashflows for an account for a given time period. Notice the "&amp;&amp;"
    which use short cut syntax to avoid repeating the field name twice.</para>

    <informaltable frame="void">
      <tbody>
        <tr>
          <td align="left" valign="top"><programlisting>rule "increase balance for credits"
when
  ap : AccountPeriod()
  acc : Account( $accountNo : accountNo )
  CashFlow( type == CREDIT,
            accountNo == $accountNo,
            date &gt;= ap.start &amp;&amp; &lt;= ap.end,
            $amount : amount )
then
  acc.balance  += $amount;
end</programlisting></td>

          <td align="left" valign="top"><programlisting>rule "decrease balance for debits" 
when 
  ap : AccountPeriod() 
  acc : Account( $accountNo : accountNo ) 
  CashFlow( type == DEBIT, 
            accountNo == $accountNo,
            date &gt;= ap.start &amp;&amp; &lt;= ap.end, 
            $amount : amount ) 
then 
  acc.balance -= $amount; 
end</programlisting></td>
        </tr>
      </tbody>
    </informaltable>

    <para>If the <code>AccountPeriod</code> is set to the first quarter we
    constrain the rule "increase balance for credits" to fire on two rows of
    data and "decrease balance for debits" to act on one row of data.</para>

    <figure>
      <title>AccountingPeriod, CashFlows and Account</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_Start/tables2.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The two cashflow tables above represent the matched data for the two
    rules. The data is matched during the insertion stage and, as you
    discovered in the previous chapter, does not fire straight away, but only
    after <code>fireAllRules()</code> is called. Meanwhile, the rule plus its
    matched data is placed on the Agenda and referred to as an Activation. The
    Agenda is a table of Activations that are able to fire and have their
    consequences executed, as soon as fireAllRules() is called. Activations on
    the Agenda are executed in turn. Notice that the order of execution so far
    is considered arbitrary.</para>

    <figure>
      <title>CashFlows and Account</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_Start/tables7.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>After all of the above activations are fired, the account has a
    balance of -25.</para>

    <figure>
      <title>CashFlows and Account</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_Start/tables3.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>If the <code>AccountPeriod</code> is updated to the second quarter,
    we have just a single matched row of data, and thus just a single
    Activation on the Agenda.</para>

    <figure>
      <title>CashFlows and Account</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_Start/tables4.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The firing of that Activation results in a balance of 25.</para>

    <figure>
      <title>CashFlows and Account</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_Start/tables5.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>What if you don't want the order of Activation execution to be
    arbitrary? When there is one or more Activations on the Agenda they are
    said to be in conflict, and a conflict resolver strategy is used to
    determine the order of execution. At the simplest level the default
    strategy uses salience to determine rule priority. Each rule has a default
    value of 0, the higher the value the higher the priority. To illustrate
    this we add a rule to print the account balance, where we want this rule
    to be executed after all the debits and credits have been applied for all
    accounts. We achieve this by assigning a negative salience to this rule so
    that it fires after all rules with the default salience 0.</para>

    <table border="0">
      <tbody>
        <tr>
          <td>
            <programlisting>rule "Print balance for AccountPeriod"
        salience -50
    when
        ap : AccountPeriod()
        acc : Account()        
    then
        System.out.println( acc.accountNo + " : " + acc.balance );    
end</programlisting>
          </td>
        </tr>
      </tbody>
    </table>

    <para>The table below depicts the resulting Agenda. The three debit and
    credit rules are shown to be in arbitrary order, while the print rule is
    ranked last, to execute afterwards.</para>

    <figure>
      <title>CashFlows and Account</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Quick_Start/tables6.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Earlier we showed how rules would equate to SQL, which can often
    help people with an SQL background to understand rules. The two rules
    above can be represented with two views and a trigger for each view, as
    below:</para>

    <table border="0">
      <tbody>
        <tr>
          <td align="left" valign="top">
            <programlisting>select * from Account acc,
              Cashflow cf,
              AccountPeriod ap      
where acc.accountNo == cf.accountNo and 
      cf.type == CREDIT and
      cf.date &gt;= ap.start and 
      cf.date &lt;= ap.end</programlisting>
          </td>

          <td align="left" valign="top">
            <programlisting>select * from Account acc, 
              Cashflow cf,
              AccountPeriod ap 
where acc.accountNo == cf.accountNo and 
      cf.type == DEBIT and
      cf.date &gt;= ap.start and 
      cf.date &lt;= ap.end</programlisting>
          </td>
        </tr>

        <tr>
          <td align="left" valign="top">
            <programlisting>trigger : acc.balance += cf.amount</programlisting>
          </td>

          <td align="left" valign="top">
            <programlisting>trigger : acc.balance -= cf.amount</programlisting>
          </td>
        </tr>
      </tbody>
    </table>

    <para>Drools also features ruleflow-group attributes which allows workflow
    diagrams to declaratively specify when rules are allowed to fire. The
    screenshot below is taken from Eclipse using the Drools plugin. It has two
    ruleflow-group nodes which ensures that the calculation rules are executed
    before the reporting rules.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Quick_Start/ruleflow.png"/>
      </imageobject>
    </mediaobject>

    <para>The use of the ruleflow-group attribute in a rule is shown
    below.</para>

    <table border="0">
      <tbody>
        <tr>
          <td align="left" valign="top">
            <programlisting>rule "increase balance for credits"
  ruleflow-group "calculation"
when
  ap : AccountPeriod()
  acc : Account( $accountNo : accountNo )
  CashFlow( type == CREDIT,
            accountNo == $accountNo,
            date &gt;= ap.start &amp;&amp; &lt;= ap.end,
            $amount : amount )
then
  acc.balance  += $amount;
end</programlisting>
          </td>

          <td align="left" valign="top">
            <programlisting>rule "Print balance for AccountPeriod"
  ruleflow-group "report"
when
  ap : AccountPeriod()
  acc : Account()
then
  System.out.println( acc.accountNo +
                      " : " + acc.balance );    
end</programlisting>
          </td>
        </tr>
      </tbody>
    </table>
  </section>

  <section>
    <title>Inference</title>

    <para>Inference has a bad names these days, as something not relevant to
    business use cases and just too complicated to be useful. It is true that
    contrived and complicated examples occur with inference, but that should
    not detract from the fact that simple and useful ones exist too. But more
    than this, correct use of inference can crate more agile and less error
    prone businesses with easier to maintain software.</para>

    <para>So what is inference? Something is inferred when we gain knowledge
    of something from using previous knowledge. For example given a Person
    fact with an age field and a rule that provides age policy control, we can
    infer whether a Person is an adult or a child and act on this.</para>

    <programlisting>rule "Infer Adult"
when
  $p : Person( age &gt;= 18 )
then
  insert( new IsAdult( $p ) )
end</programlisting>

    <para>So in the above every Person who is 18 or over will have an instance
    of IsAdult inserted for them. This fact is special in that it is known as
    a relation. We can use this inferred relation in any rule:</para>

    <programlisting>$p : Person()
IsAdult( person == $p )</programlisting>

    <para>So now we know what inference is, and have a basic example, how does
    this facilitate good rule design and maintenance?</para>

    <para>Let's take a government department that are responsible for issuing
    ID cards when children become adults, hence forth referred to as ID
    department. They might have a decision table that includes logic like
    this, which says when an adult living in london is 18 or over, issue the
    card:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Quick_Start/monolithic.png"/>
      </imageobject>
    </mediaobject>

    <para>However the ID department does not set the policy on who an adult
    is. That's done at a central government level. If the central government
    where to change that age to 21 there is a change management process.
    Someone has to liaise with the ID department and make sure their systems
    are updated, in time for the law going live.</para>

    <para>This change management process and communication between departments
    is not ideal for an agile environment and change become costly and error
    prone. Also the card department is managing more information than it needs
    to be aware of with its "monolithic" approach to rules management which is
    "leaking" information better placed else where. By this I mean that it
    doesn't care what explicit "age &gt;= 18" information determines whether
    someone is an adult, only that they are an adult.</para>

    <para>Instead what if we were to split (de-couple) the authoring
    responsibility, so the central government maintains its rules and the ID
    department maintains its.</para>

    <para>So its the central governments job to determine who is an adult and
    if they change the law they just update their central repository with the
    new rules, which others use:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Quick_Start/InferIsAdult.png"/>
      </imageobject>
    </mediaobject>

    <para>The IsAdult fact, as discussed previously, is inferred from the
    policy rules. It encapsulates the seemingly arbitrary piece of logic "age
    &gt;= 18" and provides semantic abstractions for it's meaning. Now if
    anyone uses the above rules, they no longer need to be aware of explicit
    information that determines whether someone is an adult or not. They can
    just use the inferred fact:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Quick_Start/IssueIdCard.png"/>
      </imageobject>
    </mediaobject>

    <para>While the example is very minimal and trivial it illustrates some
    important points. We started with a monolithic and leaky approach to our
    knowledge engineering. We create a single decision table that had all
    possible information in it that leaks information from central government
    that the ID department did not care about and did not want to
    manage.</para>

    <para>We first de-coupled the knowledge process so each department was
    responsible for only what it needed to know. We then encapsulated this
    leaky knowledge using an inferred fact IsAdult. The use of the term
    IsAdult also gave a semantic abstraction to the previously arbitrary logic
    "age &gt;= 18".</para>

    <para>So a general rule or thumb when doing your knowledge engineering
    is:</para>

    <para/>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Bad</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Monolithic</para>
          </listitem>

          <listitem>
            <para>Leaky</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Good</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>De-couple knowledge responsibilities</para>
          </listitem>

          <listitem>
            <para>Encapsulate knowledge</para>
          </listitem>

          <listitem>
            <para>Provide semantic abstractions for those
            encapsulations</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Inference and TruthMaintenance</title>

    <para>The previous example was issuing ID cards to over 18s, in this
    example we now issue bus passes, either a child or adult pass.</para>

    <programlisting>rule "Issue Child Bus Pass" when
  $p : Person( age &lt; 16 )
then
  insert(new ChildBusPass( $p ) );
end
 
rule "Issue Adult Bus Pass" when
  $p : Person( age &gt;= 16 )
then
  insert(new AdultBusPass( $p ) );
end</programlisting>

    <para>As before the above example is considered monolithic, leaky and
    providing poor separation of concerns.</para>

    <para>As before we can provide a more robust application with a separation
    of concerns using inference. Notice this time we don't just insert the
    inferred object, we use "insertLogical":</para>

    <programlisting>rule "Infer Child" when
  $p : Person( age &lt; 16 )
then
    insertLogical( new IsChild( $p ) )
end
rule "Infer Adult" when
    $p : Person( age &gt;= 16 )
then
    insertLogical( new IsAdult( $p ) )
end</programlisting>

    <para>A "insertLogical" is part of the Drools Truth Maintenance System
    (TMS). Here the fact is logically inserted, this fact is dependant on the
    truth of the "when" clause. It means that when the rule becomes false the
    fact is automatically retracted. This works particularly well as the two
    rules are mutually exclusive. So in the above rules if the person is under
    16 it inserts an IsChild fact, once the person is 16 or over the IsChild
    fact is automatically retracted and the IsAdult fact inserted.</para>

    <para>We can now bring back in the code to issue the passes, these two can
    also be logically inserted, as the TMS supports chaining of logical
    insertions for a cascading set of retracts.</para>

    <programlisting>rule "Issue Child Bus Pass" when
    $p : Person( )
    IsChild( person == $p )
then
    insertLogical(new ChildBusPass( $p ) );
end
 
rule "Issue Adult Bus Pass" when
    $p : Person( age &gt;= 16 )
    IsAdult( person =$p )
then
    insertLogical(new AdultBusPass( $p ) );
end</programlisting>

    <para>Now when the person changes from being 15 to 16, not only is the
    IsChild fact automatically retracted, so is the person's ChildBusPass
    fact. For bonus points we can combine this with the 'not' conditional
    element to handle notifications, in this situation a request for the
    returning of the pass. So when the TMS automatically retracts the
    ChildBusPass object, this rule triggers and sends a request to the
    person:</para>

    <programlisting>rule "Return ChildBusPass Request "when
  $p : Person( )
       not( ChildBusPass( person == $p ) )
then
    requestChildBusPass( $p );
end</programlisting>
  </section>
</section>
