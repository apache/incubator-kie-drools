@comment{

  Copyright 2017 Red Hat, Inc. and/or its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}

package @{packageName}
unit @{ruleUnitClassName}

import org.dmg.pmml.pmml_4_2.descr.FIELDUSAGETYPE;
import org.kie.pmml.pmml_4_2.*;
import org.kie.pmml.pmml_4_2.model.*;
import org.kie.pmml.pmml_4_2.model.mining.SegmentExecution;
import org.kie.pmml.pmml_4_2.model.mining.SegmentExecutionState;
import org.kie.pmml.pmml_4_2.model.datatypes.*;
import org.kie.api.pmml.PMMLRequestData;
import org.kie.api.pmml.ParameterInfo;
import org.kie.api.pmml.PMML4Result;



@code{ int salienceValue; }


rule "Start Mining - @{miningModel.modelId}"
salience 1000
when
   rqst: PMMLRequestData( correlationId != null, modelName == "@{miningModel.modelId}", rqstInf: requestParams != null ) from request
   not @{miningModel.miningPojoClassName}() from miningModelPojo
then
   System.out.println("Starting mining");
   @{miningModel.miningPojoClassName} modelData = new @{miningModel.miningPojoClassName}(rqst);
   System.out.println("Created pojo");
   miningModelPojo.insert(modelData);
end


rule "Update the SegmentExecution State - Complete"
dialect "java"
when
   $segExec: SegmentExecution( $corrId: correlationId, $segmId: segmentationId, 
                               $segId: segmentId, state == SegmentExecutionState.EXECUTING, $res: result != null ) from childModelSegments
   $reslt: PMML4Result( this == $res, resultCode == "OK" ) from results
then
   modify($segExec) {
      setState(SegmentExecutionState.COMPLETE);
   }
end

rule "Update the SegmentExecution State - Error"
dialect "java"
when
   $segExec: SegmentExecution( $corrId: correlationId, $segmId: segmentationId, 
                               $segId: segmentId, state == SegmentExecutionState.EXECUTING, $res: result != null ) from childModelSegments
   $reslt: PMML4Result( this == $res, resultCode != null && resultCode != "OK" ) from results
then
   modify($segExec) {
      setState(SegmentExecutionState.ERROR);
   }
end

@foreach{ childSegment: childSegments }
@code{ salienceValue = 1000 - childSegment.segmentIndex; }
@code{ internalModel = childSegment.model; }


rule "Execute Segment @{childSegment.owner.segmentationId}-@{childSegment.segmentId}"
when
   $seg: SegmentExecution( $corrId: correlationId,
                           $segmId: segmentationId == "@{childSegment.owner.segmentationId}",
                           segmentId == "@{childSegment.segmentId}",
                           state == SegmentExecutionState.WAITING,
                           $segIndex: segmentIndex ) from childModelSegments
   not SegmentExecution( correlationId == $corrId, segmentationId == $segmId, 
      state in (SegmentExecutionState.COMPLETE, SegmentExecutionState.ERROR, SegmentExecutionState.EXECUTING)
      || (state == SegmentExecutionState.WAITING && segmentIndex < $segIndex) ) from childModelSegments
then
   PMML4Result rslt = new PMML4Result();
   rslt.setCorrelationId($seg.getCorrelationId());
   rslt.setSegmentationId($seg.getSegmentationId());
   rslt.setSegmentId($seg.getSegmentId());
   rslt.setSegmentIndex($seg.getSegmentIndex());
   request.insert($seg.getRequestData());
   results.insert(rslt);
   modify( $seg ) {
      setState(SegmentExecutionState.EXECUTING),
      setResult(rslt)
   };
   drools.run(@{childSegment.segmentRuleUnit}.class);
end


rule "Check Segment Can Fire - Segment @{childSegment.segmentId}"
salience @{salienceValue}
when
   model: @{miningModel.miningPojoClassName}( @{childSegment.predicateText} ) from miningModelPojo
then
   PMMLRequestData rqstData = new PMMLRequestData(model.getCorrelationId(),"@{childSegment.model.modelId}");
   @foreach{ field: childSegment.model.miningFields }
   rqstData.addRequestParam( "@{field.name}",model.getV@{field.compactUpperCaseName}() );
   @end{}
   SegmentExecution segEx = new SegmentExecution( model.getCorrelationId(),
                                                  "@{childSegment.owner.segmentationId}",
                                                  "@{childSegment.segmentId}",
                                                   @{childSegment.segmentIndex},
                                                  "@{childSegment.segmentRuleUnit}");
   segEx.setRequestData(rqstData);
   childModelSegments.insert(segEx);
end


rule "Create child segment mining schema object - Segment @{childSegment.segmentId}"
salience 999
when
   rqst: PMMLRequestData( cid: correlationId != null, rqstInf: requestParams != null )
   not @{childSegment.model.miningPojoClassName}()
then
   @{childSegment.model.miningPojoClassName} modelData = new @{childSegment.model.miningPojoClassName}(rqst);
   insert(modelData);
end


@end{}

