/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

//created on: 28.1.2008
package org.drools.verifier.subsumption.patterns

import org.drools.drl.parser.impl.Operator;
import org.drools.verifier.components.Field;

import org.drools.verifier.components.LiteralRestriction;
import org.drools.verifier.components.NumberRestriction;
import org.drools.verifier.report.components.Subsumption;

import org.drools.verifier.data.VerifierReport;

global VerifierReport result;

//
// Fires when two restrictions are subsumptant.
// Creates a Subsumption object.
//
// Dependencies: None
//
// Example 1: P( x > 10 ) and P( x > 100 )
//
rule "Find subsumptant restrictions, greater than"
    when
        // Covered x > 10
        $lower:NumberRestriction(
            ( valueType == Field.INT || == Field.DOUBLE || == Field.DATE ),
            ( operator == Operator.BuiltInOperator.GREATER.getOperator() || == Operator.BuiltInOperator.GREATER_OR_EQUAL.getOperator() )
        )

        // Covered x > 100
        $higher :NumberRestriction(
            fieldPath == $lower.fieldPath,
            ( operator == Operator.BuiltInOperator.GREATER.getOperator() || == Operator.BuiltInOperator.GREATER_OR_EQUAL.getOperator() || == Operator.BuiltInOperator.EQUAL.getOperator() ),
            value < $lower.value
        )
    then
        insert( new Subsumption( $higher, $lower ) );
end

rule "Find subsumptant restrictions, equal"
    when
        // Covered x > 10
        $left :LiteralRestriction( )

        // Covered x > 10
        $right :LiteralRestriction(
            path != $left.path,
            fieldPath == $left.fieldPath,
            operator == $left.operator,
            valueAsString == $left.valueAsString
        )
    then
        insert( new Subsumption( $left, $right ) );
end

//
// Fires when two restrictions are subsumptant.
// Creates a Subsumption object.
//
// Dependencies: None
//
// Example 1: P( x < 10 ) and P( x < 100 )
//
rule "Find subsumptant restrictions, less than"
    when
        // Covered x < 10
        $higher :NumberRestriction(
            ( valueType == Field.INT || == Field.DOUBLE || == Field.DATE ),
            ( operator == Operator.BuiltInOperator.LESS.getOperator() || == Operator.BuiltInOperator.LESS_OR_EQUAL.getOperator() )
        )

        // Covered x < 100
        $lower :NumberRestriction(
            fieldPath == $higher.fieldPath,
            ( operator == Operator.BuiltInOperator.LESS.getOperator() || == Operator.BuiltInOperator.LESS_OR_EQUAL.getOperator() || == Operator.BuiltInOperator.EQUAL.getOperator()),
            value < $higher.value
        )
    then
        insert( new Subsumption( $higher, $lower ) );
end
