@comment{

  Copyright 2017 Red Hat, Inc. and/or its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}
package @{pmmlPackageName};

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.kie.pmml.pmml_4_2.model.AbstractPMMLData;
import org.kie.api.definition.rule.Propagation;
import org.kie.api.definition.rule.Propagation.Type;
import org.kie.api.definition.type.PropertyReactive;
import org.kie.api.pmml.PMMLRequestData;
import org.kie.api.pmml.ParameterInfo;
import org.kie.api.pmml.PMML4Result;

@PropertyReactive
@Propagation(Type.IMMEDIATE)
public class @{className} extends AbstractPMMLData {
    @foreach{ dataField: dataFields }
    private @{dataField.type} v@{dataField.compactUpperCaseName};
    @end{}

	public @{className}(String correlationId) {
	   super(correlationId);
	}
	
	public @{className}(String correlationId, String modelName) {
	   super(correlationId,modelName);
	}
	
	public @{className}(PMMLRequestData requestData) {
	   super(requestData.getCorrelationId(),requestData.getModelName());
	   Map<String, ParameterInfo> mappedFields = requestData.getMappedRequestParams();
	   @foreach{ dataField: dataFields }
       @{dataField.type} val@{dataField.compactUpperCaseName} = getMappedParameterValue( mappedFields, "@{dataField.name}" );
       setV@{dataField.compactUpperCaseName}(val@{dataField.compactUpperCaseName});
	   @end{}
	}
	
	@foreach{ dataField: dataFields }
	public boolean getM@{dataField.compactUpperCaseName}() {
	   return !fieldsInUse.contains("@{dataField.compactUpperCaseName}");
	}
	
	public @{dataField.type} getV@{dataField.compactUpperCaseName}() {
	   return this.v@{dataField.compactUpperCaseName};
	}
	
	public void setV@{dataField.compactUpperCaseName}(@{dataField.type} value) {
	   this.v@{dataField.compactUpperCaseName} = value;
	   if (value != null) {
	      fieldsInUse.add("@{dataField.compactUpperCaseName}");
	      @code{valid = validations[dataField.name]; valu = (valid != null) ? valid.missingValue : null;}
	      @if{valid != null}
          if (@{dataField.name}IsValid(this.v@{dataField.compactUpperCaseName}) ) {
             fieldsAreValid.add("@{dataField.compactUpperCaseName}");
          } else {
             fieldsAreValid.remove("@{dataField.compactUpperCaseName}");
             @if{dataField.invalidValueTreatment.toString() == "AS_MISSING"} 
            @if{valu != null} this.v@{dataField.compactUpperCaseName} = @{valu.value};
            @else{} this.v@{dataField.compactUpperCaseName} = null;
            @end{}
            fieldsInUse.remove("@{dataField.compactUpperCaseName}");
             @end{}
          }
          @end{}
	   } else {
	      fieldsInUse.remove("@{dataField.compactUpperCaseName}");
	   }
	}
	
	public boolean isValid@{dataField.compactUpperCaseName}() {
	   return fieldsAreValid.contains("@{dataField.compactUpperCaseName}");
	}
	@end{}
	
    @foreach{validation: validations.entrySet}
    // Validation for @{validation.key}
    @{validation.value.validationString}
    @end{}
	
	
	private <T> T getMappedParameterValue(Map<String, ParameterInfo> params, String fieldName) {
	   T value = null;
	   if (params.containsKey(fieldName)) {
	      ParameterInfo pInf = params.get(fieldName);
	      if (pInf != null) {
	         value = (T)pInf.getValue();
	      }
	   }
	   return value;
	}
	
    public boolean equals(Object o) {
        return super.equals(o);
    }

    public int hashCode() {
        return super.hashCode();
    }

    @Override
    public String toString() {
       StringBuilder builder = new StringBuilder();
       builder.append("@{className}( correlationId=").append(this.getCorrelationId()).append(", modelName=@{modelName}, ");
       @foreach{dataField: dataFields}
       builder.append(" m@{dataField.compactUpperCaseName}=").append(getM@{dataField.compactUpperCaseName}()).append(", ");
       builder.append(" v@{dataField.compactUpperCaseName}=").append(v@{dataField.compactUpperCaseName}).append(", ");
       @end{}
       int last = builder.lastIndexOf(",");
       builder.delete(last,last+1);
       builder.append(")");
       return builder.toString();
    }

}