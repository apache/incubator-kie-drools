<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Honest Politician Example</title>

    <programlisting><emphasis role="bold">Name:</emphasis> Honest Politician
<emphasis role="bold">Main class:</emphasis> org.drools.examples.honestpolitician.HonestPoliticianExample
<emphasis role="bold">Module:</emphasis> drools-examples
<emphasis role="bold">Type:</emphasis> Java application
<emphasis role="bold">Rules file:</emphasis> HonestPoliticianExample.drl
<emphasis role="bold">Objective:</emphasis> Illustrate the concept of "truth maintenance" based on the logical insertion of facts
</programlisting>

  <para>The Honest Politician example demonstrates truth maintenance with
  logical assertions. The basic premise is that an object can only exist
  while a statement is true. A rule's consequence can logically insert an 
  object with the <code>insertLogical()</code> method. This means the object
  will only remain in the Working Memory as long as the rule that logically
  inserted  it remains true. When the rule is no longer true the object is
  automatically retracted.</para>

  <para>In this example there is the class <code>Politician</code>, with a
  name and a boolean value for being honest. Four politicians with honest
  state set to true are inserted.</para>

  <example>
    <title>Class Politician</title>

      <programlisting language="java">public class Politician {
    private String name;
    private boolean honest;
    ...
}</programlisting>
  </example>
  <example>
    <title>Honest Politician: Execution</title>

    <programlisting language="java">Politician blair = new Politician("blair", true);
Politician bush = new Politician("bush", true);
Politician chirac = new Politician("chirac", true);
Politician schroder = new Politician("schroder", true);
    
ksession.insert( blair );
ksession.insert( bush );
ksession.insert( chirac );
ksession.insert( schroder );

ksession.fireAllRules();</programlisting>
  </example>
  <para>The Console window output shows that, while there is at
    least one honest politician, democracy lives. However, as each
    politician is in turn corrupted by an evil corporation, so that
    all politicians become dishonest, democracy is dead.</para>
  <example>
    <title>Honest Politician: Console Output</title>

    <programlisting>Hurrah!!! Democracy Lives
I'm an evil corporation and I have corrupted schroder
I'm an evil corporation and I have corrupted chirac
I'm an evil corporation and I have corrupted bush
I'm an evil corporation and I have corrupted blair
We are all Doomed!!! Democracy is Dead
</programlisting>
  </example>
  <para>As soon as there is at least one honest politician in the
    Working Memory a new <code>Hope</code> object is logically asserted.
    This object will only exist while there is at least one honest
    politician. As soon as all politicians are dishonest, the
    <code>Hope</code> object will be automatically retracted. This rule
    is given a salience of 10 to ensure that it fires before any other
    rule, as at this stage the "Hope is Dead" rule is actually true.</para>

    <example>
      <title>Honest Politician: Rule "We have an honest politician"</title>

    <programlisting>rule "We have an honest Politician"
    salience 10
    when
        exists( Politician( honest == true ) )
    then
        insertLogical( new Hope() );
end</programlisting>
  </example>

  <para>As soon as a <code>Hope</code> object exists the "Hope Lives" rule
  matches and fires. It has a salience of 10 so that it takes priority
  over "Corrupt the Honest".</para>

  <example>
    <title>Honest Politician: Rule "Hope Lives"</title>

    <programlisting>rule "Hope Lives"
    salience 10
        when
            exists( Hope() )
        then
            System.out.println("Hurrah!!! Democracy Lives");
end</programlisting>
    </example>

    <para>Now that there is hope and we have, at the start, four honest
    politicians, we have four activations for this rule, all in conflict.
    They will fire in turn, corrupting each politician so that they are
    no longer honest. When all four politicians have been corrupted we
    have no politicians with the property <code>honest == true</code>.
    Thus, the rule "We have an honest Politician" is no longer true and
    the object it logical inserted (due to the last execution of
    <code>new Hope()</code>) is automatically retracted.</para>

    <example>
      <title>Honest Politician: Rule "Corrupt the Honest"</title>

      <programlisting>rule "Corrupt the Honest"
    when
        politician : Politician( honest == true )   
        exists( Hope() )
    then
        System.out.println( "I'm an evil corporation and I have corrupted " + politician.getName() );
        modify ( politician ) { honest = false };
end</programlisting>
    </example>

    <para>With the <code>Hope</code> object being automatically retracted,
    via the truth maintenance system, the conditional element <literal>not</literal>
    applied to <code>Hope</code> is no longer true so that the following
    rule will match and fire.</para>

    <example>
      <title>Honest Politician: Rule "Hope is Dead"</title>

      <programlisting>rule "Hope is Dead"
    when
        not( Hope() )
    then
        System.out.println( "We are all Doomed!!! Democracy is Dead" );
end</programlisting>
    </example>

    <para>Let's take a look at the Audit trail for this application:</para>

    <figure>
      <title>Honest Politician Example Audit View</title>

      <mediaobject>
        <imageobject>
          <imagedata width="100%"
                     fileref="images/Chapter-Examples/HonestPoliticianExample/honest_politician_audit.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The moment we insert the first politician we have two activations.
    The rule "We have an honest Politician" is activated only once for the first
    inserted politician because it uses an <literal>exists</literal> conditional
    element, which matches once for any number. The rule "Hope is Dead" is
    also activated at this stage, because we have not yet inserted the
    <code>Hope</code> object. Rule "We have an honest Politician" fires first,
    as it has a higher salience than "Hope is Dead", which inserts the
    <code>Hope</code> object. (That action is highlighted green.) The
    insertion of the <code>Hope</code> object activates "Hope Lives" and
    de-activates "Hope is Dead"; it also activates "Corrupt the Honest"
    for each inserted honest politician. Rule "Hope Lives" executes,
    printing  "Hurrah!!! Democracy Lives". Then, for each politician, rule
    "Corrupt the Honest" fires, printing "I'm an evil corporation and I
    have corrupted X", where X is the name of the politician, and modifies
    the politician's honest value to false. When the last honest politician
    is corrupted, <code>Hope</code> is automatically retracted, by the truth
    maintenance system, as shown by the blue highlighted area. The green
    highlighted area shows the origin of the currently selected blue
    highlighted area. Once the <code>Hope</code> fact is retracted, "Hope is
    dead" activates and fires printing "We are all Doomed!!! Democracy is
    Dead".</para>

</section>
