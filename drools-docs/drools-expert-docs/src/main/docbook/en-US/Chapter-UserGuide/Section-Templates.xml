<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

    <title>Templates</title>

    <para>If you discover that you have a group of rules following
    the same arrangement of patterns, constraints and actions on
    the RHS, differing only in constants or names for objects or
    fields, you might think of employing Drools's rule template feature
    for generating the actual rules. You would write a 
    <emphasis>rule template</emphasis> file, containing the
    textual skeleton of your rule and use the Drools template
    compiler in combination with a collection of objects providing
    the actual values for the "flesh" of the rules for their
    instantiation.</para>

    <para>The mechanism is very similar to what a macro processor
    does. The major advantage proffered by template expansion is
    that it's nicely integrated in the overall handling of
    Knowledge Resources.</para>

    <caution><para>This is an experimental feature. In particular,
    the API is subject to change.</para></caution>

    <section>
      <title>The Rule Template File</title>

      <para>A rule template file begins with a header defining the
      placeholders, or <emphasis>formal template parameters</emphasis> 
      for the strings that are to be inserted during instantiation. 
      After the first line, which invariably contains <literal>template header</literal>,
      you should write a number of lines, each of which contains a single
      parameter name.</para>

      <example>
        <title>Rule template file: template header</title>

        <programlisting>
<emphasis role="bold">template header</emphasis>
<emphasis>parameter-name-1</emphasis>
...
<emphasis>parameter-name-n</emphasis>
...</programlisting>
      </example>

      <para>The template header is followed by the text that is to
      be replicated and interpolated with the actual parameters. It
      may begin with a <literal>package</literal> statement, followed by some
      additional lines. These 
      may be sectioned into one or more templates, each of them
      between a pair of matching <literal>template</literal> and
      <literal>end template</literal> statements. The <literal>template</literal> takes
      an argument, which puts a name to the template. The name
      can be a simple unquoted name or an arbitrary string enclosed
      in double quotes. The template text between these lines may
      contain one or more rules, constituting the "raw material"
      for the expansion.</para>
      
      <example>
        <title>Rule template file: templates</title>

        <programlisting>
<emphasis role="bold">template header</emphasis>
<emphasis role="bold"><emphasis>parameter-name-1</emphasis></emphasis>
...
<emphasis>parameter-name-n</emphasis>
<emphasis role="bold">package ...</emphasis>     // optional
<emphasis>header text</emphasis>    // optional
<emphasis role="bold">template</emphasis> <emphasis>template-name</emphasis>
...
// template text
...
<emphasis role="bold">end template</emphasis>
...</programlisting>
      </example>

      <para>The resulting text will begin with the package line and the
      header text following it, if present. Then, each template text
      will be expanded individually, yielding one set of rules for each
      of the actual parameter sets. Therefore, the structure of the
      template sections affect the order of the generated rules, since
      the generator iterates over the sections and then over the
      set of actual parameters.</para>

      <para>Any interpolation takes place between a pair of <literal>template</literal>
      and <literal>end template</literal> statements, when this template is
      expanded. The template text is scanned for occurrences of
      <emphasis>parameter expansions</emphasis> written according to:
      <programlisting>
<emphasis role="bold">@{<emphasis>parameter-name</emphasis>}</emphasis></programlisting>
      The name between '@{' and '}' should be one of the parameter names
      defined in the template header. The substitution is effected anywhere,
      even within string literals.</para>

      <para>An important parameter is available without having to be
      included in the data source providing the actual values. The
      parameter substitution
      <emphasis role="bold"><code>@{row.rowNumber}</code></emphasis>
      expands to the integers 0, 1, 2, etc., providing a unique distinction
      for the instantiation derived from a parameter set. You would use this
      as part of each rule name, because, without this precaution, there
      would be duplicate rule names. (You are, of course, free to use your
      own identification included as an extra parameter.)</para>

    </section>

    <section>
      <title>Expanding a Template</title>

      <para>To expand a template, you must prepare a data source. This can
      be a spreadsheet, as explained in the previous section. Here, we'll
      concentrate on expansion driven by Java objects. There are two
      straightforward ways of supplying values for a fixed set of names:
      Java objects, in the JavaBeans style, and Maps. Both of them can
      be arranged in a <code>Collection</code>, whose elements will be
      processed during the expansion, resulting in an instantiation
      for each element.</para>

      <section>
        <title>Instantiation from Java Objects</title>
      
        <para>You may use a Java object that provides getter methods
        corresponding to all of the parameter names of your template
        file. If, for instance, you have defined a header</para>
        <programlisting>
template header
type
limit
word</programlisting>
        <para>the following Java class could be used:</para>
        <programlisting language="java">
public class ParamSet {
    //...
    public ParamSet( String t, int l, boolean w ) {
        //...
    }
    public String  getType(){...}
    public int     getLimit(){...}
    public boolean isWord(){...}
}</programlisting>
        <para>Although interpolation is pure text manipulation, the actual values
        supplied may be of any type, just as long as this type provides a
        reasonable <code>toString()</code> method. (For simple types, the
        eponymous static method of the related class from <code>java.lang</code>
        is used.)</para>

        <para>Assuming that we have created a <code>Collection&lt;ParamSet&gt;</code>
        for a template file <code>template.drl</code>, we can now proceed to
        request its expansion.</para>

        <programlisting language="java">
Collection&lt;ParamSet&gt; paramSets = new ArrayList&lt;ParamSet&gt;();
// populate paramSets
paramSets.add( new ParamSet( "Foo", 42, true ) );
paramSets.add( new ParamSet( "Bar", 13, false ) );
ObjectDataCompiler converter = new ObjectDataCompiler();
InputStream templateStream =
    this.getClass().getResourceAsStream( "template.drl" );
String drl = converter.compile( objs, templateStream );</programlisting>

        The resulting string contains the expanded rules text. You could
        write it to a file and proceed as usual, but it's also possible to
        feed this to a <code>KnowledgeBuilder</code> and continue with the
        resulting Knowledge Packages.

        <programlisting language="java">
KnowledgeBase kieBaseModel = KnowledgeBaseFactory.newKnowledgeBase();
KnowledgeBuilder kBuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
Reader rdr = new StringReader( drl );
kBuilder.add( ResourceFactory.newReaderResource( rdr ), ResourceType.DRL );
if( kBuilder.hasErrors() ){
    // ...
    throw new IllegalStateException( "DRL errors" );
}
kieBaseModel.addKnowledgePackages( kBuilder.getKnowledgePackages() );</programlisting>
      </section>

      <section>
        <title>Instantiation from Maps</title>

        <para>A <code>Map</code> that provides the values for substituting
        template parameters should have a (string) key set matching all of
        the parameter names. Again, values could be from any class, as long
        as they provide a good <code>toString()</code> method. The expansion
        would use the same approach, just differing in the way the
        map collection is composed.</para>

        <programlisting language="java">
Collection&lt;Map&lt;String,Object&gt;&gt; paramMaps = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();
// populate paramMaps
ObjectDataCompiler converter = new ObjectDataCompiler();
InputStream templateStream =
    this.getClass().getResourceAsStream( "template.drl" );
String drl = converter.compile( objs, templateStream );</programlisting>
       </section>
     </section>

     <section>
       <title>Example</title>

       <para>The following example illustrates template expansion. It is based on simple
       objects of class <code>Item</code> containing a couple of integer fields and an
       <code>enum</code> field of type <code>ItemCode</code>.</para>

       <programlisting language="java">
public class Item {
    // ...
    public Item( String n, int p, int w, ItemCode c ){...}

    public String   getName() {...}
    public int      getWeight() {...}
    public int      getPrice() {...}
    public ItemCode getCode() {...}
}

public enum ItemCode {
    LOCK,
    STOCK,
    BARREL;
}</programlisting>

         <para>The rule template contains a single rule. Notice that the field
         name for the range test is a parameter, which enables us to instantiate
         the template for different fields.</para>
         <programlisting>
template header
field
lower
upper
codes

package range;
template "inRange"
rule "is in range @{row.rowNumber}"
when
    Item( $name : name, $v : @{field} &gt;= @{lower} &amp;&amp; &lt;= @{upper}, $code : code @{codes} )
then
    System.out.println( "Item " + $name + " @{field} in range: " + $v + " code: " + $code );
end
end template</programlisting>

         <para>The next code snippet is from the application, where several
         parameter sets have to be set up. First, there is class
         <code>ParamSet</code>, for storing a set of actual parameters.</para>

         <programlisting language="java">
public class ParamSet {
    //...
    private EnumSet&lt;ItemCode&gt; codeSet;

    public ParamSet( String f, int l, int u, EnumSet&lt;ItemCode&gt; cs ){...}

    public String getField() { return field; }
    public int getLower() { return lower; }
    public int getUpper() { return upper; }

    public String getCodes(){
        StringBuilder sb = new StringBuilder();
        String conn = "";
        for( ItemCode ic: codeSet ){
             sb.append( conn ).append( " == ItemCode." ).append( ic );
             conn = " ||";
        }
        return sb.toString();
    }
}</programlisting>

        <para>Note that the method <code>getCodes()</code> does returns the
        <code>EnumSet&lt;ItemCode&gt;</code> field value as a <code>String</code>
        value representing a multiple restriction, i.e., a test for one out
        of a list of values.</para>

        <para>The task of expanding a template, passing the resulting DRL text
        to a Knowledge Builder and adding the resulting Knowledge Packages
        to a Knowledge Base is generic. The utility class <code>Expander</code>
        takes care of this, using a Knowledge Base, the <code>InputStream</code>
        with the rule template and the collection of parameter sets.</para>     

        <programlisting language="java">
public class Expander {

    public void expand( KnowledgeBase kieBaseModel, InputStream is, Collection&lt;?&gt; act )
        throws Exception {
        ObjectDataCompiler converter = new ObjectDataCompiler();
        String drl = converter.compile( act, is );
        
        KnowledgeBuilder kBuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
        Reader rdr = new StringReader( drl );
        kBuilder.add( ResourceFactory.newReaderResource( rdr ), ResourceType.DRL );
        if( kBuilder.hasErrors() ){
            for( KnowledgeBuilderError err: kBuilder.getErrors() ){
                System.err.println( err.toString() );
            }
            throw new IllegalStateException( "DRL errors" );
        }
        kieBaseModel.addKnowledgePackages( kBuilder.getKnowledgePackages() );
    }
}</programlisting>

        <para>We are now all set to prepare the Knowledge Base with some
        generated rules. First, we define several parameter sets,
        constructed as <code>ParamSet</code> objects, and add them to a
        <code>List</code>, which is passed to the <code>expand</code>
        method shown above. Then we launch a stateful session, insert a
        few <code>Item</code>, and watch what happens.</para>

        <programlisting language="java">
Collection&lt;ParamSet&gt; cfl = new ArrayList&lt;ParamSet&gt;();
cfl.add( new ParamSet( "weight",  10,  99, EnumSet.of( ItemCode.LOCK, ItemCode.STOCK ) ) );
cfl.add( new ParamSet( "price",   10,  50, EnumSet.of( ItemCode.BARREL ) ) );

KnowledgeBase kieBaseModel = KnowledgeBaseFactory.newKnowledgeBase();
Expander ex = new Expander();
InputStream dis = new FileInputStream( new File( "rangeTemp.drl" ) );
ex.expand( kieBaseModel, dis, cfl );
        
StatefulKnowledgeSession session = kieBaseModel.newStatefulKnowledgeSession();
session.insert( new Item( "A", 130,  42, ItemCode.LOCK ) );
session.insert( new Item( "B",  44, 100, ItemCode.STOCK ) );
session.insert( new Item( "C", 123, 180, ItemCode.BARREL ) );
session.insert( new Item( "D",  85,   9, ItemCode.LOCK ) );
        
session.fireAllRules();</programlisting>

         <para>Notice that the two resulting rules deal with
         <emphasis>different</emphasis> fields, one with an item's weight,
         the other one with its price. - Below is the output.</para>

        <programlisting>
Item E price in range: 25 code: BARREL
Item A weight in range: 42 code: LOCK</programlisting>

     </section>

  </section>
