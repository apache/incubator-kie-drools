@comment{

  Copyright 2011 Red Hat, Inc. and/or its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}


@comment{
    Computes aggregation functions on a set of fields
    /**
    * @param name        - derived field name
    * @param groupBy     - optional parameter, causes the aggregation to be performed
    *                        conditionally on some constraint involving this datafield
    * @param dataType    - type of the derived field
    * @param afield      - type of the datafields to aggregate
    * @param constr      - groupby constraint
    * @param aggrFunc    - aggregation function (sum, avg, ...)
    */
}


@declare{'aggregateRule'}
rule "aggr_@{name}"
@if{ isInnerFieldName( name ) } @@Direct @end{}
@includeNamed{ 'rule_meta.drlt'; attributes=attributes }
when
    @if{groupBy != null} @{groupBy}( valid == true, missing == false, $gval : value ) @end{}
    accumulate (
        @{afield}( valid == true, missing == false, $c : context,
            @if{ context != null } context == @{context}, @end{}
            $v : value @if{groupBy != null && constr != null} @{constr} $gval @end{} ),
        $agg : @{aggrFunc}( $v ),
        $ctx : collectSet( $c )
    )
then
    @{name} x = new @{name}();
    x.setValue( @{ numberFromNumber( "$agg", dataType ) } );
    x.setMissing( false );
    x.setValid( true );
    x.setName( @{ format( "string", name ) } );
    x.setContext( $ctx.size() > 0 ? (String) $ctx.iterator().next() : null );
  insertLogical( x );
end
@end{}


@includeNamed{'aggregateRule'}