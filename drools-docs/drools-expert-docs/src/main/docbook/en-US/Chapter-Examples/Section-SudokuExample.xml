<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
    <title>Sudoku Example</title>

    <programlisting><emphasis role="bold">Name:</emphasis> Sudoku
<emphasis role="bold">Main class:</emphasis> org.drools.examples.sudoku.SudokuExample
<emphasis role="bold">Type:</emphasis> Java application
<emphasis role="bold">Rules file:</emphasis> sudoku.drl, validate.drl
<emphasis role="bold">Objective:</emphasis> Demonstrates the solving of logic problems, and complex pattern matching.
</programlisting>

    <para>This example demonstrates how Drools can be used to find a solution
    in a large potential solution space based on a number of constraints. We
    use the popular puzzle of Sudoku. This example also shows how Drools can
    be integrated into a graphical interface and how callbacks can be used to
    interact with a running Drools rules engine in order to update the
    graphical interface based on changes in the Working Memory at
    runtime.</para>

    <section>
      <title>Sudoku Overview</title>

      <para>Sudoku is a logic-based number placement puzzle. The objective is
      to fill a 9x9 grid so that each column, each row, and each of the nine
      3x3 zones contains the digits from 1 to 9, once, and only once.</para>

      <para>The puzzle setter provides a partially completed grid and the
      puzzle solver's task is to complete the grid with these
      constraints.</para>

      <para>The general strategy to solve the problem is to ensure that when
      you insert a new number it should be unique in its particular
      3x3 zone, row and column.</para>

      <para>See <link xlink:href="http://en.wikipedia.org/wiki/Sudoku">Wikipedia</link>
      for a more detailed description.</para>
    </section>

    <section>
      <title>Running the Example</title>

      <para>Download and install drools-examples as described above and then
      execute <filename>java org.drools.examples.DroolsExamplesApp</filename> and
      click on "SudokuExample".</para>

      <para>The window contains an empty grid, but the program comes
       with a number of grids stored internally which can be loaded 
       and solved. Click on "File", then "Samples" and select "Simple"
       to load one of the examples. Note that all buttons are disabled
       until a grid is loaded. <screenshot>
          <info>Initial screen</info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Examples/SudokuExample/sudoku1.png" />
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Loading the "Simple" example fills the grid according to the
      puzzle's initial state. <screenshot>
          <info>After loading "Simple"</info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Examples/SudokuExample/sudoku2.png" />
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Click on the "Solve" button and the Drools-based engine will fill
      out the remaining values, and the buttons are inactive once
      more.<screenshot>
          <info>"Simple" Solved</info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Examples/SudokuExample/sudoku3.png" />
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>Alternatively, you may click on the "Step" button to see the next
      digit found by the rule set. The Console window will display detailed
      information about the rules which are executing to solve the step
      in a human readable form. Some examples of these messages are
      presented below.</para>
      <para><screen>
single 8 at [0,1]
column elimination due to [1,2]: remove 9 from [4,2]
hidden single 9 at [1,2]
row elimination due to [2,8]: remove 7 from [2,4]
remove 6 from [3,8] due to naked pair at [3,2] and [3,7]
hidden pair in row at [4,6] and [4,4]
</screen></para>

      <para>Click on the "Dump" button to see the state of the grid, with
      cells showing either the established value or the remaining 
      possibilitiescandidates.</para>
      <para><screen>
       Col: 0     Col: 1     Col: 2     Col: 3     Col: 4     Col: 5     Col: 6     Col: 7     Col: 8     
Row 0:   2 4  7 9   2 456        4567 9   23 56  9  --- 5 ---  --- 1 ---    3  67 9  --- 8 ---     4 67   
Row 1:  12    7 9  --- 8 ---  1    67 9   23  6  9  --- 4 ---   23  67    1 3  67 9    3  67 9  --- 5 --- 
Row 2:  1  4  7 9  1  456     --- 3 ---      56 89      5 78       5678   --- 2 ---     4 67 9  1  4 67   
Row 3:  1234       12345      1  45      12  5  8   --- 6 ---   2  5 78       5 78      45 7    --- 9 --- 
Row 4:  --- 6 ---  --- 7 ---      5      --- 4 ---   2  5  8   --- 9 ---      5  8   --- 1 ---  --- 3 --- 
Row 5:  --- 8 ---  12 45      1  45   9  12  5      --- 3 ---   2  5 7        567       4567     2 4 67   
Row 6:  1 3   7    1 3  6     --- 2 ---    3 56 8       5  8     3 56 8   --- 4 ---    3 567 9  1    678  
Row 7:  --- 5 ---  1 34 6     1  4 678     3  6 8   --- 9 ---    34 6 8   1 3  678   --- 2 ---  1    678  
Row 8:    34       --- 9 ---     4 6 8   --- 7 ---  --- 1 ---   23456 8     3 56 8     3 56          6 8  
</screen></para>

      <para>Now, let us load a Sudoku grid that is deliberately invalid. Click
      on "File", "Samples" and "!DELIBERATELY BROKEN!". Note that this grid
      starts with some issues, for example the value 5 appears twice in the
      first row.<screenshot>
          <info>Broken initial state</info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Examples/SudokuExample/sudoku4.png" />
            </imageobject>
          </mediaobject>
        </screenshot></para>

      <para>A few simple rules perform a sanity check, right after loading
      a grid. In this case, the following messages are printed on
      standard output:</para> 
      <para><screen>
cell [0,8]: 5 has a duplicate in row 0
cell [0,0]: 5 has a duplicate in row 0
cell [6,0]: 8 has a duplicate in col 0
cell [4,0]: 8 has a duplicate in col 0
Validation complete.
</screen></para>

      <para>Nevertheless, click on the "Solve" button to apply the solving
      rules to this invalid grid. This will not complete; some cells
      remain empty. <screenshot>
          <info>Broken "solved" state</info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Chapter-Examples/SudokuExample/sudoku5.png" />
            </imageobject>
          </mediaobject>
        </screenshot></para>


      <para>The solving functionality has been achieved by the use of
      rules that implement standard solving techniques. They are based
      on the sets of values that are still candidates for a cell. If,
      for instance, such a set contains a single value, then this is
      the value for the cell. A little less obvious is the single
      occurrence of a value in one of the groups of nine cells. The
      rules detecting these situations insert a fact of type Setting
      with the solution value for some specific cell. This fact causes the
      elimination of this value from all other cells in any of the
      groups the cell belongs to. Finally, it is retracted.</para>

      <para>Other rules merely reduce the permissible values for some
      cells. Rules "naked pair", "hidden pair in row", "hidden pair in column"
      and "hidden pair in square" merely eliminate possibilities but
      do not establish solutions. More sophisticated eliminations are done by
      "X-wings in rows", "X-wings in columns", "intersection removal row" and
      "intersection removal column".</para>
    </section>

    <section>
      <title>Java Source and Rules Overview</title>

      <para>The Java source code can be found in the
      /src/main/java/org/drools/examples/sudoku directory, with the two DRL
      files defining the rules located in the
      /src/main/rules/org/drools/examples/sudoku directory.</para>

      <para>The package <code>org.drools.examples.sudoku.swing</code>
      contains a set of classes which implement a framework for Sudoku
      puzzles. Note that this package does not have any dependencies on
      the Drools libraries. <code>SudokuGridModel</code> defines an
      interface which can be implemented to store a Sudoku puzzle as a 9x9
      grid of <code>Cell</code> objects. <code>SudokuGridView</code> is
      a Swing component which can visualize any implementation of
      <code>SudokuGridModel</code>. <code>SudokuGridEvent</code> and
      <code>SudokuGridListener</code> are used to
      communicate state changes between the model and the view: events are
      fired when a cell's value is resolved or changed. If you are familiar
      with the model-view-controller patterns in other Swing components such
      as <code>JTable</code> then this pattern should be familiar.
      <code>SudokuGridSamples</code> provides a number of partially filled
      Sudoku puzzles for demonstration purposes.</para>

      <para>Package <code>org.drools.examples.sudoku.rules</code> contains a
      utility class with a method for compiling DRL files.</para>

      <para>The package <code>org.drools.examples.sudoku</code> contains a
      set of classes implementing the elementary <code>Cell</code> object
      and its various aggregations: the <code>CellFile</code> subtypes
      <code>CellRow</code> and <code>CellCol</code> as well as
      <code>CellSqr</code>, all of which are subtypes of
      <code>CellGroup</code>. It's interesting to note that <code>Cell</code>
      and <code>CellGroup</code> are subclasses of <code>SetOfNine</code>,
      which provides a property <code>free</code> with the
      type <code>Set&lt;Integer&gt;</code>. For a <code>Cell</code> it
      represents the individual candidate set; for a <code>CellGroup</code>
      the set is the union of all candidate sets of its cells, or, simply,
      the set of digits that still need to be allocated.</para>


      <para>With 81 <code>Cell</code> and 27 <code>CellGroup</code> objects and
      the linkage provided by the <code>Cell</code> properties 
      <code>cellRow</code>, <code>cellCol</code> and <code>cellSqr</code>
      and the <code>CellGroup</code> property <code>cells</code>, a list of
      <code>Cell</code> objects, it is possible to write rules that
      detect the specific sitations that permit the allocation of a
      value to a cell or the elimination of a value from some candidate 
      set.</para>

      <para>An object of class <code>Setting</code> is used for triggering
      the operations that accompany the allocation of a value: its removal
      from the candidata sets of sibling cells and associated cell groups.
      Moreover, the presence of a <code>Setting</code> fact is used in
      all rules that should detect a new situation; this is to avoid
      reactions to inconsistent intermediary states.</para>

      <para>An object of class <code>Stepping</code> is used in a
      low priority rule to execute an emergency halt when a "Step"
      does not terminate regularly. This indicates that the puzzle
      cannot be solved by the program.</para>


      <para>The class <code>org.drools.examples.sudoku.SudokuExample</code>
      implements a Java application combining the components desribed.</para>
    </section>

    <section>
      <title>Sudoku Validator Rules (validate.drl)</title>

      <para>Validation rules detect duplicate numbers in cell groups.
      They are combined in an agenda group which enables us to activate
      them, explicitly, after loading a puzzle.</para>

      <para>The three rules "duplicate in cell..." are very similar.
      The first pattern locates a cell with an allocated value. The second
      pattern pulls in any of the three cell groups the cell belongs to.
      The final pattern would find a cell (other than the first one) with
      the same value as the first cell and in the same row, column or
      square, respectively.</para>

      <para>Rule "terminate group" fires last. It prints a message and
      calls halt.</para>
    </section>

    <section>
      <title>Sudoku Solving Rules (sudoku.drl)</title>

      <para>There are three types of rules in this file: one group
      handles the allocation of a number to a cell, another group
      detects feasible allocations, and the third group eliminates
      values from candidate sets.</para>

      <para>Rules  "set a value", "eliminate a value from Cell" and
      "retract setting" depend on the presence of a <code>Setting</code>
      object. The first rule handles the assignment to the cell and the
      operations for removing the value from the "free" sets of the 
      cell's three groups. Also, it decrements a counter that, when
      zero, returns control to the Java application that has called
      <code>fireUntilHalt()</code>. The purpose of rule
      "eliminate a value from Cell" is to reduce the candidate lists
      of all cells that are related to the newly assigned cell. Finally,
      when all eliminations have been made, rule "retract setting"
      retracts the triggering <code>Setting</code> fact.</para>

      <para>There are just two rules that detect a situation where an
      allocation of a number to a cell is possible. Rule "single" fires
      for a <code>Cell</code> with a candidate set containing a single
      number. Rule "hidden single" fires when there is no cell with a
      single candidate but when there is a cell containing a candidate but  
      this candidate is absent from all other cells in one of the three
      groups the cell belongs to. Both rules create and insert a
      <code>Setting</code> fact.</para>

      <para>Rules from the largest group of rules implement, singly or
      in groups of two or three, various solving techniques, as they are
      employed when solving Sudoku puzzles manually.</para>

      <para>Rule "naked pair" detects identical candidate sets of size 2
      in two cells of a group; these two values may be removed from all
      other candidate sets of that group.</para>

      <para>A similar idea motivates the three rules "hidden pair in...";
      here, the rules look for a subset of two numbers in exactly two cells
      of a group, with neither value occurring in any of the other cells of
      this group. This, then, means that all other candidates can be
      eliminated from the two cells harbouring the hidden pair.</para>

      <para>A pair of rules deals with "X-wings" in rows and columns.
      When there are only two possible cells for a value in each of
      two different rows (or columns) and these candidates lie also
      in the same columns (or rows), then all other candidates for 
      this value in the columns (or rows) can be eliminated. If you
      follow the pattern sequence in one of these rules, you will see
      how the conditions that are conveniently expressed by words such as
      "same" or "only" result in patterns with suitable constraints
      or prefixed with "not".</para>

      <para>The rule pair "intersection removal..." is based on the
      restricted occurrence of some number within one square, either
      in a single row or in a single column. This means that this number
      must be in one of those two or three cells of the row or column;
      hence it can be removed from the candidate sets of all other cells
      of the group. The pattern establishes the restricted occurrence
      and then fires for each cell outside the square and within the
      same cell file.</para>

      <para>These rules are sufficient for many but certainly not for all
      Sudoku puzzles. To solve very difficult grids, the rule set would
      need to be extended with more complex rules. (Ultimately, there
      are puzzles that cannot be solved except by trial and error.)</para>
    </section>
  </section>
