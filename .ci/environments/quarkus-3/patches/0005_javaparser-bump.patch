From 2fc3c7c9a6ff41706fe75bc5845d28dbbe053648 Mon Sep 17 00:00:00 2001
From: mariofusco <mario.fusco@gmail.com>
Date: Wed, 8 Mar 2023 11:33:04 +0100
Subject: [PATCH] bump to JavaParser 3.25.0

---
 .../org/drools/mvel/parser/MvelParser.java    |  6 ++--
 .../src/main/javacc/mvel.jj                   | 29 ++++++++++++++-----
 2 files changed, 25 insertions(+), 10 deletions(-)

diff --git a/drools-model/drools-mvel-parser/src/main/java/org/drools/mvel/parser/MvelParser.java b/drools-model/drools-mvel-parser/src/main/java/org/drools/mvel/parser/MvelParser.java
index 081579dedad..b7eb48d6747 100644
--- a/drools-model/drools-mvel-parser/src/main/java/org/drools/mvel/parser/MvelParser.java
+++ b/drools-model/drools-mvel-parser/src/main/java/org/drools/mvel/parser/MvelParser.java
@@ -86,7 +86,7 @@ public MvelParser(ParserConfiguration configuration) {

     public MvelParser(ParserConfiguration configuration, boolean optionalSemicolon) {
         this.configuration = configuration;
-        configuration.getPostProcessors().clear();
+        configuration.getProcessors().clear();
         this.optionalSemicolon = optionalSemicolon;
     }

@@ -146,8 +146,8 @@ public <N extends Node> ParseResult<N> parse(ParseStart<N> start, Provider provi
             N resultNode = start.parse(parser);
             ParseResult<N> result = new ParseResult<>(resultNode, parser.problems, parser.getCommentsCollection());

-            configuration.getPostProcessors().forEach(postProcessor ->
-                    postProcessor.process(result, configuration));
+            configuration.getProcessors().forEach(processor ->
+                    processor.get().postProcess(result, configuration));

             result.getProblems().sort(PROBLEM_BY_BEGIN_POSITION);

diff --git a/drools-model/drools-mvel-parser/src/main/javacc/mvel.jj b/drools-model/drools-mvel-parser/src/main/javacc/mvel.jj
index 615512de3f8..7ef702abdb6 100644
--- a/drools-model/drools-mvel-parser/src/main/javacc/mvel.jj
+++ b/drools-model/drools-mvel-parser/src/main/javacc/mvel.jj
@@ -1370,13 +1370,14 @@ ModifierHolder Modifiers():
  * Also note that JavaParser handles the hierarchy/specialisations of classes, interfaces, and enums differently to the JLS.
  * <ul>
  *   <li>This {@code ClassOrInterfaceDeclaration} refers to the {@code NormalClassDeclaration} and {@code NormalInterfaceDeclaration},</li>
- *   <li>while {@code AnnotationTypeDeclaration} and {@code EnumDeclaration} are handled separately within this grammar.</li>
+ *   <li>while {@code AnnotationTypeDeclaration}, {@code EnumDeclaration}, and {@code RecordDeclaration} are handled separately within this grammar.</li>
  * </ul>
- * https://docs.oracle.com/javase/specs/jls/se15/html/jls-8.html#jls-8.1
+ * https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.1
  * <pre>{@code
  *     ClassDeclaration:
  *         NormalClassDeclaration
  *         EnumDeclaration
+ *         RecordDeclaration
  *     NormalClassDeclaration:
  *         {ClassModifier} class TypeIdentifier [TypeParameters] [Superclass] [Superinterfaces] ClassBody
  * }</pre>
@@ -1417,11 +1418,11 @@ ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration(ModifierHolder modifier)
 }

 /**
- * https://openjdk.java.net/jeps/395#Java-grammar
+ * https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.10
  * <pre>{@code
  *     RecordDeclaration:
  *        {ClassModifier} `record` TypeIdentifier [TypeParameters]
- *          RecordHeader [SuperInterfaces] RecordBody
+ *          RecordHeader [ClassImplements] RecordBody
  *
  *      RecordHeader:
  *       `(` [RecordComponentList] `)`
@@ -1430,11 +1431,15 @@ ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration(ModifierHolder modifier)
  *       RecordComponent { `,` RecordComponent}
  *
  *      RecordComponent:
- *       {Annotation} UnannType Identifier
+ *       {RecordComponentModifier} UnannType Identifier
  *       VariableArityRecordComponent
  *
  *      VariableArityRecordComponent:
  *       {Annotation} UnannType {Annotation} `...` Identifier
+ *       {RecordComponentModifier} UnannType {Annotation} `...` Identifier
+ *
+ *      RecordComponentModifier:
+ *       Annotation
  *
  *      RecordBody:
  *        `{` {RecordBodyDeclaration} `}`
@@ -1859,6 +1864,9 @@ BodyDeclaration<?> RecordBodyDeclaration():
          |
             LOOKAHEAD("enum")
             ret = EnumDeclaration(modifiers)
+         |
+            LOOKAHEAD("record")
+            ret = RecordDeclaration(modifiers)
          |
             LOOKAHEAD("@" "interface")
             ret = AnnotationTypeDeclaration(modifiers)
@@ -3365,13 +3373,15 @@ Expression EqualityExpression():
  */
 PatternExpr PatternExpression():
 {
+    ModifierHolder modifier;
     ReferenceType type;
     SimpleName name;
 }
 {
-    type = AnnotatedReferenceType()
+    modifier = Modifiers()
+    type = ReferenceType(modifier.annotations)
     name = SimpleName()
-    { return new PatternExpr(range(type, token()), type, name); }
+    { return new PatternExpr(range(type, token()), modifier.modifiers, type, name); }
 }


@@ -4527,6 +4537,11 @@ Statement BlockStatement():
             LOOKAHEAD( Modifiers() "record" SimpleName() [ TypeParameters() ] Parameters() )
             modifier = Modifiers()
             recordDeclaration = RecordDeclaration(modifier) { ret = new LocalRecordDeclarationStmt(range(recordDeclaration, token()), recordDeclaration); }
+         |
+            // try yield statement separate from more general Statement() because yield is not a keyword but
+            // just a restricted identifier and a yield statement can be confused with VariableDeclarationExpression sometimes
+            LOOKAHEAD( YieldStatement() )
+            ret = YieldStatement()
          |
             LOOKAHEAD( VariableDeclarationExpression() )
             expr = VariableDeclarationExpression()
