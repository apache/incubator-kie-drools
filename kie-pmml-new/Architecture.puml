@startuml
'default
top to bottom direction

package "PMML Module" {

component api [
        PMML API
        This component defines API common to all PMML submodules
        ]

package "PMML Library" {
    /'component library_marshaller [
        PMML Marshaller
        This component is only responsible of plain marshalling/unmarshalling,
        generating kie-agnostic objects.
        It may also be an already existing library (jpmml ?)
        ]'/
    component library_api [
            PMML Library API
            Defines common objects shared by both Compiler and
            model Model implementations, to decouple them
            ]
    component library_compiler [
        PMML Library Compiler
        Translate original PMML model to the objects
        that will be stored inside kie knowledge base
        ]
}

package "PMML Models" {
    component implementations [
        PMML Model implementations
        For every "model" there will be a specific module, to have them
        easily replaceable/pluggable.
        Compiler will invoke them, if they are available in the classpath.
        ]
}

package "PMML Runtime" {

    component runtime_api [
        PMML Runtime API
        This component defines API specific fo Kie runtime environment
        ]

    component runtime_assembler [
        PMML Runtime Assembler
        Store objects created by compiler
        inside kie knowledge base
        ]

     component runtime_core [
             PMML Runtime Core
             Read objects from kie knowledge base
             and use them to calculate PMML result
             based on input data
         ]
}


/'library_compiler --> marshaller : use'/
library_api .> api : depends
runtime_api .> api : depends
library_compiler ..> library_api : depends
implementations .> library_api : depends
library_compiler -> implementations : use
runtime_core .> runtime_api : depends
runtime_assembler -> library_compiler : use
runtime_assembler .> runtime_api : depends
}

@enduml
