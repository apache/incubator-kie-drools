/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.drools.modelcompiler.drlx;

import java.time.LocalDate;
import java.time.Month;

/** with this comment I must not break **/

unit Example;


rule alternatives {
    LocalDate a : /dates[ year == 2021 ],
    LocalDate b : /dates[ year == 2023, dayOfMonth == 1, month == Month.JANUARY ],

    or (
        LocalDate a : /dates[ year == 2021 ],
        LocalDate b : /dates[ year == 2023, dayOfMonth == 1, month == Month.JANUARY ],
        and (
            LocalDate c : /dates[ year == 2024, dayOfMonth == 1, month == Month.JANUARY ],
            LocalData x: /dates[ year == 2025 ],
        ),
    ),

    do System.out.println("hello");

}

rule year2020 {
    LocalDate foo : /dates[ year > 2020 ],
    do {
        System.out.println("finally " + foo);
        int a = 1
        + 1;
    }
}

rule newyear2020 {
    LocalDate foo : /dates[ year == 2021, dayOfMonth == 1, month == Month.JANUARY ],
    do {
        System.out.println("Happy new year ðŸŽ‰ " + foo);
    }
}

rule join {
    LocalDate a : /dates[ year == 2021 ],
    LocalDate b : /dates[ year == a.year, dayOfMonth == 1, month == Month.JANUARY ],
    do {
        // silly match;
        System.out.println("Happy new year ðŸŽ‰ " + b);
    }
}