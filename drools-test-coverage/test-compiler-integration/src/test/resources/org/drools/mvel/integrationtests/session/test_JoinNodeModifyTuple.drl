/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package TrafficControl

import org.drools.mvel.compiler.*
import org.drools.mvel.compiler.Close
import org.drools.mvel.compiler.Approach

rule "Target Retract"
    salience -100
    when
      $tgt1 : Target( $label1 : label, $time : time )
      Target( label == $label1, time > $time )
    then
      delete( $tgt1 );
end

rule "Close Assert"
    when
      Target( $label : label, $time : time, $lat : lat, $lon : lon )
      Target( $label2 : label, time == $time, $lat2 : lat, $lon2 : lon )
      eval( $label.compareTo( $label2 ) < 0 )
    then
      float s1 =  $lat.floatValue() - $lat2.floatValue();
      float s2 =  $lon.floatValue() - $lon2.floatValue();
      double distance = Math.sqrt( s1*s1 + s2*s2 );
      if ( distance < 8.0 )
      {
        Close cl = new Close();
        cl.label = $label;
        cl.label2 = $label2;
        cl.time = $time;
        cl.distance = new Float( distance );
        cl.bearing = new Float( 144.9 );
        insert( cl );
      }
end

rule "Close Retract"
    salience -100
    when
      $cls : Close( $label : label, $label2 : label2, $time : time )
      Close( label == $label, label2 == $label2, time > $time )
    then
      delete( $cls );
end

rule "Approach Begin"
    when
      $cls1 : Close( $label : label, $label2 : label2, $time : time, $distance : distance, $bearing : bearing )
      not Approach( label == $label, label2 == $label2 )
      $cls2 : Close( label == $label, label2 == $label2, $time2 : time > $time, $distance2 : distance < $distance, $bearing2 : bearing )
    then
      Approach a = new Approach();
      a.label = $label;
      a.label2 = $label2;
      a.distance = $distance;
      a.distance2 = $distance2;
      a.time = $time;
      a.time2 = $time2;
      a.bearing = $bearing;
      a.bearing2 = $bearing2;
      insert( a );
      delete( $cls1 );
end

rule "Approach Continue"
    no-loop true
    when
      $app : Approach( $label : label, $label2 : label2, $time2 : time2, $distance2 : distance2 )
      Close( label == $label, label2 == $label2, $time3 : time > $time2, $distance3 : distance <=  $distance2, $bearing3 : bearing )
    then
      $app.distance2 = $distance3;
      $app.bearing2 = $bearing3;
      $app.time2 = $time3;
      update( $app );
end

rule "Danger Distance Warning"
    when
      Approach( $label : label, $label2 : label2, $distance2 : distance2, $time2 : time2, $bearing2 : bearing2 )
      Target( label == $label, time == $time2, $speed : speed, $course : course )
      eval( $distance2.floatValue() <= 5.2 )
    then
      //System.out.println( "Danger Distance Warning "+$label+" "+$label2+" distance: "+$distance2 );
end

