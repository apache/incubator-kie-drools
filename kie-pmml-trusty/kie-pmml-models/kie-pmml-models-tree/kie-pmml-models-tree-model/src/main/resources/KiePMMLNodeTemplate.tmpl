package org.kie.pmml.models.tree.model;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;

import org.kie.pmml.commons.model.KiePMMLOutputField;
import org.kie.pmml.commons.model.predicates.KiePMMLCompoundPredicate;
import org.kie.pmml.commons.model.predicates.KiePMMLFalsePredicate;
import org.kie.pmml.commons.model.predicates.KiePMMLPredicate;
import org.kie.pmml.commons.model.predicates.KiePMMLSimplePredicate;
import org.kie.pmml.commons.model.predicates.KiePMMLSimpleSetPredicate;
import org.kie.pmml.commons.model.predicates.KiePMMLTruePredicate;
import org.kie.pmml.api.enums.PMML_MODEL;
import org.kie.pmml.models.tree.model.KiePMMLNode;
import org.kie.pmml.models.tree.model.KiePMMLNodeResult;
import org.kie.pmml.models.tree.model.KiePMMLScoreDistribution;



public class KiePMMLNodeTemplate extends KiePMMLNode {

    public KiePMMLNodeTemplate() {
        super(name, Collections.emptyList());
    }

    public static KiePMMLNodeResult evaluateNode(final Map<String, Object> requestData) {
            if (!predicate.evaluate(requestData)) {
                return null;
            }
            final List<Function<Map<String, Object>, KiePMMLNodeResult>> nodeFunctions = null;
            final Object score = null;
            final List<KiePMMLScoreDistribution> scoreDistributions = null;
            final double missingValuePenalty = 1.0;
            KiePMMLNodeResult kiePMMLNodeResult = new KiePMMLNodeResult(score, KiePMMLNode.getProbabilityConfidenceMap(scoreDistributions, missingValuePenalty));
            if (nodeFunctions.isEmpty()) {
                return kiePMMLNodeResult;
            }
            Optional<KiePMMLNodeResult> nestedKiePMMLNodeResult = KiePMMLNode.getNestedKiePMMLNodeResult(nodeFunctions, requestData);
            return nestedKiePMMLNodeResult.orElse(kiePMMLNodeResult);
    }

}
