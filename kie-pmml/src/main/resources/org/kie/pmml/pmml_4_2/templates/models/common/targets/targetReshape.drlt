@comment{

  Copyright 2011 Red Hat, Inc. and/or its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}


 @comment{
    Applies post-processing transformations to a target field value
    The transformations, if any, are in the following order:
        - integer cast (round, floor, ceil)
        - range check (min/max)
        - linear scaling (K*x + C)

    /**
    * @param name        - target field name
    * @param model       - name of the model using the field
    * @param cast        - type of integer cast : null, round, floor, ceil
    * @param min         - lower boundary, if value is lower will be replaced by this
    * @param max         - upper boundary, if value is higher will be replaced by this
    * @param scale       - linear transformation scaling coefficient K
    * @param offset      - linear transformation offset constant C
    */
}



@declare{'targetReshapeRule'}
@code{ boolean affected = false; }
rule "targetReshape_@{model}_@{field}@if{ tgtValue != null}_@{tgtValue}@end{}"
@includeNamed{ 'rule_meta.drlt'; attributes=attributes }
salience -100
no-loop
when
    $src : @{field}( $m : missing @if{ tgt != null && tgt.defaultValue == null } == false @end{},
                     $v : valid == true,
                     context == @{ format( "string", model ) },
                     $val : value @if{ tgtValue != null } == @{ format( fldType, tgtValue ) } @end{} )
then
    @{ mapDatatype( fldType ) } x = $val;

    //System.out.println("Intercepting target value " + x);

    @if{ min != null }
        @code{ affected = true; }
        x = Math.max(x,@{min});
    @end{}

    @if{ max != null }
        @code{ affected = true; }
        x = Math.min(x,@{max});
    @end{}

    @if{ ( scale != null || offset != null ) && scale != 1.0 && offset != 0.0 }
        @code{ affected = true; }
        x = @if{scale != null} @{scale} * @end{} x @if{offset != null} + @{offset} @end{} ;
    @end{}

    @if{ cast != null }
        @code{ affected = true; }
        @if{ cast == "round" }
            x = Math.round(x);
        @elseif{ cast == "floor" }
            x = Math.floor(x);
        @elseif{ cast == "ceil" }
            x = Math.ceil(x);
        @end{}
    @end{}

    @if{ tgt != null && tgt.defaultValue != null }
        @code{ affected = true; }
        x = $m ? @{ tgt.defaultValue } : x;
    @end{}

    @if{ affected }
        delete( $src );
        @if{ tgt != null && tgt.displayValue != null }
            $src.setDisplayValue( "@{tgt.displayValue}" );
        @end{}
            $src.setValue( x );
        insert( $src );
    @end{}

end
@end{}


@includeNamed{'targetReshapeRule'}