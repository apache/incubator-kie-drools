/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.drools.compiler.trait.test;


// Entity is an empty traitable, based solely on a property map.
import org.drools.traits.core.factmodel.Entity;


import org.drools.traits.compiler.factmodel.traits.IStudent;
import org.drools.traits.compiler.factmodel.traits.IPerson;
import org.drools.traits.compiler.factmodel.traits.IRole


global java.util.List list;





//declare Object
// @Traitable
//end


declare Core
    @Traitable
end

// legacy "semantic" interface
declare trait IPerson

end

// legacy "semantic" interface
declare trait IStudent

end

// legacy interface, does not extend IThing
declare trait IRole

end


// declared interface
declare trait Person
    name : String
    age : int
end

// declared interface
declare trait Worker
    name : String
    age : int
end





rule "Init"
when
then
    Entity core = new Entity();
    insert( core );
end

rule "Trait"
no-loop
when
    $core: Entity( )
then
    IRole r = don( $core, IRole.class, true );
    IStudent s = don( $core, IStudent.class, true );
    IPerson x = don( $core, IPerson.class, true );
    Person p = don( $core, Person.class, true );
    Worker w = don( $core, Worker.class, true );


    modify( p ) { setName( "john" ); }
    modify( s ) { setSchool( "skol" ); }
    modify( w ) { setAge( 30 ); }
    modify( r ) { setRoleName( "john" ); }
end


rule "Cloak"
when
    $p : Person( name == "john" )
then
    list.add( "OK" );
end

rule "Cloak 2"
when
    $p : Worker( name == "john", age == 30 )
then
    list.add( "OK2" );
end

rule "Cloak 3"
when
    $p : IPerson( name == "john" )
then
    list.add( "OK3" );
end

rule "Cloak 4"
when
    $p : IStudent( name == "john", school == "skol" )
then
    list.add( "OK4" );
end


rule "Cloak 5"
when
    $p : IRole( roleName == "john" )
then
    list.add( "OK5" );
end