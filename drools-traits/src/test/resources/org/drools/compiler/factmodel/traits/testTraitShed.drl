/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.drools.compiler.test;

import org.drools.traits.core.factmodel.Entity;
import org.drools.core.factmodel.traits.Thing;
import org.drools.core.factmodel.traits.*;
import org.drools.traits.core.factmodel.*;

global java.util.List list;

declare trait Student
    school : String
end

declare trait Worker
    wage : double
end

declare Imp
    @Traitable
    name : String
    school : String
end



rule "Init"
when
then
    System.out.println( "Init" );
    Imp core = new Imp( );
    insert( core );
end


rule "Trait1"
no-loop
when
    $core: Imp( this not isA Thing )
then
    System.out.println( "Don student" );
    Student s = don( $core, Student.class );
    list.add( "Student" );
end



rule "Trait2"
when
    $s : Student( this not isA Worker )
    String( this == "hire" )
then
    System.out.println( "Don worker" );
    don( $s, Worker.class );
    list.add( "Worker" );
end


rule "Conflict of interest"
when
    $w : Worker( this isA Student )
    String( this == "check" )
then
    System.out.println( "Shed student" );
    shed( $w, Student.class );
end


rule "Conflict resolved"
when
    $w : Worker( this not isA Student )
then
    System.out.println( "Shed worker too" );
    list.add( "Conflict" );
    shed( $w, Worker.class );
end


rule "Nothing Left"
when
    $t : Thing( this not isA Student, this not isA Worker )
then
    System.out.println( "Bare Thing" );
    list.add( "Nothing" );
end
