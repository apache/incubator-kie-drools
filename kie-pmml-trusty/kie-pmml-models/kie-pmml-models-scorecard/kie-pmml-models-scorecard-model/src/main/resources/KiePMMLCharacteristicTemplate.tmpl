/*
 * Copyright 2021 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kie.pmml.models.scorecard.model;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.kie.pmml.commons.model.KiePMMLOutputField;
import org.kie.pmml.api.enums.PMML_MODEL;
import org.kie.pmml.models.scorecard.model.KiePMMLCharacteristic;



public class KiePMMLCharacteristicTemplate {

    private static Number evaluateCharacteristic(final Map<String, Object> stringObjectMap, java.util.Map<String, Object> outputFieldsMap) {
            final List<BiFunction<Map<String, Object>, Map<String, Object>, Number>> attributeFunctions = null;
            final Number score = null;
            final String reasonCode = null;
            if (attributeFunctions.isEmpty()) {
                if (score != null && reasonCode != null) {
                    outputFieldsMap.put(reasonCode, score);
                }
                return score;
            }
            final org.kie.pmml.api.enums.REASONCODE_ALGORITHM reasonCodeAlgorithm = null;
            Optional<Number> characteristicScore = KiePMMLCharacteristic.getCharacteristicScore(attributeFunctions, stringObjectMap, outputFieldsMap, reasonCode, score, reasonCodeAlgorithm);
            return characteristicScore.orElse(score);
    }

    private static Number evaluateAttribute(java.util.Map<String, Object> stringObjectMap, java.util.Map<String, Object> outputFieldsMap) {
           final Function<Map<String, Object>, Boolean> predicateFunction = KiePMMLCharacteristicTemplate::evaluatePredicate;
           if (!predicateFunction.apply(stringObjectMap)) {
                return null;
           }
           final Number score = null;
           final String reasonCode = null;
           final Function<Map<String, Object>, Number> evaluateComplexScoreFunction = null;
           final Number evaluatedComplexScore = evaluateComplexScoreFunction != null ? evaluateComplexScoreFunction.apply(stringObjectMap) : null;
           final Number toReturn = org.kie.pmml.models.scorecard.model.KiePMMLCharacteristics.addNumbers(score, evaluatedComplexScore);
           if (reasonCode != null) {
              outputFieldsMap.put(reasonCode, toReturn);
           }
           return toReturn;
    }

    private static Number evaluateComplexScore(java.util.Map<String, Object> stringObjectMap) {
            final Number toReturn = null;
            return toReturn;
    }

    private static boolean evaluatePredicate(java.util.Map<String, Object> stringObjectMap) {
             // Populated by code-gen
    }


}
