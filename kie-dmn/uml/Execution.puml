/'
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
'/
@startuml
participant Actor
Actor -> DMNRuntimeUtil : createRuntime
DMNRuntimeUtil -> Actor: DMNRuntime
Actor -> DMNRuntime: getModel
DMNRuntime -> Actor : DMNModel
Actor -> DMNFactory: newContext
DMNFactory -> Actor: DMNContext
Actor -> Actor: (populate dmn context)
Actor -> DMNRuntime: evaluate*(DMNModel, DMNContext)
DMNRuntime -> DMNResultImplFactory: createResult
DMNResultImplFactory -> DMNRuntime: DMNResult
loop every DecisionNode in DMNModel.decisions
DMNRuntime -> DMNResult: getDecisionResultById
DMNResult -> DMNRuntime: DMNDecisionResultImpl
DMNRuntime -> DMNRuntime: DMNResult.setEvaluationStatus(EVALUATING)
loop every DMNNode in DecisionNode.dependencies
DMNRuntime -> DMNRuntime: DMNNode evaluate*
end
DMNRuntime -> DecisionNode: decision.getEvaluator().evaluate
DecisionNode -> DMNExpressionEvaluator: evaluate(DMNRuntimeEventManager, DMNResult)
DMNExpressionEvaluator -> FEELImpl: newEvaluationContext
FEELImpl -> DMNExpressionEvaluator: EvaluationContextImpl
DMNExpressionEvaluator -> FEELImpl: evaluate(CompiledExpression, EvaluationContextImpl)
FEELImpl -> ProcessedExpression: apply(EvaluationContextImpl)
ProcessedExpression -> CompiledFEELExpression: (InterpretedExecutableExpression || CompiledExecutableExpression) apply(EvaluationContextImpl)
CompiledFEELExpression -> ProcessedExpression: Object
ProcessedExpression -> FEELImpl: Object
FEELImpl -> DMNExpressionEvaluator: Object
DMNExpressionEvaluator -> DMNRuntime: EvaluatorResult(Object)
DMNRuntime -> CoerceUtil: coerceValue(DMNType, Object)
CoerceUtil -> DMNRuntime: Object
DMNRuntime -> DMNResult: setResult(Object)
DMNRuntime -> DMNResult: setEvaluationStatus(SUCCEEDED || FAILED)
DMNRuntime -> Actor: DMNResult
end
@enduml