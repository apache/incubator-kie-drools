<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>XML Rule Language</title>
  <warning>
    <para>The XML rule language has not been updated to support functionality
          introduced in Drools 5.x and is consider a deprecated feature.</para>
  </warning>
  <para>As an option, Drools also supports a "native" <indexterm>
      <primary>XML</primary>
    </indexterm> rule language as an alternative to DRL. This allows you to
  capture and manage your rules as XML data. Just like the non-XML DRL format,
  the XML format is parsed into the internal "AST" representation - as fast as
  possible (using a SAX parser). There is no external transformation step
  required. </para>

  <section>
    <title>Legacy Drools 2.x XML rule format</title>
    <para>The Drools 2.x legacy XML format is no longer supported by Drools XML parser</para>
  </section>

  <section>
    <title>When to use XML</title>

    <para>There are several scenarios that XML is desirable. However, we
    recommend that it is not a default choice, as XML is not readily human
    readable (unless you like headaches) and can create visually bloated
    rules.</para>

    <para>If you do want to edit XML by hand, use a good schema aware editor
    that provides nice hierarchical views of the XML, ideally visually
    (commercial tools like XMLSpy, Oxygen etc are good, but cost money, but
    then so do headache tablets).</para>

    <para>Other scenarios where you may want to use the XML format are if you
    have a tool that generates rules from some input (programmatically
    generated rules), or perhaps interchange from another rule language, or
    from another tool that emits XML (using XSLT you can easily transform
    between XML formats). Note you can always generate normal DRL as
    well.</para>

    <para>Alternatively you may be embedding Drools in a product that already
    uses XML for configuration, so you would like the rules to be in an XML
    format. You may be creating your own rule language on XML - note that you
    can always use the AST objects directly to create your own rule language
    as well (the options are many, due to the open architecture).</para>
  </section>

  <section>
    <title>The XML format</title>

    <para>A full W3C standards (XMLSchema) compliant XSD is provided that
    describes the XML language, which will not be repeated here verbatim. A
    summary of the language follows.</para>

    <example>
      <title>A rule in XML<indexterm>
          <primary>XML Rule</primary>
        </indexterm></title>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;package name="com.sample"
         xmlns="http://drools.org/drools-5.0"
         xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
         xs:schemaLocation="http://drools.org/drools-5.0 drools-5.0.xsd"&gt;

&lt;import name="java.util.HashMap" /&gt;
&lt;import name="org.drools.*" /&gt;

&lt;global identifier="x" type="com.sample.X" /&gt;
&lt;global identifier="yada" type="com.sample.Yada" /&gt;

&lt;function return-type="void" name="myFunc"&gt;
    &lt;parameter identifier="foo" type="Bar" /&gt;
    &lt;parameter identifier="bada" type="Bing" /&gt;

    &lt;body&gt;
     System.out.println("hello world");
    &lt;/body&gt;
&lt;/function&gt;

&lt;rule name="simple_rule"&gt;
&lt;rule-attribute name="salience" value="10" /&gt;
&lt;rule-attribute name="no-loop" value="true" /&gt;
&lt;rule-attribute name="agenda-group" value="agenda-group" /&gt;
&lt;rule-attribute name="activation-group" value="activation-group" /&gt;

&lt;lhs&gt;
    &lt;pattern identifier="foo2" object-type="Bar" &gt;
            &lt;or-constraint-connective&gt;
                &lt;and-constraint-connective&gt;
                    &lt;field-constraint field-name="a"&gt;
                        &lt;or-restriction-connective&gt;
                            &lt;and-restriction-connective&gt;
                                &lt;literal-restriction evaluator="&gt;" value="60" /&gt;
                                &lt;literal-restriction evaluator="&lt;" value="70" /&gt;
                            &lt;/and-restriction-connective&gt;
                            &lt;and-restriction-connective&gt;
                                &lt;literal-restriction evaluator="&lt;" value="50" /&gt;
                                &lt;literal-restriction evaluator="&gt;" value="55" /&gt;
                            &lt;/and-restriction-connective&gt;
                        &lt;/or-restriction-connective&gt;
                    &lt;/field-constraint&gt;

                    &lt;field-constraint field-name="a3"&gt;
                        &lt;literal-restriction evaluator="==" value="black" /&gt;
                    &lt;/field-constraint&gt;
                &lt;/and-constraint-connective&gt;

                &lt;and-constraint-connective&gt;
                    &lt;field-constraint field-name="a"&gt;
                        &lt;literal-restriction evaluator="==" value="40" /&gt;
                    &lt;/field-constraint&gt;

                    &lt;field-constraint field-name="a3"&gt;
                        &lt;literal-restriction evaluator="==" value="pink" /&gt;
                    &lt;/field-constraint&gt;
                &lt;/and-constraint-connective&gt;

                &lt;and-constraint-connective&gt;
                    &lt;field-constraint field-name="a"&gt;
                        &lt;literal-restriction evaluator="==" value="12"/&gt;
                    &lt;/field-constraint&gt;

                    &lt;field-constraint field-name="a3"&gt;
                        &lt;or-restriction-connective&gt;
                            &lt;literal-restriction evaluator="==" value="yellow"/&gt;
                            &lt;literal-restriction evaluator="==" value="blue" /&gt;
                        &lt;/or-restriction-connective&gt;
                    &lt;/field-constraint&gt;
                &lt;/and-constraint-connective&gt;
            &lt;/or-constraint-connective&gt;
        &lt;/pattern&gt;

        &lt;not&gt;
            &lt;pattern object-type="Person"&gt;
                &lt;field-constraint field-name="likes"&gt;
                    &lt;variable-restriction evaluator="==" identifier="type"/&gt;
                &lt;/field-constraint&gt;
            &lt;/pattern&gt;

            &lt;exists&gt;
                &lt;pattern object-type="Person"&gt;
                    &lt;field-constraint field-name="likes"&gt;
                        &lt;variable-restriction evaluator="==" identifier="type"/&gt;
                    &lt;/field-constraint&gt;
                &lt;/pattern&gt;                
            &lt;/exists&gt;
        &lt;/not&gt;

        &lt;or-conditional-element&gt;
            &lt;pattern identifier="foo3" object-type="Bar" &gt;
                &lt;field-constraint field-name="a"&gt;
                    &lt;or-restriction-connective&gt;
                        &lt;literal-restriction evaluator="==" value="3" /&gt;
                        &lt;literal-restriction evaluator="==" value="4" /&gt;
                    &lt;/or-restriction-connective&gt;
                &lt;/field-constraint&gt;
                &lt;field-constraint field-name="a3"&gt;
                    &lt;literal-restriction evaluator="==" value="hello" /&gt;
                &lt;/field-constraint&gt;
                &lt;field-constraint field-name="a4"&gt;
                    &lt;literal-restriction evaluator="==" value="null" /&gt;
                &lt;/field-constraint&gt;
            &lt;/pattern&gt;

            &lt;pattern identifier="foo4" object-type="Bar" &gt;
                &lt;field-binding field-name="a" identifier="a4" /&gt;
                &lt;field-constraint field-name="a"&gt;
                    &lt;literal-restriction evaluator="!=" value="4" /&gt;
                    &lt;literal-restriction evaluator="!=" value="5" /&gt;
                &lt;/field-constraint&gt;
            &lt;/pattern&gt;
        &lt;/or-conditional-element&gt;

        &lt;pattern identifier="foo5" object-type="Bar" &gt;
            &lt;field-constraint field-name="b"&gt;
                &lt;or-restriction-connective&gt;
                    &lt;return-value-restriction evaluator="==" &gt;a4 + 1&lt;/return-value-restriction&gt;
                    &lt;variable-restriction evaluator="&gt;" identifier="a4" /&gt;
                    &lt;qualified-identifier-restriction evaluator="=="&gt;
                        org.drools.Bar.BAR_ENUM_VALUE
                    &lt;/qualified-identifier-restriction&gt;
                &lt;/or-restriction-connective&gt;
            &lt;/field-constraint&gt;            
        &lt;/pattern&gt;

        &lt;pattern identifier="foo6" object-type="Bar" &gt;
            &lt;field-binding field-name="a" identifier="a4" /&gt;
            &lt;field-constraint field-name="b"&gt;
                &lt;literal-restriction evaluator="==" value="6" /&gt;
            &lt;/field-constraint&gt;
        &lt;/pattern&gt;
  &lt;/lhs&gt;
 &lt;rhs&gt;
    if ( a == b ) {
      assert( foo3 );
    } else {
      retract( foo4 );
    }
    System.out.println( a4 );
   &lt;/rhs&gt;
&lt;/rule&gt;

&lt;/package&gt;

</programlisting>
    </example>

    <para>In the preceding XML text you will see the typical XML
      element, the package declaration, imports, globals, functions,
      and the rule itself. Most of the elements are self explanatory
      if you have some  understanding of the Drools features.</para>

    <para>The <code>import</code> elements import the types you wish to
      use in the rule.</para>

    <para>The <code>global</code> elements define global objects that can
      be referred to in the rules.</para>

    <para>The <code>function</code> contains a function declaration, for
      a function to be used in the rules. You have to specify a return type,
      a unique name and parameters, in the body goes a snippet of code.</para>

    <para>The rule is discussed below.</para>

    <example>
      <title>Detail of rule element</title>

      <programlisting language="xml">&lt;rule name="simple_rule"&gt;
&lt;rule-attribute name="salience" value="10" /&gt;
&lt;rule-attribute name="no-loop" value="true" /&gt;
&lt;rule-attribute name="agenda-group" value="agenda-group" /&gt;
&lt;rule-attribute name="activation-group" value="activation-group" /&gt;

&lt;lhs&gt;
    &lt;pattern identifier="cheese" object-type="Cheese"&gt;
        &lt;from&gt;
            &lt;accumulate&gt;
                &lt;pattern object-type="Person"&gt;&lt;/pattern&gt;
                &lt;init&gt;
                    int total = 0;
                &lt;/init&gt;
                &lt;action&gt;
                    total += $cheese.getPrice();
                &lt;/action&gt;
                &lt;result&gt;
                    new Integer( total ) );
                &lt;/result&gt;
            &lt;/accumulate&gt;
        &lt;/from&gt;
    &lt;/pattern&gt;

    &lt;pattern identifier="max" object-type="Number"&gt;
        &lt;from&gt;
            &lt;accumulate&gt;
                &lt;pattern identifier="cheese" object-type="Cheese"&gt;&lt;/pattern&gt;
                &lt;external-function evaluator="max" expression="$price"/&gt;
            &lt;/accumulate&gt;
        &lt;/from&gt;
    &lt;/pattern&gt;
&lt;/lhs&gt;
&lt;rhs&gt;
    list1.add( $cheese );
&lt;/rhs&gt;
&lt;/rule&gt;
  </programlisting>
    </example>

    <para>In the above detail of the rule we see that the rule has LHS
      and RHS (conditions and consequence) sections.
    The RHS is simple, it is just a block of semantic code that will be
    executed when the rule is activated. The LHS is slightly more
    complicated as it contains nested elements for conditional elements,
    constraints and restrictions.</para>


<!--
  TODO: explain about

  conditional-element
  constraint-connective
  restriction-connective

  accumulate and external functions
-->

    <para>A key element of the LHS is the Pattern element. This allows you to
    specify a type (class) and perhaps bind a variable to an instance of that
    class. Nested under the pattern object are constraints and restrictions
  that have to be met. The Predicate and Return Value constraints
  allow Java expressions to be embedded.</para>

    <para>That leaves the conditional elements, not, exists, and, or etc. They
    work like their DRL counterparts. Elements that are nested under and an
    "and" element are logically "anded" together. Likewise with "or" (and you
    can nest things further). "Exists" and "Not" work around patterns, to check
    for the existence or nonexistence of a fact meeting the pattern's
    constraints.</para>

    <para>The Eval element allows the execution of a valid snippet of Java
    code - as long as it evaluates to a boolean (do not end it with a
    semi-colon, as it is just a fragment) - this can include calling a
    function. The Eval is less efficient than the columns, as the rule engine
    has to evaluate it each time, but it is a "catch all" feature for when you
    can express what you need to do with Column constraints.</para>
  </section>

  <section>
    <title>Legacy Drools 2.x XML rule format</title>
    <para>The Drools 2.x legacy XML format is no longer supported by Drools XML parser</para>
  </section>

  <section>
    <title>Automatic transforming between formats (XML and DRL)</title>

    <para>Drools comes with some utility classes to transform between formats.
    This works by parsing the rules from the source format into the AST, and
    then "dumping" out to the appropriate target format. This allows you, for
    example, to write rules in DRL, and when needed, export to XML if
    necessary at some point in the future.</para>

    <para>The classes to look at if you need to do this are: <programlisting>XmlDumper - for exporting XML.
DrlDumper - for exporting DRL.
DrlParser - reading DRL.
XmlPackageReader - reading XML.
</programlisting> Using combinations of the above, you can convert between any
    format (including round trip). Note that DSLs will not be preserved (from
    DRLs that are using a DSL) - but they will be able to be converted.</para>

<para>Feel free to make use of XSLT to provide all sorts of possibilities
  for XML, XSLT and its ilk are what make XML powerful.</para>

  </section>

</section>
