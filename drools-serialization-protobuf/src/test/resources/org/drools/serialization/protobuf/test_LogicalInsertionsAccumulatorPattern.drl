/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.drools.compiler.test;

import java.lang.Integer;
import java.lang.Float;
import java.lang.Double;
import java.lang.Short;
import java.lang.String;
import org.drools.compiler.CheeseEqual;

global java.lang.String ga;
global java.lang.String gb;
global java.lang.Short gs;

rule "assert-item"
    when
        i : Integer()
    then
        insertLogical(new Double(2.0));
    System.out.println( kcontext.getRule().getName() );
end

rule "kickstart-accumulation"
    when
        i : Integer()
    then
        insertLogical(new Float(1.0));
        System.out.println( kcontext.getRule().getName() );
end

rule "item qualifies"
    when
        d : Double()
        f : Float()
    then
        //assert(new Short((short)3));
        insert(gs);
        insertLogical(new CheeseEqual(ga, 4));
        System.out.println( kcontext.getRule().getName() );
end

rule "accumulate item"
    when
        f : Float()
        s : Short()
        c : CheeseEqual(type == (ga), price == 4)
        not CheeseEqual(type == (gb), price == 5)
    then
        //update(f);
        insert(new CheeseEqual(gb, 5));
        System.out.println( kcontext.getRule().getName() );
end

rule "clean-up-1"
    when
        s : Short()
        not Float()
    then
        delete(s);
        System.out.println( kcontext.getRule().getName() );
end

rule "clean-up-2"
    when
        c : CheeseEqual(type == (gb), price == 5)
        not Float()
    then
        delete(c);
        System.out.println( kcontext.getRule().getName() );
end
