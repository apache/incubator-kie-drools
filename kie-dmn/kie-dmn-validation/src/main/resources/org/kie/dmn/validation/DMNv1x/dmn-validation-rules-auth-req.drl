/*
 * Copyright 2017 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.kie.dmn.validation.DMNv1x;

import org.kie.dmn.model.api.*;
import org.kie.dmn.api.core.DMNMessage;
import org.kie.dmn.core.impl.DMNMessageImpl;
import org.kie.dmn.core.util.MsgUtil;
import org.kie.dmn.feel.lang.types.BuiltInType;
import org.kie.dmn.feel.parser.feel11.FEELParser;
import org.kie.dmn.feel.runtime.events.SyntaxErrorEvent;
import org.kie.dmn.api.feel.runtime.events.FEELEvent;
import org.kie.dmn.core.util.Msg;

import function org.kie.dmn.validation.ValidatorUtil.rightOfHash;

global org.kie.dmn.validation.MessageReporter reporter;

rule AUTHREQ_DEP_REQ_AUTH_NOT_KNOWLEDGESOURCE
when
  $authReq : AuthorityRequirement(requiredAuthority != null,
                                  $elemRef: requiredAuthority,
                                  $targetId : rightOfHash(requiredAuthority.href))
  DMNElement(id == $targetId, !(this instanceof KnowledgeSource))
then
  reporter.report(DMNMessage.Severity.ERROR, $elemRef, Msg.REQ_DEP_INVALID_TYPE, $targetId, $authReq.getIdentifierString());
end

rule AUTHREQ_DEP_REQ_DEC_NOT_DECISION
when
  $authReq : AuthorityRequirement(requiredDecision != null,
                                  $elemRef: requiredDecision,
                                  $targetId: rightOfHash(requiredDecision.href))
  DMNElement(id == $targetId, !(this instanceof Decision))
then
  reporter.report(DMNMessage.Severity.ERROR, $elemRef , Msg.REQ_DEP_INVALID_TYPE, $targetId, $authReq.getIdentifierString());
end

rule AUTHREQ_DEP_REQ_INPUT_NOT_INPUT
when
  $authReq : AuthorityRequirement(requiredInput != null,
                                  $elemRef: requiredInput,
                                  $targetId: rightOfHash( requiredInput.href))
  DMNElement(id == $targetId, !(this instanceof InputData))
then
  reporter.report(DMNMessage.Severity.ERROR, $elemRef , Msg.REQ_DEP_INVALID_TYPE, $targetId, $authReq.getIdentifierString());
end
