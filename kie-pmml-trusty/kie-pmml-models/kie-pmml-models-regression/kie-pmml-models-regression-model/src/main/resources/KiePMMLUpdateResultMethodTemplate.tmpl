package org.kie.pmml.models.regression.evaluator;


import java.util.concurrent.atomic.AtomicReference;

import org.apache.commons.math3.distribution.NormalDistribution;


public class KiePMMLUpdateResultMethodTemplate {


    protected void updateSOFTMAXResult(final AtomicReference<Double> toUpdate) {
        toUpdate.updateAndGet(y -> 1.0 / (1.0 + Math.exp(-y)));
    }

    protected void updateLOGITResult(final AtomicReference<Double> toUpdate) {
        toUpdate.updateAndGet(y -> 1.0 / (1.0 + Math.exp(-y)));
    }

    protected void updateEXPResult(final AtomicReference<Double> toUpdate) {
        toUpdate.updateAndGet(Math::exp);
    }

    protected void updatePROBITResult(final AtomicReference<Double> toUpdate) {
        toUpdate.updateAndGet(y -> new NormalDistribution().cumulativeProbability(y));
    }

    protected void updateCLOGLOGResult(final AtomicReference<Double> toUpdate) {
        toUpdate.updateAndGet(y -> 1.0 - Math.exp(-Math.exp(y)));
    }

    protected void updateCAUCHITResult(final AtomicReference<Double> toUpdate) {
        toUpdate.updateAndGet(y -> 0.5 + (1 / Math.PI) * Math.atan(y));
    }

    protected void updateNONEResult(final AtomicReference<Double> toUpdate) {
        // NO OP
    }
}
