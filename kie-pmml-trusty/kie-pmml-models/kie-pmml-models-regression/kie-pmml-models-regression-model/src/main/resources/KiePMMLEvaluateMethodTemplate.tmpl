package org.kie.pmml.models.regression.model;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;


public class KiePMMLEvaluateMethodTemplate {

    private double evaluateNumericWithExponent(double input) {
        double coefficient = 5;
        double exponent = 2;
        // Considering exponent because it is != 1
        return Math.pow(input, exponent) * coefficient;
    }

    private double evaluateNumericWithoutExponent(double input) {
        double coefficient = 1;
        // Ignoring exponent because it is 1
        return input * coefficient;
    }

    private double evaluateCategorical(Object input) {
//        if (Objects.equals("x", input)) {
//            return -3;
//        } else if (Objects.equals("y", input)) {
//            return 3;
//        } else {
//            return 0.0;
//        }
    }

    private double evaluatePredictor(Map<String, Object> resultMap) {
        final AtomicReference<Double> result = new AtomicReference<>(1.0);
        List<String> fieldRefs = Arrays.asList("fld1", "fld2");
        for (String key : resultMap.keySet()) {
            if (fieldRefs.contains(key)) {
                result.set(result.get() * (Double)resultMap.get(key));
            }
        }
        double coefficient = 0.4;
        return result.get() * coefficient;
    }
}
