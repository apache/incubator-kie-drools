/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


TestCase "Join Node unification test case"

import org.drools.core.test.model.Person;

Setup
    ObjectTypeNode:
        otnLeft1, org.drools.core.base.DroolsQueryImpl;
    LeftInputAdapterNode:
        lian0, otnLeft1;
    ObjectTypeNode:
        otnRight1, Person;
    ObjectTypeNode:
        otnRight2, Person;
    Binding:
         v, 0, org.drools.core.base.DroolsQueryImpl, [0], java.lang.Integer;
         p1, 1, Person, age;
    JoinNode:
        join1, lian0, otnRight1;
        name, :=,v;
    JoinNode:
        join2, join1, otnRight2;
        age, !=, p1;        
    Facts:
        new org.drools.core.base.DroolsQueryImpl( "x", [org.kie.api.runtime.rule.Variable.v], null, true),
        new Person('bobba', 36);

Test "Assert right then left"
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1];
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];     
  
Test "Assert right then left then modify right"
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1];
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];  
   /** trigger modify Person, but don't actually change anything */
    modify:
        otnRight1, [h1]; 
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];            
        
Test "Assert right then left then modify left"
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1];
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];  
   /** trigger modify Person, but don't actually change anything */
    modify:
        otnLeft1, [h0]; 
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];          
                        
            
Test "Assert left then right"
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];  
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1]; 
    join2:
        leftMemory, [[h0, h1]];
        
Test "Assert left then right with right modify"
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];  
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1]; 
    join2:
        leftMemory, [[h0, h1]];        
   /** trigger modify Person, but don't actually change anything */
    modify:
        otnRight1, [h1]; 
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];        
        
Test "Assert left then right with left modify"
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];  
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1]; 
    join2:
        leftMemory, [[h0, h1]];        
   /** trigger modify Person, but don't actually change anything */
    modify:
        otnLeft1, [h0]; 
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];              
