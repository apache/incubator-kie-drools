import org.jenkinsci.plugins.workflow.libs.Library

@Library('jenkins-pipeline-shared-libraries')_

// Deploy jobs
DROOLS_DEPLOY = 'drools.weekly-deploy'
// KIE_JPMML_INTEGRATION_DEPLOY = 'kie-jpmml-integration.build-and-deploy' // Commented as not migrated for now

// Map of executed jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

FAILED_STAGES = [:]
UNSTABLE_STAGES = [:]

// Should be multibranch pipeline
pipeline {
    agent {
        label util.avoidFaultyNodes('ubuntu')
    }

    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    environment {
        DROOLS_CI_EMAIL = credentials("${JENKINS_EMAIL_CREDS_ID}")

        // Use branch name in weekly tag as we may have parallel main and release branch builds
        WEEKLY_TAG = """${getBuildBranch()}-${sh(
                returnStdout: true,
                script: 'date -u "+%Y-%m-%d"'
            ).trim()}"""
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "weekly tag is ${env.WEEKLY_TAG}"

                    currentBuild.displayName = env.WEEKLY_TAG
                }
            }
        }
        stage('Build & Deploy Drools') {
            steps {
                script {
                    def buildParams = getDefaultBuildParams()
                    addSkipTestsParam(buildParams)
                    addSkipIntegrationTestsParam(buildParams)

                    buildJob(DROOLS_DEPLOY, buildParams)
                }
            }
            post {
                failure {
                    addFailedStage(DROOLS_DEPLOY)
                }
            }
        }
    }
    post {
        unsuccessful {
            sendPipelineErrorNotification()
        }
    }
}

def buildJob(String jobName, List buildParams, String jobKey = jobName) {
    echo "[${jobKey}] Build ${jobName} with params ${buildParams}"

    def job = build(job: "${jobName}", wait: true, parameters: buildParams, propagate: false)
    JOBS[jobKey] = job

    // Set Unstable if job did not succeed
    if (!isJobSucceeded(jobKey)) {
        addUnstableStage(jobKey)
        unstable("Job ${jobName} finished with result ${job.result}")
    }
    return job
}

def getJob(String jobKey) {
    return JOBS[jobKey]
}

String getJobUrl(String jobKey) {
    echo "getJobUrl for ${jobKey}"
    return getJob(jobKey)?.absoluteUrl ?: ''
}

boolean isJobSucceeded(String jobKey) {
    return getJob(jobKey)?.result == 'SUCCESS'
}

void addFailedStage(String jobKey = '') {
    FAILED_STAGES.put("${env.STAGE_NAME}", jobKey)
}
void addUnstableStage(String jobKey = '') {
    UNSTABLE_STAGES.put("${env.STAGE_NAME}", jobKey)
}

void sendPipelineErrorNotification() {
    String bodyMsg = "Kogito weekly job #${env.BUILD_NUMBER} was: ${currentBuild.currentResult}"

    paramsStr = ''
    if (params.SKIP_TESTS) {
        paramsStr += '\n- Tests skipped'
    }
    bodyMsg += paramsStr ? "\n\nConfiguration:${paramsStr}" : '\n'

    if (FAILED_STAGES.size() > 0) {
        bodyMsg += '\nFailed stages: \n- '
        bodyMsg += FAILED_STAGES.collect { "${it.key} => ${getJobUrl(it.value)}" }.join('\n- ')
    }
    bodyMsg += '\n'
    if (UNSTABLE_STAGES.size() > 0) {
        bodyMsg += '\nUnstable stages: \n- '
        bodyMsg += UNSTABLE_STAGES.collect { "${it.key} => ${getJobUrl(it.value)}" }.join('\n- ')
    }
    bodyMsg += '\n'
    bodyMsg += "\nPlease look here: ${env.BUILD_URL}"
    emailext body: bodyMsg, subject: "[${getBuildBranch()}][d] Full Pipeline",
                to: env.DROOLS_CI_EMAIL
}

List getDefaultBuildParams() {
    List params = []
    addStringParam(params, 'DISPLAY_NAME', "${env.WEEKLY_TAG}")
    addStringParam(params, 'GIT_CHECKOUT_DATETIME', getCheckoutDatetime())
    addBooleanParam(params, 'SEND_NOTIFICATION', true)

    return params
}

void addSkipTestsParam(buildParams) {
    addBooleanParam(buildParams, 'SKIP_TESTS', params.SKIP_TESTS)
}

void addSkipIntegrationTestsParam(buildParams) {
    addBooleanParam(buildParams, 'SKIP_INTEGRATION_TESTS', params.SKIP_TESTS)
}

void addStringParam(List buildParams, String key, String value) {
    buildParams.add(string(name: key, value: value))
}

void addBooleanParam(List buildParams, String key, boolean value) {
    buildParams.add(booleanParam(name: key, value: value))
}

String getBuildBranch() {
    return env.GIT_BRANCH_NAME
}

String getCurrentDate() {
    return sh(returnStdout: true, script: 'date -u "+%Y-%m-%d"').trim()
}

String getCheckoutDatetime() {
    return getCurrentDate() + ' 02:00' // Cut-off 02:00AM
}
