/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.drools.compiler.test;

import org.drools.traits.core.factmodel.Entity;
import org.drools.base.factmodel.traits.Thing;
import org.drools.base.factmodel.traits.*;
import org.drools.traits.core.factmodel.*;

global java.util.List list;

declare trait Student
    school : String
end

declare trait Worker
    wage : double
end

declare Imp
    @Traitable
    name : String
    school : String
end



rule "Init"
when
then
    Imp core = new Imp( );
    insert( core );
end


rule "Trait1"
no-loop
when
    $core: Imp( this not isA Thing )
then
    Student s = don( $core, Student.class );
    list.add( "Student" );
end



rule "Trait2"
when
    $s : Student( this not isA Worker )
    String( this == "hire" )
then
    don( $s, Worker.class );
    list.add( "Worker" );
end


rule "Conflict of interest"
when
    $w : Worker( this isA Student )
    String( this == "check" )
then
    shed( $w, Student.class );
end


rule "Conflict resolved"
when
    $w : Worker( this not isA Student )
then
    list.add( "Conflict" );
    shed( $w, Worker.class );
end


rule "Nothing Left"
when
    $t : Thing( this not isA Student, this not isA Worker )
then
    list.add( "Nothing" );
end
