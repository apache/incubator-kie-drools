/*
 * Copyright 2020 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kie.pmml;

import java.util.function.BinaryOperator;

public class KiePMMLOperatorFunctionTemplate {

    protected BinaryOperator<Boolean> getInnerBinaryOperatorOR() {
         return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean || aBoolean2 : aBoolean2;
    }

    protected BinaryOperator<Boolean> getInnerBinaryOperatorAND() {
         return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean && aBoolean2 : aBoolean2;
    }

    protected BinaryOperator<Boolean> getInnerBinaryOperatorXOR() {
         return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean ^ aBoolean2 : aBoolean2;
    }

    protected BinaryOperator<Boolean> getInnerBinaryOperatorSURROGATE() {
        return (aBoolean, aBoolean2) -> aBoolean;
    }

    protected BinaryOperator<Boolean> getInnerBinaryOperator() {
        return (aBoolean, aBoolean2) -> aBoolean;
    }
}
