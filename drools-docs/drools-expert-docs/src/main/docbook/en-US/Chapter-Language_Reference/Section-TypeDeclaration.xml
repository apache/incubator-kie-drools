<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Type Declaration</title>

  <figure>
    <title>meta_data</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Rule_Language/meta_data.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <figure>
    <title>type_declaration</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center"
                   fileref="images/Chapter-Rule_Language/type_declaration.png"
                   format="PNG" scalefit="1"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <para>Type declarations have two main goals in the rules engine: to allow
  the declaration of new types, and to allow the declaration of metadata for
  types.</para>

  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Declaring new types:</emphasis> Drools works
      out of the box with plain Java objects as facts. Sometimes, however,
      users may want to define the model directly to the rules engine, without
      worrying about creating models in a lower level language like Java. At
      other times, there is a domain model already built, but eventually the
      user wants or needs to complement this model with additional entities
      that are used mainly during the reasoning process.</para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">Declaring metadata:</emphasis> facts may
      have meta information associated to them. Examples of meta information
      include any kind of data that is not represented by the fact attributes
      and is consistent among all instances of that fact type. This meta
      information may be queried at runtime by the engine and used in the
      reasoning process.</para>
    </listitem>
  </itemizedlist>

  <section>
    <title>Declaring New Types</title>

    <para>To declare a new type, all you need to do is use the keyword
    <literal>declare</literal>, followed by the list of fields, and the
    keyword <literal>end</literal>.</para>

    <example>
      <title>Declaring a new fact type: Address</title>

      <programlisting><emphasis role="bold">declare</emphasis> Address
   number : int
   streetName : String
   city : String
<emphasis role="bold">end</emphasis>
</programlisting>
    </example>

    <para>The previous example declares a new fact type called
    <code>Address</code>. This fact type will have three attributes:
    <code>number</code>, <code>streetName</code> and <code>city</code>. Each
    attribute has a type that can be any valid Java type, including any other
    class created by the user or even other fact types previously
    declared.</para>

    <para>For instance, we may want to declare another fact type
    <code>Person</code>:</para>

    <example>
      <title>declaring a new fact type: Person</title>

      <programlisting><emphasis role="bold">declare</emphasis> Person
    name : String
    dateOfBirth : java.util.Date
    address : Address
<emphasis role="bold">end</emphasis>
</programlisting>
    </example>

    <para>As we can see on the previous example, <code>dateOfBirth</code> is
    of type <code>java.util.Date</code>, from the Java API, while
    <code>address</code> is of the previously defined fact type
    Address.</para>

    <para>You may avoid having to write the fully qualified name of a class
    every time you write it by using the <literal>import</literal> clause, as
    previously discussed.</para>

    <example>
      <title>Avoiding the need to use fully qualified class names by using
      import</title>

      <programlisting><emphasis role="bold">import</emphasis> java.util.Date

<emphasis role="bold">declare</emphasis> Person
    name : String
    dateOfBirth : Date
    address : Address
<emphasis role="bold">end</emphasis></programlisting>
    </example>

    <para>When you declare a new fact type, Drools will, at compile time,
    generate bytecode that implements a Java class representing the fact type.
    The generated Java class will be a one-to-one Java Bean mapping of the
    type definition. So, for the previous example, the generated Java class
    would be:</para>

    <example>
      <title>generated Java class for the previous Person fact type
      declaration</title>

      <programlisting language="java">public class Person implements Serializable {
    private String name;
    private java.util.Date dateOfBirth;
    private Address address;

    // empty constructor
    public Person() {...}

    // constructor with all fields 
    public Person( String name, Date dateOfBirth, Address address ) {...}

    // if keys are defined, constructor with keys
    public Person( ...keys... ) {...}

    // getters and setters
    // equals/hashCode
    // toString
}
</programlisting>
    </example>

    <para>Since the generated class is a simple Java class, it can be used
    transparently in the rules, like any other fact.</para>

    <example>
      <title>Using the declared types in rules</title>

      <programlisting><emphasis role="bold">rule</emphasis> "Using a declared Type"
<emphasis role="bold">when</emphasis> 
    $p : Person( name == "Bob" )
<emphasis role="bold">then</emphasis>
    <emphasis>// Insert Mark, who is Bob's mate.</emphasis>
    Person mark = new Person();
    mark.setName("Mark");
    insert( mark );
<emphasis role="bold">end</emphasis>
</programlisting>
    </example>
  </section>

  <section>
    <title>Declaring Metadata</title>

    <para>Metadata may be assigned to several different constructions in
    Drools: fact types, fact attributes and rules. Drools uses the at sign
    ('@') to introduce metadata, and it always uses the form:</para>

    <programlisting>@<emphasis>metadata_key</emphasis>( <emphasis>metadata_value</emphasis> )</programlisting>

    <para>The parenthesized <emphasis>metadata_value</emphasis> is
    optional.</para>

    <para>For instance, if you want to declare a metadata attribute like
    <code>author</code>, whose value is <emphasis>Bob</emphasis>, you could
    simply write:</para>

    <example>
      <title>Declaring a metadata attribute</title>

      <programlisting>@author( Bob )</programlisting>
    </example>

    <para>Drools allows the declaration of any arbitrary metadata attribute,
    but some will have special meaning to the engine, while others are simply
    available for querying at runtime. Drools allows the declaration of
    metadata both for fact types and for fact attributes. Any metadata that is
    declared before the attributes of a fact type are assigned to the fact
    type, while metadata declared after an attribute are assigned to that
    particular attribute.</para>

    <example>
      <title>Declaring metadata attributes for fact types and
      attributes</title>

      <programlisting><emphasis role="bold">import</emphasis> java.util.Date

<emphasis role="bold">declare</emphasis> Person
    <emphasis>@author</emphasis>( Bob )
    <emphasis>@dateOfCreation</emphasis>( 01-Feb-2009 )

    name : String <emphasis>@key @maxLength</emphasis>( 30 )
    dateOfBirth : Date 
    address : Address
<emphasis role="bold">end</emphasis></programlisting>
    </example>

    <para>In the previous example, there are two metadata items declared for
    the fact type (<code>@author</code> and <code>@dateOfCreation</code>) and
    two more defined for the name attribute (<code>@key</code> and
    <code>@maxLength</code>). Please note that the <code>@key</code> metadata
    has no required value, and so the parentheses and the value were
    omitted.:</para>

    <para>@position can be used to declare the position of a field, overriding
    the default declared order. This is used for positional constraints in
    patterns.</para>

    <programlisting>declare Cheese
    name : String @position(1)
    shop : String @position(2)
    price : int @position(0)
end
</programlisting>

    <section>
      <title>Predefined class level annotations</title>

      <para>Some annotations have predefined semantics that are interpreted by
      the engine. The following is a list of some of these predefined
      annotations and their meaning.</para>

      <section>
        <title>@role( &lt;fact | event&gt; )</title>

        <para>See Drools Fusion documentation for details.</para>
      </section>

      <section>
        <title>@typesafe( &lt;boolean&gt; )</title>

        <para>By default all type declarations are compiled with type safety
        enabled; @typesafe( false ) provides a means to override this
        behaviour by permitting a fall-back, to type unsafe evaluation where
        all constraints are generated as MVEL constraints and executed
        dynamically. This can be important when dealing with collections that
        do not have any generics or mixed type collections.</para>
      </section>

      <section>
        <title>@timestamp( &lt;attribute name&gt; )</title>

        <para>See Drools Fusion documentation for details.</para>
      </section>

      <section>
        <title>@duration( &lt;attribute name&gt; )</title>

        <para>See Drools Fusion documentation for details.</para>
      </section>

      <section>
        <title>@expires( &lt;time interval&gt; )</title>

        <para>See Drools Fusion documentation for details.</para>
      </section>

      <section>
        <title>@propertyChangeSupport</title>

        <para>Facts that implement support for property changes as defined in
        the Javabean(tm) spec, now can be annotated so that the engine
        register itself to listen for changes on fact properties. The boolean
        parameter that was used in the insert() method in the Drools 4 API is
        deprecated and does not exist in the drools-api module.</para>

        <example>
          <title>@propertyChangeSupport</title>

          <programlisting>declare Person
  @propertyChangeSupport
end</programlisting>
        </example>
      </section>
    </section>

    <section>
      <title>Predefined attribute level annotations</title>

      <para>As noted before, Drools also supports annotations in type
      attributes. Here is a list of predefined attribute annotations.</para>

      <section>
        <title>@key</title>

        <para>Declaring an attribute as a key attribute has 2 major effects on
        generated types:</para>

        <para><orderedlist>
            <listitem>
              <para>The attribute will be used as a key identifier for the
              type, and as so, the generated class will implement the equals()
              and hashCode() methods taking the attribute into account when
              comparing instances of this type.</para>
            </listitem>

            <listitem>
              <para>Drools will generate a constructor using all the key
              attributes as parameters.</para>
            </listitem>
          </orderedlist>For instance:</para>

        <example>
          <title>example of @key declarations for a type</title>

          <programlisting>declare Person
    firstName : String @key
    lastName : String @key
    age : int
end
</programlisting>
        </example>

        <para>For the previous example, Drools will generate equals() and
        hashCode() methods that will check the firstName and lastName
        attributes to determine if two instances of Person are equal to each
        other, but will not check the age attribute. It will also generate a
        constructutor taking firstName and lastName as parameters, allowing
        one to create instances with a code like this:</para>

        <example>
          <title>creating an instance using the key constructor</title>

          <programlisting>Person person = new Person( "John", "Doe" );</programlisting>
        </example>
      </section>

      <section>
        <title>@position</title>

        <para>Patterns support positional arguments on type
        declarations.</para>

        <para>Positional arguments are ones where you don't need to specify
        the field name, as the position maps to a known named field. i.e.
        Person( name == "mark" ) can be rewritten as Person( "mark"; ). The
        semicolon ';' is important so that the engine knows that everything
        before it is a positional argument. Otherwise we might assume it was a
        boolean expression, which is how it could be interpretted after the
        semicolon. You can mix positional and named arguments on a pattern by
        using the semicolon ';' to separate them. Any variables used in a
        positional that have not yet been bound will be bound to the field
        that maps to that position.</para>

        <programlisting>declare Cheese
    name : String
    shop : String
    price : int
end
</programlisting>

        <para>The default order is the declared order, but this can be
        overiden using @position</para>

        <programlisting>declare Cheese
    name : String @position(1)
    shop : String @position(2)
    price : int @position(0)
end
</programlisting>

        <para>The @Position annotation, in the org.drools.definition.type
        package, can be used to annotate original pojos on the classpath.
        Currently only fields on classes can be annotated. Inheritence of
        classes is supported, but not interfaces of methods yet.</para>

        <para>Example patterns, with two constraints and a binding. Remember
        semicolon ';' is used to differentiate the positional section from the
        named argument section. Variables and literals and expressions using
        just literals are supported in posional arguments, but not
        variables.</para>

        <programlisting>
Cheese( "stilton", "Cheese Shop", p; )
Cheese( "stilton", "Cheese Shop"; p : price )
Cheese( "stilton"; shop == "Cheese Shop", p : price )
Cheese( name == "stilton"; shop == "Cheese Shop", p : price )
</programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>Declaring Metadata for Existing Types</title>

    <para>Drools allows the declaration of metadata attributes for existing
    types in the same way as when declaring metadata attributes for new fact
    types. The only difference is that there are no fields in that
    declaration.</para>

    <para>For instance, if there is a class org.drools.examples.Person, and
    one wants to declare metadata for it, it's possible to write the following
    code:</para>

    <example>
      <title>Declaring metadata for an existing type</title>

      <programlisting><emphasis role="bold">import</emphasis> org.drools.examples.Person

<emphasis role="bold">declare</emphasis> Person
    <emphasis>@author</emphasis>( Bob )
    <emphasis>@dateOfCreation</emphasis>( 01-Feb-2009 )
<emphasis role="bold">end</emphasis>
</programlisting>
    </example>

    <para>Instead of using the import, it is also possible to reference the
    class by its fully qualified name, but since the class will also be
    referenced in the rules, it is usually shorter to add the import and use
    the short class name everywhere.</para>

    <example>
      <title>Declaring metadata using the fully qualified class name</title>

      <programlisting><emphasis role="bold">declare</emphasis> org.drools.examples.Person
    <emphasis>@author</emphasis>( Bob )
    <emphasis>@dateOfCreation</emphasis>( 01-Feb-2009 )
<emphasis role="bold">end</emphasis></programlisting>
    </example>
  </section>

  <section>
    <title>Parameterized constructors for declared types</title>

    <para>Generate constructors with parameters for declared types.</para>

    <para>Example: for a declared type like the following:</para>

    <programlisting>declare Person
    firstName : String @key
    lastName : String @key
    age : int
end
</programlisting>

    <para>The compiler will implicitly generate 3 constructors: one without
    parameters, one with the @key fields, and one with all fields.</para>

    <programlisting>Person() // parameterless constructor
Person( String firstName, String lastName )
Person( String firstName, String lastName, int age )</programlisting>
  </section>

  <section>
    <title>Non Typesafe Classes</title>

    <para>@typesafe( &lt;boolean&gt;) has been added to type declarations. By
    default all type declarations are compiled with type safety enabled;
    @typesafe( false ) provides a means to override this behaviour by
    permitting a fall-back, to type unsafe evaluation where all constraints
    are generated as MVEL constraints and executed dynamically. This can be
    important when dealing with collections that do not have any generics or
    mixed type collections.</para>
  </section>

  <section>
    <title>Accessing Declared Types from the Application Code</title>

    <para>Declared types are usually used inside rules files, while Java
    models are used when sharing the model between rules and applications.
    Although, sometimes, the application may need to access and handle facts
    from the declared types, especially when the application is wrapping the
    rules engine and providing higher level, domain specific user interfaces
    for rules management.</para>

    <para>In such cases, the generated classes can be handled as usual with
    the Java Reflection API, but, as we know, that usually requires a lot of
    work for small results. Therefore, Drools provides a simplified API for
    the most common fact handling the application may want to do.</para>

    <para>The first important thing to realize is that a declared fact will
    belong to the package where it was declared. So, for instance, in the
    example below, <code>Person</code> will belong to the
    <code>org.drools.examples</code> package, and so the fully qualified name
    of the generated class will be
    <code>org.drools.examples.Person</code>.</para>

    <example>
      <title>Declaring a type in the org.drools.examples package</title>

      <programlisting><emphasis role="bold">package</emphasis> org.drools.examples

<emphasis role="bold">import</emphasis> java.util.Date

<emphasis role="bold">declare</emphasis> Person
    name : String
    dateOfBirth : Date
    address : Address
<emphasis role="bold">end</emphasis></programlisting>
    </example>

    <para>Declared types, as discussed previously, are generated at knowledge
    base compilation time, i.e., the application will only have access to them
    at application run time. Therefore, these classes are not available for
    direct reference from the application.</para>

    <para>Drools then provides an interface through which users can handle
    declared types from the application code:
    <code>org.drools.definition.type.FactType</code>. Through this interface,
    the user can instantiate, read and write fields in the declared fact
    types.</para>

    <example>
      <title>Handling declared fact types through the API</title>

      <programlisting>// get a reference to a knowledge base with a declared type:
KnowledgeBase kbase = ...

// get the declared FactType
FactType personType = kbase.getFactType( "org.drools.examples",
                                         "Person" );

// handle the type as necessary:
// create instances:
Object bob = personType.newInstance();

// set attributes values
personType.set( bob,
                "name",
                "Bob" );
personType.set( bob,
                "age",
                42 );

// insert fact into a session
StatefulKnowledgeSession ksession = ...
ksession.insert( bob );
ksession.fireAllRules();

// read attributes
String name = personType.get( bob, "name" );
int age = personType.get( bob, "age" );

</programlisting>
    </example>

    <para>The API also includes other helpful methods, like setting all the
    attributes at once, reading values from a Map, or reading all attributes
    at once, into a Map.</para>

    <para>Although the API is similar to Java reflection (yet much simpler to
    use), it does not use reflection underneath, relying on much more
    performant accessors implemented with generated bytecode.</para>
  </section>

  <section>
    <title>Type Declaration 'extends'</title>

    <para>Type declarations now support 'extends' keyword for
    inheritance</para>

    <para>In order to extend a type declared in Java by a DRL declared
    subtype, repeat the supertype in a declare statement without any
    fields.</para>

    <programlisting>import org.people.Person

declare Person
end

declare Student extends Person
    school : String
end

declare LongTermStudent extends Student
    years : int
    course : String
end</programlisting>
  </section>
</section>
