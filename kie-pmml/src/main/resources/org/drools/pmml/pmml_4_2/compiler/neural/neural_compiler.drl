/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.drools.pmml.pmml_4_2.compiler;

import org.dmg.pmml.pmml_4_2.descr.*;
import java.util.*;
dialect "mvel"

global org.drools.pmml.pmml_4_2.PMML4Helper utils;
global StringBuilder theory;
global org.mvel2.templates.TemplateRegistry registry;


rule "setupNNs"
when
   NeuralNetwork( $name : modelName )
   $stat : ModelStat( neuralNetwork == false )
then
    HashMap map = utils.container;
        map.put( "name", utils.compactUpperCase( $name ) );
        map.put( "type","NeuralNetwork" );
    utils.applyTemplate( "modelMark.drlt", null, registry, map, theory );

    utils.applyTemplate( "neuralBeans.drlt", utils, registry, null, theory );

    utils.applyTemplate( "neuralLinkSynapses.drlt", utils, registry, map, theory );

    modify ( $stat ) {
        setNeuralNetwork( true );
    }
end



rule "visitNeuralNetwork_context"
salience -9
when
    $net : NeuralNetwork( $name : modelName )
then
    utils.context = utils.compactUpperCase( $name );
end


rule "Neural_InputFieldGeneration"
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName )
    NeuralInputs( this memberOf $info, $nis : neuralInputs )
    $ni : NeuralInput( this memberOf $nis, $fld : derivedField, $id : id )
then
    String name = utils.compactAsJavaId( $nn + "_" + $id, true );
    $fld.setName( name );
    insertLogical( $fld );

    HashMap map = utils.container;
        map.put( "name", utils.compactUpperCase( name ) );
        map.put( "context", utils.context );
        map.put( "index", $id );
    utils.applyTemplate( "neuralWireInput.drlt", utils, registry, map, theory );
end


rule "Neural_DerivedInputFieldOverride"
dialect "mvel"
when
    NeuralInput( derivedField != null, $fld : derivedField.name != null )
then
    HashMap map = utils.container;
        map.put( "name", utils.compactUpperCase( $fld ) );
        map.put( "context", utils.context );
    utils.applyTemplate( "updateIOField.drlt", utils, registry, map, theory );
end

rule "Neural_RefInputFieldOverride"
dialect "mvel"
when
    NeuralInput( derivedField != null, $fld :derivedField.fieldRef != null )
then
    HashMap map = utils.container;
        map.put( "name", utils.compactUpperCase( $fld.field ) );
        map.put( "context", utils.context);
    utils.applyTemplate( "updateIOField.drlt", utils, registry, map, theory );
end




rule "SetDefaultActivation"
salience 100
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs, $act : activationFunction )
    $nl : NeuralLayer( this memberOf $info, activationFunction == null )
then
    modify ( $nl ) {
        setActivationFunction( $act );
    }
end

rule "SetDefaultThreshold"
salience 100
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs, $thold : threshold )
    $nl : NeuralLayer( this memberOf $info, threshold == null )
then
    modify ( $nl ) {
        setThreshold( $thold );
    }
end


rule "SetDefaultBias"
salience 100
when
    $n : Neuron( bias == null )
then
    modify ( $n ) {
        setBias( 0.0 );
    }
end


rule "SetDefaultNormalization"
salience 100
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs,
                    $norm : normalizationMethod != null && normalizationMethod != NNNORMALIZATIONMETHOD.NONE )
    $nl : NeuralLayer( this memberOf $info, normalizationMethod == null)
then
    modify ( $nl ) {
        setNormalizationMethod( $norm );
    }
end

rule "Build Synapses"
salience -10
when
    $n : Neuron( $links : cons, $index : id )
then
    HashMap map = utils.container;
        map.put( "model", utils.context );
        map.put( "index", $index );
        map.put( "links", $links );
    utils.applyTemplate( "neuralBuildSynapses.drlt", utils, registry, map, theory );
end


rule "Build Neurons"
salience -9
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs )
    accumulate ( $nl : NeuralLayer() from $info,
                 $layers : collectList( $nl ) )
    $layer : NeuralLayer( this memberOf $info, $neurs : neurons, $act : activationFunction != null,
                 $norm : normalizationMethod )
then
    HashMap map = utils.container;
        map.put( "model", utils.context );
        map.put( "layerIndex", $layers.indexOf( $layer ) );
        map.put( "neurs", $neurs );
        map.put( "needsNormal", $norm != null );

    utils.applyTemplate( "neuralBuildNeurons.drlt", utils, registry, map, theory );
end

rule "Neuron"
salience -9
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs )
    accumulate ( $nl : NeuralLayer() from $info,
                 $layers : collectList( $nl ) )
    $layer : NeuralLayer( $ns : neurons, $act : activationFunction != null,
                          $thold : threshold != null, $norm : normalizationMethod )
//    $n : Neuron( this memberOf $ns, $index : id, $bias : bias != null, $in : cons )
then
    //System.err.println("CREATE NEURON RULE FOR " + $index + " >> " + $act + "  " + $bias + "  " + $thold);

     HashMap map = utils.container;
        map.put( "model", utils.context );
        map.put( "layerIndex", $layers.indexOf( $layer ) );
        map.put( "needsNormal", $norm != null );
//        map.put( "index", $index );
        map.put( "actFun", $act );
//        map.put( "bias", $bias );
        map.put( "thold", $thold );
//        map.put( "inLink", $in.size() );
    utils.applyTemplate( "neuralFire.drlt", utils, registry, map, theory );
end


rule "Neural_Layer_Max_Normalization"
salience -9
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName )
    accumulate ( $nl : NeuralLayer() from $info,
                 $layers : collectList( $nl ) )
    $nl : NeuralLayer( this memberOf $info, $ns : neurons,
                 normalizationMethod != null && normalizationMethod == NNNORMALIZATIONMETHOD.SIMPLEMAX )
then
    HashMap map = utils.container;
        map.put( "model", utils.context );
        map.put( "neurons", $ns );
        map.put( "layerIndex", $layers.indexOf( $nl ) );
    utils.applyTemplate( "neuralLayerMaxNormalization.drlt", utils, registry, map, theory );
end


rule "Neural_Layer_Max_SoftNormalization"
salience -9
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName )
    accumulate ( $nl : NeuralLayer() from $info,
                 $layers : collectList( $nl ) )
    $nl : NeuralLayer( this memberOf $info, $ns : neurons,
                 normalizationMethod != null && normalizationMethod == NNNORMALIZATIONMETHOD.SOFTMAX )
then
    HashMap map = utils.container;
        map.put( "model", utils.context );
        map.put( "neurons", $ns );
        map.put( "layerIndex", $layers.indexOf( $nl ) );
    utils.applyTemplate( "neuralLayerSoftMaxNormalization.drlt", utils, registry, map, theory );
end



rule "Neural_Output_Field_Def"
salience -9
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName )
    NeuralOutputs( this memberOf $info, $outs : neuralOutputs )
    $out : NeuralOutput( $id : outputNeuron, $fld : derivedField )
then
    String name = utils.compactAsJavaId( $nn + "_" + $id, true );

    insertLogical( new TypeOfField( name, DATATYPE.DOUBLE ) );

    HashMap map = utils.container;
        map.put( "model", utils.context );
        map.put( "name", name );
        map.put( "index", $id );
    utils.applyTemplate( "neuralOutputField.drlt", utils, registry, map, theory );

    map = utils.container;
        map.put( "context", utils.context );
        map.put( "fullName", name );
        map.put( "name", name );
        map.put( "super", null );
        map.put( "type", utils.mapDatatype( DATATYPE.DOUBLE ) );
        map.put( "cyclic", false );
        map.put( "categorical", false );
        map.put( "continuous", true );
        map.put( "ordinal", false );
        map.put( "modelType", null );
        map.put( "tgtType", null );
    utils.applyTemplate( "ioTypeDeclare.drlt", utils, registry, map, theory );
    utils.applyTemplate( "updateIOField.drlt", utils, registry, map, theory );
end

/*
 rule "Neural_Output_Expose"
 salience -9
 when
     NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName)
     NeuralOutputs( this memberOf $info, $outs : neuralOutputs )
     $out : NeuralOutput( $id : outputNeuron, $fld : derivedField )
 then
     String name = utils.compactUpperCase($nn)+"_"+$id;
     insert( new QueryMarker(name,utils.context) );

     HashMap map = utils.container;
         map.put("name",name);
     utils.applyTemplate("confirm.drlt", utils, registry, map, theory);
 end
*/



rule "Neural_Output_Invert_NormContinuous"
salience -15
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName, functionName == MININGFUNCTION.REGRESSION )
    NeuralOutputs( this memberOf $info, $outs : neuralOutputs )
    $out : NeuralOutput( $id : outputNeuron, $fld : derivedField )
    $df  : DerivedField( $norm : normContinuous != null ) from $fld
    NormContinuous( $mmt : mapMissingTo, $field : field, $outl : outliers, $ls : linearNorms ) from $norm
then

    //insert( new QueryMarker(utils.compactUpperCase($field),utils.context) );

    LinearNorm orig = null;
    LinearNorm inv = null;
    NormContinuous invertedNC = new NormContinuous();
        invertedNC.setMapMissingTo( $mmt );
        invertedNC.setField( utils.compactAsJavaId( $nn + "_" + $id, true ) );
        invertedNC.setOutliers( $outl );
        for ( int j = 0; j < $ls.size(); j++ ) {
            orig = (LinearNorm) $ls.get( j );
            inv = new LinearNorm();
                inv.setNorm( orig.getOrig() );
                inv.setOrig( orig.getNorm() );
            invertedNC.getLinearNorms().add( inv );
        }

//    HashMap map = utils.container;
//        map.put("name",utils.compactUpperCase($field));
//    utils.applyTemplate("confirm.drlt", utils, registry, map, theory);

    $df.setName( $field );
    $df.setNormContinuous( invertedNC );

    insertLogical( $df );
    insertLogical( invertedNC );
end




rule "Neural_Output_Invert_NormDiscrete_asPredicate"
salience -15
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName, functionName == MININGFUNCTION.CLASSIFICATION )
    NeuralOutputs( this memberOf $info, $outs : neuralOutputs )
    $out : NeuralOutput( $id : outputNeuron, $fld : derivedField )
    $df  : DerivedField( $norm : normDiscrete != null) from $fld
    NormDiscrete( $field : field, $val : value ) from $norm
    TypeOfField( name == $field, $type : dataType )
then
    HashMap map = utils.container;
        map.put( "model", utils.context );
        map.put( "field", utils.compactUpperCase($field) );
        map.put( "label", $val );
        map.put( "type", $type );
        map.put( "target", utils.format( $type,utils.compactUpperCase( $val ) ) );
    utils.applyTemplate( "outputQueryPredicate.drlt", utils, registry, map, theory );

    map = utils.container;
        map.put( "name", utils.compactUpperCase( $field ) );
        map.put( "type", $type );
        map.put( "model", utils.context );
        map.put( "target", $val );
        map.put( "origField", utils.compactAsJavaId( $nn + "_" + $id, true ) );
    utils.applyTemplate( "predicateField.drlt", utils, registry, map, theory );
end



rule "Neural_Output_Invert_FieldRef"
salience -15
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName)
    NeuralOutputs( this memberOf $info, $outs : neuralOutputs )
    $out : NeuralOutput( $id : outputNeuron, $fld : derivedField )
    $df  : DerivedField( $ref : fieldRef != null ) from $fld
    FieldRef( $field : field ) from $ref
then

    //insert( new QueryMarker(utils.compactUpperCase($field),utils.context) );

    $df.setName( $field );
    $ref.setField( utils.compactAsJavaId( $nn + "_" + $id, true ) );

    insertLogical( $ref );
    insertLogical( $fld );
end


rule "Clean_WM"
salience -19
dialect "mvel"
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName )
    $ms : MiningSchema( this memberOf $info, $fields : miningFields )
then
    HashMap map = utils.container;
        map.put( "model", utils.context );
        map.put( "fields", $fields );
    utils.applyTemplate( "neuralClean.drlt", utils, registry, map, theory );
end


rule "Clean_WM_Pre"
salience -18
dialect "mvel"
when
    NeuralNetwork( $info : extensionsAndNeuralLayersAndNeuralInputs , $nn : modelName )
    $ms :  MiningSchema( this memberOf $info, $fields : miningFields )
    $fld : MiningField( usageType != null &&
                        ( usageType == FIELDUSAGETYPE.PREDICTED || == FIELDUSAGETYPE.TARGET || usageType == FIELDUSAGETYPE.SUPPLEMENTARY )
           ) from $fields
then
    $fields.remove( $fld );
end



rule "Neural_Cleanup"
salience -20
when
    $nn : NeuralNetwork( )
then
    utils.context = null;
    retract( $nn );
end



