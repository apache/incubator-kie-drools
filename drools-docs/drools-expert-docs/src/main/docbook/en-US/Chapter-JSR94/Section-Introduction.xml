<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Introduction</title>

  <para>
    Drools provides an implementation of the Java Rule Engine API (known
    as JSR94), which allows for support of multiple rule engines from a
    single API. JSR94 does not deal in any way with the rule language
                itself. W3C is working on the
    <ulink url="http://www.w3.org/TR/2006/WD-rif-ucr-20060323/">Rule Interchange Format (RIF)</ulink>
    and the OMG has started to work on a standard based on
    <ulink url="http://ruleml.org/">RuleML</ulink>.
    Recently Haley Systems has also proposed a rule language standard
                called RML.
  </para>

  <para>It should be remembered that the JSR94 standard represents the "least
    common denominator" in features across rule engines. This means that
                there is less functionality in the JSR94 API than in the standard
                Knowledge (Drools and jBPM) API. So, by using JSR94, you forfeit the advantage of using the
    full capabilities of the Drools Rule Engine. It is necessary to expose
    further functionality, like globals and support for DRL, DSL and XML,
    via property maps due to the very basic feature set of JSR94; this
                introduces non-portable functionality. Furthermore, as JSR94 does not
                provide a rule language, you are only solving a small fraction of the
                complexity of switching rule engines with very little gain. So, while
                we support JSR94, for those that insist on using it, we strongly
                recommend you program against the Knowledge (Drools and jBPM) API.</para>
</section>
