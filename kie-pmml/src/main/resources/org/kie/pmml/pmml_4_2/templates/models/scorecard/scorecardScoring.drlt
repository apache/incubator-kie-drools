@comment{

  Copyright 2011 Red Hat, Inc. and/or its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
}




@comment{

}

@declare{'scorecardScoring'}

rule "Score Card @{name}"
@includeNamed{ 'rule_meta.drlt'; attributes=attributes }
salience -10  // after data are stable
when
    $card : ScoreCard( $ctx : modelName )
    InitialScore( scoreCard == $ctx, $zero : value )
    accumulate(
        PartialScore( scoreCard == $ctx, $val : value, $wgt : weight ),
        $tot : @{aggregator}( $val @if{ weighted } * $wgt @end{} );
        ((Double)$tot) + $zero != $card.getScore() )
then
    modify ( $card ) {
        setScore( $zero + ((Double)$tot) );
    }
end


rule "Cumulate Code Scores"
@includeNamed{ 'rule_meta.drlt'; attributes=attributes }
salience -11
when
    $card : ScoreCard( $ctx : modelName, enableRC == true, $below : pointsBelow )
    accumulate( PartialScore( scoreCard == $ctx, $rc : reasonCode != null ),
                $set : collectSet( $rc ) )
    $code : String() from $set
    accumulate( PartialScore( scoreCard == $ctx, reasonCode == $code, $val : value, $char : characteristic )
                and
                BaselineScore( scoreCard == $ctx, characteristic == $char, $base : value ),
                // FIXME: DROOLS-1248
                $sum : sumBD( java.math.BigDecimal.valueOf( $below ? ($base - $val) : ($val - $base) ) ) )
then
//    System.out.println( "The CUMULATED score for code " + $code + " from set " + $set + " is >>> " + $sum );
    insertLogical( new CodeScore( $card, $code, $sum.doubleValue() ) );
end


rule "Detect Scorecard ReasonCode Change"
@includeNamed{ 'rule_meta.drlt'; attributes=attributes }
salience -12
when
    $sc :  ScoreCard( enableRC == true, $map : ranking )
    exists CodeScore( $c : code, score != $map.get( $c ) )
then
    insert( new ScoreRank( $sc, new java.util.LinkedHashMap() ) );
end


rule "Sort Scorecard Reason Codes"
@includeNamed{ 'rule_meta.drlt'; attributes=attributes }
salience -14
when
    $r  : ScoreRank( $sc : scoreCard, $map : rank )
    $cs : CodeScore( scoreCard == $sc, ! $map.containsKey( code ), $s : score, $c : code )
    not   CodeScore( scoreCard == $sc, ! $map.containsKey( code ), score > $s )
then
    modify ( $r ) {
        getRank().put( $c, $s );
    }
end


rule "Integrate Scorecard ReasonCode Map"
@includeNamed{ 'rule_meta.drlt'; attributes=attributes }
salience -15
when
    $s : ScoreCard( enableRC == true )
    $x : ScoreRank( scoreCard == $s, $map : rank )
   $reslt: PMML4Result( resultVariables == null || "ScoreCard" not memberOf resultVariables.keySet() ) from results
then
    retract( $x );
    modify ( $s ) {
        setRanking( $map );
    }
   $reslt.setResultCode("OK");
   $reslt.addResultVariable("ScoreCard",$s);
   update($reslt);
end
/*
rule "Add Scorecard to PMMLResult"
@includeNamed{ 'rule_meta.drlt'; attributes=attributes }
salience -16
when
   $sc: ScoreCard( )
   $reslt: PMML4Result( resultVariables == null || "ScoreCard" not memberOf resultVariables.keySet() ) from results
then
   System.out.println("Adding Scorecard to PMMLResult");
   $reslt.setResultCode("OK");
   $reslt.addResultVariable("ScoreCard",$sc);
   update($reslt);
end
*/
rule "Update Scorecard in PMMLResult"
salience -16
no-loop
when
   $reslt: PMML4Result( "Scorecard" memberOf resultVariables.keySet() ) from results
   $scold: ScoreCard() from $reslt.resultVariables["ScoreCard"]
   $sc: ScoreCard()
then
   $reslt.updateResultVariable("ScoreCard",$sc);
   update($reslt);
end


@end{}


@includeNamed{'scorecardScoring'}
