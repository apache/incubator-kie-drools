/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.kie.pmml.pmml_4_2.compiler;

import org.dmg.pmml.pmml_4_2.descr.*;
import java.util.*;

dialect "mvel"

global org.kie.pmml.pmml_4_2.PMML4Helper utils;
global StringBuilder theory;
global org.mvel2.templates.TemplateRegistry registry;


rule "Naive Bayes Root"
when
    $nbm : NaiveBayesModel()
then
    utils.applyTemplate( "naiveBayesDeclare.drlt", utils, registry, null, theory );
end

rule "visitNaiveBayes_context"
salience -9
when
    $nbm : NaiveBayesModel( $name : modelName )
then
    utils.context = utils.compactUpperCase( $name );

    HashMap map = utils.container;
        map.put( "type","NaiveBayesModel" );
        map.put( "name", utils.context );

    utils.applyTemplate( "modelMark.drlt", utils, registry, map, theory );
end

rule "visitNaiveBayes_inputs - discrete"
salience -9
when
    $nbm : NaiveBayesModel( $name : modelName, $info : extensionsAndBayesOutputsAndBayesInputs, $thold : threshold )
           BayesOutput( this memberOf $info, $tgtFld : fieldName )
           TypeOfField( $tgtFld, $type ; )

           BayesInputs( this memberOf $info, $inputs : bayesInputs )
    $bin : BayesInput( this memberOf $inputs, $fld : fieldName, $pairs : pairCounts != null && ! pairCounts.isEmpty(), $dfld : derivedField == null )
then
    utils.context = utils.compactUpperCase( $name );

    HashMap map = utils.container;
        map.put( "name", utils.context );
        map.put( "threshold", $thold );
        map.put( "field", utils.compactUpperCase( $fld ) );
        map.put( "datatype", $type );
        map.put( "pairs", $pairs );

    utils.applyTemplate( "naiveBayesBuildCounts.drlt" , utils, registry, map, theory );

    utils.applyTemplate( "naiveBayesEvalDiscrete.drlt", utils, registry, map, theory );

end

query extractDistribution( java.util.List $content, Object $dist )
    $dist := GaussianDistribution() from $content
    or
    $dist := PoissonDistribution() from $content
end


rule "visitNaiveBayes_inputs - continuous"
salience -9
when
    $nbm : NaiveBayesModel( $name : modelName, $info : extensionsAndBayesOutputsAndBayesInputs, $thold : threshold )
           BayesOutput( this memberOf $info, $tgtFld : fieldName )
           TypeOfField( $tgtFld, $type ; )

           BayesInputs( this memberOf $info, $inputs : bayesInputs )
    $bin : BayesInput( this memberOf $inputs, $fld : fieldName, $tvs : targetValueStats != null, $dfld : derivedField == null )
    $sts : java.util.Map( size == $tvs.targetValueStats.size() ) from accumulate (
                 $t : TargetValueStat( $val : value, $content : extensionsAndAnyDistributionsAndGaussianDistributions ) from $tvs.targetValueStats
                 and
                 extractDistribution( $content, $dist ; )
             ,
            init( java.util.Map map = new java.util.LinkedHashMap(); ),
            action( map.put( $val, $dist ); ),
            result( map )
        )
then
    utils.context = utils.compactUpperCase( $name );

    HashMap map = utils.container;
        map.put( "name", utils.context );
        map.put( "threshold", $thold );
        map.put( "field", utils.compactUpperCase( $fld ) );
        map.put( "datatype", $type );
        map.put( "stats", $sts );

    utils.applyTemplate( "naiveBayesBuildDistrs.drlt", utils, registry, map, theory );

    utils.applyTemplate( "naiveBayesEvalContinuous.drlt", utils, registry, map, theory );

end



rule "visitNaiveBayes_inputs_with_discretized_fields - discrete"
salience -9
when
    $nbm : NaiveBayesModel( $name : modelName, $info : extensionsAndBayesOutputsAndBayesInputs, $thold : threshold )
           BayesOutput( this memberOf $info, $tgtFld : fieldName )
           TypeOfField( $tgtFld, $type ; )

           BayesInputs( this memberOf $info, $inputs : bayesInputs )
    $bin : BayesInput( this memberOf $inputs, $pairs : pairCounts != null, $dfld : derivedField != null )
    $dfl : DerivedField( this == $dfld, $fld : name )
then
    utils.context = utils.compactUpperCase( $name );

    HashMap map = utils.container;
        map.put( "name", utils.context );
        map.put( "field", utils.compactUpperCase( $fld ) );
        map.put( "datatype", $type );
        map.put( "pairs", $pairs );

    utils.applyTemplate( "naiveBayesBuildCounts.drlt", utils, registry, map, theory );

    utils.applyTemplate( "naiveBayesEvalDiscrete.drlt", utils, registry, map, theory );

end

rule "visitNaiveBayes_inputs_with_discretized_fields - continuous"
salience -9
when
    $nbm : NaiveBayesModel( $name : modelName, $info : extensionsAndBayesOutputsAndBayesInputs, $thold : threshold )
           BayesOutput( this memberOf $info, $tgtFld : fieldName )
           TypeOfField( $tgtFld, $type ; )

           BayesInputs( this memberOf $info, $inputs : bayesInputs )
    $bin : BayesInput( this memberOf $inputs, $tvs : targetValueStats != null, $dfld : derivedField != null )
    $dfl : DerivedField( this == $dfld, $fld : name )
    $sts : java.util.Map( size == $tvs.targetValueStats.size() ) from accumulate (
                 $t : TargetValueStat( $val : value, $content : extensionsAndAnyDistributionsAndGaussianDistributions ) from $tvs.targetValueStats
                 and
                 extractDistribution( $content, $dist ; )
             ,
            init( java.util.Map map = new java.util.LinkedHashMap(); ),
            action( map.put( $val, $dist ); ),
            result( map )
        )
then
    utils.context = utils.compactUpperCase( $name );

    HashMap map = utils.container;
        map.put( "name", utils.context );
        map.put( "field", utils.compactUpperCase( $fld ) );
        map.put( "datatype", $type );
        map.put( "stats", $sts );

    utils.applyTemplate( "naiveBayesBuildDistrs.drlt", utils, registry, map, theory );

    utils.applyTemplate( "naiveBayesEvalContinuous.drlt", utils, registry, map, theory );

end



rule "visitNaiveBayes_outputs"
salience -9
when
    $nbm : NaiveBayesModel( $name : modelName, $info : extensionsAndBayesOutputsAndBayesInputs, $thold : threshold )
           BayesOutput( this memberOf $info, $fld : fieldName, $tvc : targetValueCounts )
           TypeOfField( $fld, $type ; )

then
    utils.context = utils.compactUpperCase( $name );

    HashMap map = utils.container;
        map.put( "name", utils.context );
        map.put( "threshold", $thold );
        map.put( "field", utils.compactUpperCase( $fld ) );
        map.put( "datatype", $type );
        map.put( "tvc", $tvc );
    utils.applyTemplate( "naiveBayesBuildOuts.drlt", utils, registry, map, theory );
end



rule "NaiveBayes_Cleanup"
salience -20
when
    $nbm : NaiveBayesModel( )
then
    utils.context = null;
    retract( $nbm );
end


