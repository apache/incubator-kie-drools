/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.drools.factmodel.traits;

import org.drools.base.factmodel.traits.Trait;
import org.drools.base.factmodel.traits.Traitable;
import org.drools.base.factmodel.traits.TraitableBean;
import org.drools.base.factmodel.traits.Alias

global java.util.List list;

declare Back
@Traitable( logical=true )
end

declare Procedure
@propertyReactive
@Traitable( logical=true )
    id : int
    approachBodySite : BodySite
    targetBodySite : BodySite
    effectRegion : Region
    sideEffectSite : Muscle
end

declare BodySite
@propertyReactive
@Traitable( logical=true )
    id : int
end


declare trait Region
@Trait( logical=true )
@propertyReactive
end

declare trait SomeProcedure
@propertyReactive
    approachBodySite : BodySite
    targetBodySite : BodySite
    price   : Double = 1000.0
    effectRegion : Back
    sideEffectSite : Region
end

declare trait LeftNail @propertyReactive end
declare trait RightNail @propertyReactive end

declare trait Muscle @propertyReactive end

declare trait PolishingProcedure extends SomeProcedure
@propertyReactive
    locus : LeftNail      @Alias( "approachBodySite" )
    focus : RightNail     @Alias( "targetBodySite" )
end


// Some mock data
rule "Init Data"
when
then
    Back back = new Back();
    Region r = don( back, Region.class );

    BodySite m = new BodySite( 99 );
    Muscle msc = don( m, Muscle.class );

    BodySite b1 = new BodySite( 11 );
    BodySite b2 = new BodySite( 12 );
    Procedure pe = new Procedure( 1, b1, b2, r, msc );


    don( b1, LeftNail.class );
    don( b2, RightNail.class );
    don( pe, PolishingProcedure.class );
end



rule "Procedures v4"
when
    $o : PolishingProcedure( approachBodySite isA LeftNail, targetBodySite isA RightNail,
                             $app : approachBodySite, $tgt : targetBodySite,
                             $eff : effectRegion isA Region,
                             $loc : locus, $foc : focus,
                             price > 100.0 )
then
    list.add( $app instanceof BodySite );
    list.add( $tgt instanceof BodySite );
    list.add( $loc instanceof LeftNail );
    list.add( $foc instanceof RightNail );
    list.add( $app == $loc.getCore() );
    list.add( $tgt == $foc.getCore() );

    BodySite bs = new BodySite( 99 );
    RightNail rn = don( bs, RightNail.class );
    $o.setFocus( rn );

    list.add( $o.getFocus() == rn );
    list.add( $o.getTargetBodySite() == bs );
end
