/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.drools.compiler.integrationtests

// extracted from backward chaining test by jsvitak

import java.util.List
import java.util.ArrayList

import org.drools.compiler.integrationtests.SeveralKieSessionsTest.ListHolder

dialect "mvel"


// family facts and queries
// ------------------------

declare Person
    name : String
    age : int
end

declare Man extends Person
end

declare Woman extends Person
end

declare Parent
    parent : String
    child : String
end

query isFather(String father, String child)
    Parent(father := parent, child := child) and Man(father := name)
end

query isMother(String mother, String child)
    Parent(mother := parent, child := child) and Woman(mother := name)
end

query isGrandparent(String grandparent, String grandson)
    Parent(grandparent := parent, x := child) and Parent(x := parent, grandson := child)
end

query isGrandma(String grandmother, String grandson)
    isMother(grandmother := mother, x := child) and Parent(x := parent, grandson := child)
end

rule manRule
    when
        listHolder : ListHolder()
        Man($name := name)
    then
        //System.out.println($name + " is man!");
        listHolder.getManList().add($name);
end

rule manOrWomanRule
    when
        listHolder : ListHolder()
        (Man($name := name) or Woman($name := name))
    then
        //System.out.println($name + " is man or woman!");
        listHolder.getPersonList().add($name);
end

rule parentRule
    when
        listHolder : ListHolder()
        (Man($name := name) or Woman($name := name))
        Parent($parent, $name;)
    then
        //System.out.println($name + " has parent " + $parent);
        listHolder.getParentList().add($parent);
end

// problem Man or Woman does not work (Man cannot be cast to Woman)
rule motherRule
    when
        listHolder : ListHolder()
        //(Man($name := name) or Woman($name := name))
        Person($name : name)
        ?isMother($mother, $name;)
    then
        //System.out.println($name + " has mother " + $mother);
        listHolder.getMotherList().add($mother);
end

// rule triggers for every person and searches its father
rule fatherRule
    when
        listHolder : ListHolder()
        Person($name;)
        $fathers := List() from accumulate (?isFather($father, $name;), collectList($father))
    then
        //System.out.println($name + "'s fathers: " + $fathers);
        listHolder.getFatherList().addAll($fathers);
end


// problem Man or Woman does not work (Man cannot be cast to Woman), must use Person
rule grandparentRule
    when
        listHolder : ListHolder()
        Person($name : name)
        ?isGrandparent($grandparent := grandparent, $name := grandson)
    then
        //System.out.println($name + " has grandparent " + $grandparent)
        listHolder.getGrandparentList().add($grandparent);
end

rule grandmaBlessedAgeRule
    when
        listHolder : ListHolder()
        Person($me : name)
        ?isGrandma($grandma := grandmother, $me := grandson)
        Woman($grandma := name, age > 100)
    then
        //System.out.println("Grandma " + $grandma + " of " + $me + " has " + "$age" + " years!");
        listHolder.setGrandmaBlessedAgeTriggered(true);
end
