/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.drools.compiler.integrationtests
dialect "java" 

import java.util.ArrayList;
import java.util.HashSet;

import org.drools.mvel.integrationtests.TruthMaintenanceTest.ShiftAssignment;
import org.drools.mvel.integrationtests.TruthMaintenanceTest.IntervalRequirement;

global java.util.List totallyCovered
global java.util.List notCovered
global java.util.List partiallyCovered

rule "intervalRequirementNotCovered"
    when
        $intervalReq : IntervalRequirement($interval : interval)
        not (ShiftAssignment(shiftStartTime <= $interval, shiftEndTime > $interval))
    then 
        // actions
        notCovered.add($intervalReq);
        System.out.println("intervalRequirementNotCovered -> " + $intervalReq);
end

rule "intervalRequirementPartiallyCovered"
    when
        $intervalReq : IntervalRequirement($interval : interval, $staffingRequired : staffingRequired)
        $matchingShiftAssignmentsCount : Number(intValue() > 0, intValue() < $staffingRequired) from accumulate(
            $matchingShiftAssignments : ShiftAssignment(shiftStartTime <= $interval, shiftEndTime > $interval)
                                            , count($matchingShiftAssignments)
        )
    then 
        // actions
        partiallyCovered.add($intervalReq);
        System.out.println("intervalRequirementPartiallyCovered -> " + $intervalReq + " covered by " + $matchingShiftAssignmentsCount + " ShiftAssignment(s)");
end

rule "intervalRequirementTotallyCovered"
    when
        $intervalReq : IntervalRequirement($interval : interval, $staffingRequired : staffingRequired)
        $matchingShiftAssignmentsCount : Number(intValue() > 0, intValue() >= $staffingRequired) from accumulate(
            $matchingShiftAssignments : ShiftAssignment(shiftStartTime <= $interval, shiftEndTime > $interval)
                                            , count($matchingShiftAssignments)
        )
    then 
        // actions
        totallyCovered.add($intervalReq);
        System.out.println("intervalRequirementTotallyCovered -> " + $intervalReq + " covered by " + $matchingShiftAssignmentsCount + " ShiftAssignment(s)");
end
