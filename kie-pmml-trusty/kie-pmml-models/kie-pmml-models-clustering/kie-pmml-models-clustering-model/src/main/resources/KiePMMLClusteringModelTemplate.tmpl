/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.kie.pmml.models.clustering;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.kie.pmml.api.models.*;
import org.kie.pmml.commons.model.*;
import org.kie.pmml.commons.model.expressions.*;
import org.kie.pmml.commons.transformations.*;
import org.kie.pmml.models.clustering.model.*;

public class KiePMMLClusteringModelTemplate {

    public static KiePMMLClusteringModel getModel() {
        KiePMMLClusteringModel toReturn = KiePMMLClusteringModel.builder(fileName, name, miningFunction)
                                        .withModelClass(modelClass)
                                        .withClusters(getClusters())
                                        .withClusteringFields(getClusteringFields())
                                        .withComparisonMeasure(comparisonMeasure)
                                        .withMissingValueWeights(missingValueWeights)
                                        .withTargetField(targetField)
                                        .withMiningFields(getCreatedMiningFields())
                                        .withOutputFields(getCreatedOutputFields())
                                        .withKiePMMLMiningFields(getCreatedKiePMMLMiningFields())
                                        .withKiePMMLOutputFields(getCreatedKiePMMLOutputFields())
                                        .withKiePMMLTargets(getCreatedKiePMMLTargets() )
                                        .withKiePMMLTransformationDictionary(getCreatedTransformationDictionary())
                                        .withKiePMMLLocalTransformations(getCreatedLocalTransformations())
                                        .build();
        return toReturn;
    }

    private static List<KiePMMLCluster> getClusters() {
            List<KiePMMLCluster> toReturn = new ArrayList();
            return toReturn;
    }

    private static List<KiePMMLClusteringField> getClusteringFields() {
            List<KiePMMLClusteringField> toReturn = new ArrayList();
            return toReturn;
    }



    private static List<MiningField> getCreatedMiningFields() {
            List<MiningField> toReturn = new ArrayList();
            return toReturn;
        }

        private static List<OutputField> getCreatedOutputFields() {
            List<OutputField> toReturn = new ArrayList();
            return toReturn;
        }

        private static List<KiePMMLMiningField> getCreatedKiePMMLMiningFields() {
            List<KiePMMLMiningField> toReturn = new ArrayList();
            return toReturn;
        }

        private static List<KiePMMLOutputField> getCreatedKiePMMLOutputFields() {
            List<KiePMMLOutputField> toReturn = new ArrayList();
            return toReturn;
        }

        private static List<KiePMMLTarget> getCreatedKiePMMLTargets() {
            List<KiePMMLTarget> toReturn = new ArrayList();
            return toReturn;
        }

        private static KiePMMLTransformationDictionary getCreatedTransformationDictionary() {
            return null;
        }

        private static KiePMMLLocalTransformations getCreatedLocalTransformations() {
            return null;
        }
}
